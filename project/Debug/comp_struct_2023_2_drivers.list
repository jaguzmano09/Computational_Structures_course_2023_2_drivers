
comp_struct_2023_2_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a8  080051a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b0  080051b0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080051b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08005220  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08005220  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb56  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a9  00000000  00000000  0002cc31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002ece0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082f  00000000  00000000  0002f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269fe  00000000  00000000  0002ffd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4b9  00000000  00000000  000569d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9882  00000000  00000000  00063e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000323c  00000000  00000000  0014d710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d4  00000000  00000000  0015094c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005108 	.word	0x08005108

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005108 	.word	0x08005108

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_write+0x28>)
 8000584:	f002 fb22 	bl	8002bcc <HAL_UART_Transmit>
  return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000084 	.word	0x20000084

08000598 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	ring_buffer_put(&ring_buffer_uart_rx, rx_data);
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <HAL_UART_RxCpltCallback+0x28>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <HAL_UART_RxCpltCallback+0x2c>)
 80005a8:	f000 f989 	bl	80008be <ring_buffer_put>

	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	4904      	ldr	r1, [pc, #16]	; (80005c0 <HAL_UART_RxCpltCallback+0x28>)
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <HAL_UART_RxCpltCallback+0x30>)
 80005b2:	f002 fb95 	bl	8002ce0 <HAL_UART_Receive_IT>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000128 	.word	0x20000128
 80005c4:	2000011c 	.word	0x2000011c
 80005c8:	20000084 	.word	0x20000084

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fb9a 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f868 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f8e8 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e0:	f000 f8b6 	bl	8000750 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 16);
 80005e4:	2210      	movs	r2, #16
 80005e6:	492c      	ldr	r1, [pc, #176]	; (8000698 <main+0xcc>)
 80005e8:	482c      	ldr	r0, [pc, #176]	; (800069c <main+0xd0>)
 80005ea:	f000 f94c 	bl	8000886 <ring_buffer_init>

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	492b      	ldr	r1, [pc, #172]	; (80006a0 <main+0xd4>)
 80005f2:	482c      	ldr	r0, [pc, #176]	; (80006a4 <main+0xd8>)
 80005f4:	f002 fb74 	bl	8002ce0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t size = ring_buffer_size(&ring_buffer_uart_rx);
 80005f8:	4828      	ldr	r0, [pc, #160]	; (800069c <main+0xd0>)
 80005fa:	f000 f9c7 	bl	800098c <ring_buffer_size>
 80005fe:	4603      	mov	r3, r0
 8000600:	81bb      	strh	r3, [r7, #12]
	  if (size != 0) {
 8000602:	89bb      	ldrh	r3, [r7, #12]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d042      	beq.n	800068e <main+0xc2>
 8000608:	466b      	mov	r3, sp
 800060a:	461e      	mov	r6, r3
		  uint8_t rx_message[size + 1];
 800060c:	89bb      	ldrh	r3, [r7, #12]
 800060e:	1c59      	adds	r1, r3, #1
 8000610:	1e4b      	subs	r3, r1, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	460a      	mov	r2, r1
 8000616:	2300      	movs	r3, #0
 8000618:	4614      	mov	r4, r2
 800061a:	461d      	mov	r5, r3
 800061c:	f04f 0200 	mov.w	r2, #0
 8000620:	f04f 0300 	mov.w	r3, #0
 8000624:	00eb      	lsls	r3, r5, #3
 8000626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800062a:	00e2      	lsls	r2, r4, #3
 800062c:	460a      	mov	r2, r1
 800062e:	2300      	movs	r3, #0
 8000630:	4690      	mov	r8, r2
 8000632:	4699      	mov	r9, r3
 8000634:	f04f 0200 	mov.w	r2, #0
 8000638:	f04f 0300 	mov.w	r3, #0
 800063c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000640:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000644:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000648:	460b      	mov	r3, r1
 800064a:	3307      	adds	r3, #7
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	ebad 0d03 	sub.w	sp, sp, r3
 8000654:	466b      	mov	r3, sp
 8000656:	3300      	adds	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
		  for (uint16_t idx = 0; idx < size; idx++) {
 800065a:	2300      	movs	r3, #0
 800065c:	81fb      	strh	r3, [r7, #14]
 800065e:	e009      	b.n	8000674 <main+0xa8>
			  ring_buffer_get(&ring_buffer_uart_rx, &rx_message[idx]);
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <main+0xd0>)
 800066a:	f000 f965 	bl	8000938 <ring_buffer_get>
		  for (uint16_t idx = 0; idx < size; idx++) {
 800066e:	89fb      	ldrh	r3, [r7, #14]
 8000670:	3301      	adds	r3, #1
 8000672:	81fb      	strh	r3, [r7, #14]
 8000674:	89fa      	ldrh	r2, [r7, #14]
 8000676:	89bb      	ldrh	r3, [r7, #12]
 8000678:	429a      	cmp	r2, r3
 800067a:	d3f1      	bcc.n	8000660 <main+0x94>
		  }
		  rx_message[size] = 0;
 800067c:	89bb      	ldrh	r3, [r7, #12]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	2100      	movs	r1, #0
 8000682:	54d1      	strb	r1, [r2, r3]
		  printf("Rec: %s\r\n", rx_message);
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <main+0xdc>)
 8000688:	f003 feca 	bl	8004420 <iprintf>
 800068c:	46b5      	mov	sp, r6
	  }
	  HAL_Delay(1000); // to wait one second
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f000 fbb7 	bl	8000e04 <HAL_Delay>
  {
 8000696:	e7af      	b.n	80005f8 <main+0x2c>
 8000698:	2000010c 	.word	0x2000010c
 800069c:	2000011c 	.word	0x2000011c
 80006a0:	20000128 	.word	0x20000128
 80006a4:	20000084 	.word	0x20000084
 80006a8:	08005120 	.word	0x08005120

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	; 0x58
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2244      	movs	r2, #68	; 0x44
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 ff05 	bl	80044ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d2:	f000 ff1b 	bl	800150c <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006dc:	f000 f8ce 	bl	800087c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006fa:	230a      	movs	r3, #10
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4618      	mov	r0, r3
 8000710:	f000 ff52 	bl	80015b8 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800071a:	f000 f8af 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fb1a 	bl	8001d70 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000742:	f000 f89b 	bl	800087c <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3758      	adds	r7, #88	; 0x58
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_USART2_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000794:	f002 f9cc 	bl	8002b30 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f86d 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000084 	.word	0x20000084
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a2a      	ldr	r2, [pc, #168]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b28      	ldr	r3, [pc, #160]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a24      	ldr	r2, [pc, #144]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a1e      	ldr	r2, [pc, #120]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_GPIO_Init+0xc4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <MX_GPIO_Init+0xc4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_GPIO_Init+0xc4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f000 fe47 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000838:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_GPIO_Init+0xc8>)
 800084a:	f000 fc8f 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084e:	2320      	movs	r3, #32
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f000 fc80 	bl	800116c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	48000800 	.word	0x48000800

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>

08000886 <ring_buffer_init>:

/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8000886:	b480      	push	{r7}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	4613      	mov	r3, r2
 8000892:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	88fa      	ldrh	r2, [r7, #6]
 800089e:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2200      	movs	r2, #0
 80008a4:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2200      	movs	r2, #0
 80008aa:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2200      	movs	r2, #0
 80008b0:	729a      	strb	r2, [r3, #10]
}
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <ring_buffer_put>:


uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	460b      	mov	r3, r1
 80008c8:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	8892      	ldrh	r2, [r2, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	78fa      	ldrb	r2, [r7, #3]
 80008d6:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head + 1) % ring_buffer->capacity;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	889b      	ldrh	r3, [r3, #4]
 80008dc:	3301      	adds	r3, #1
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	8912      	ldrh	r2, [r2, #8]
 80008e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80008e6:	fb01 f202 	mul.w	r2, r1, r2
 80008ea:	1a9b      	subs	r3, r3, r2
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	809a      	strh	r2, [r3, #4]

	if (ring_buffer->is_full != 0) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7a9b      	ldrb	r3, [r3, #10]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d00c      	beq.n	8000914 <ring_buffer_put+0x56>
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	88db      	ldrh	r3, [r3, #6]
 80008fe:	3301      	adds	r3, #1
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	8912      	ldrh	r2, [r2, #8]
 8000904:	fb93 f1f2 	sdiv	r1, r3, r2
 8000908:	fb01 f202 	mul.w	r2, r1, r2
 800090c:	1a9b      	subs	r3, r3, r2
 800090e:	b29a      	uxth	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	80da      	strh	r2, [r3, #6]
	}

	if (ring_buffer->head == ring_buffer->tail) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	889a      	ldrh	r2, [r3, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	88db      	ldrh	r3, [r3, #6]
 800091c:	429a      	cmp	r2, r3
 800091e:	d104      	bne.n	800092a <ring_buffer_put+0x6c>
		ring_buffer->is_full = 1;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2201      	movs	r2, #1
 8000924:	729a      	strb	r2, [r3, #10]
		return 0;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <ring_buffer_put+0x6e>
	}
	return 1;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <ring_buffer_get>:
 * @brief This function reads a data from the ring buffer
 * @param data: the pointer to the address to write the data
*/

uint8_t ring_buffer_get(ring_buffer_t *ring_buffer, uint8_t *data)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	if (ring_buffer_empty(ring_buffer)==0) {
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f84a 	bl	80009dc <ring_buffer_empty>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d119      	bne.n	8000982 <ring_buffer_get+0x4a>
		*data = ring_buffer->buffer[ring_buffer->tail];
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	88d2      	ldrh	r2, [r2, #6]
 8000956:	4413      	add	r3, r2
 8000958:	781a      	ldrb	r2, [r3, #0]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	701a      	strb	r2, [r3, #0]
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	88db      	ldrh	r3, [r3, #6]
 8000962:	3301      	adds	r3, #1
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	8912      	ldrh	r2, [r2, #8]
 8000968:	fb93 f1f2 	sdiv	r1, r3, r2
 800096c:	fb01 f202 	mul.w	r2, r1, r2
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	b29a      	uxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	80da      	strh	r2, [r3, #6]
		ring_buffer->is_full = 0;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	729a      	strb	r2, [r3, #10]
		return 1;
 800097e:	2301      	movs	r3, #1
 8000980:	e000      	b.n	8000984 <ring_buffer_get+0x4c>
	}
	return 0;
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <ring_buffer_size>:

/**
 * @brief This function returns the size of the ring buffer
*/
uint16_t ring_buffer_size(ring_buffer_t *ring_buffer)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	uint16_t size = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	81fb      	strh	r3, [r7, #14]

	if ((ring_buffer->is_full == 0) && (ring_buffer->tail <= ring_buffer->head)) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7a9b      	ldrb	r3, [r3, #10]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10c      	bne.n	80009ba <ring_buffer_size+0x2e>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	88da      	ldrh	r2, [r3, #6]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	889b      	ldrh	r3, [r3, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d806      	bhi.n	80009ba <ring_buffer_size+0x2e>
		size = ring_buffer->head - ring_buffer->tail;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	889a      	ldrh	r2, [r3, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	88db      	ldrh	r3, [r3, #6]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	81fb      	strh	r3, [r7, #14]
 80009b8:	e009      	b.n	80009ce <ring_buffer_size+0x42>
	} else {
		size = ring_buffer->head + (ring_buffer->capacity - ring_buffer->tail);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	889a      	ldrh	r2, [r3, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	8919      	ldrh	r1, [r3, #8]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	88db      	ldrh	r3, [r3, #6]
 80009c6:	1acb      	subs	r3, r1, r3
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	4413      	add	r3, r2
 80009cc:	81fb      	strh	r3, [r7, #14]
	}

	return size;
 80009ce:	89fb      	ldrh	r3, [r7, #14]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <ring_buffer_empty>:
/**
 *@brief this function check ring_buffer is empty
 */
uint8_t ring_buffer_empty(ring_buffer_t *ring_buffer)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

	return ((ring_buffer->head == ring_buffer->tail) && (ring_buffer->is_full==0));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	889a      	ldrh	r2, [r3, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	88db      	ldrh	r3, [r3, #6]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d105      	bne.n	80009fc <ring_buffer_empty+0x20>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7a9b      	ldrb	r3, [r3, #10]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d101      	bne.n	80009fc <ring_buffer_empty+0x20>
 80009f8:	2301      	movs	r3, #1
 80009fa:	e000      	b.n	80009fe <ring_buffer_empty+0x22>
 80009fc:	2300      	movs	r3, #0
 80009fe:	b2db      	uxtb	r3, r3

}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6593      	str	r3, [r2, #88]	; 0x58
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0ac      	sub	sp, #176	; 0xb0
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 fd28 	bl	80044ca <memset>
  if(huart->Instance==USART2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <HAL_UART_MspInit+0xc0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d143      	bne.n	8000b0c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fb91 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a9c:	f7ff feee 	bl	800087c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa4:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fb38 	bl	800116c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	2026      	movs	r0, #38	; 0x26
 8000b02:	f000 fa7e 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b06:	2026      	movs	r0, #38	; 0x26
 8000b08:	f000 fa97 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	37b0      	adds	r7, #176	; 0xb0
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40021000 	.word	0x40021000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f92c 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <USART2_IRQHandler+0x10>)
 8000b76:	f002 f8ff 	bl	8002d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000084 	.word	0x20000084

08000b84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e00a      	b.n	8000bac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b96:	f3af 8000 	nop.w
 8000b9a:	4601      	mov	r1, r0
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	b2ca      	uxtb	r2, r1
 8000ba4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf0      	blt.n	8000b96 <_read+0x12>
  }

  return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be6:	605a      	str	r2, [r3, #4]
  return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_isatty>:

int _isatty(int file)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f003 fc86 	bl	8004568 <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20018000 	.word	0x20018000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	2000012c 	.word	0x2000012c
 8000c90:	20000280 	.word	0x20000280

08000c94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cbc:	f7ff ffea 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f003 fc45 	bl	8004574 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cea:	f7ff fc6f 	bl	80005cc <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cfc:	080051b8 	.word	0x080051b8
  ldr r2, =_sbss
 8000d00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d04:	20000280 	.word	0x20000280

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_Init+0x3c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_Init+0x3c>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 f962 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 f80f 	bl	8000d4c <HAL_InitTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	e001      	b.n	8000d3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3a:	f7ff fe67 	bl	8000a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d023      	beq.n	8000da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_InitTick+0x70>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f96d 	bl	8001056 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10f      	bne.n	8000da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d809      	bhi.n	8000d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f937 	bl	8001002 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_InitTick+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e007      	b.n	8000dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e004      	b.n	8000dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e001      	b.n	8000dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000130 	.word	0x20000130

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000130 	.word	0x20000130

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff ffee 	bl	8000dec <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ffde 	bl	8000dec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff8e 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff29 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff3e 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff8e 	bl	8000f40 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff31 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d008      	beq.n	8001098 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2204      	movs	r2, #4
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e022      	b.n	80010de <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 020e 	bic.w	r2, r2, #14
 80010a6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f003 021c 	and.w	r2, r3, #28
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	2101      	movs	r1, #1
 80010c6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d005      	beq.n	800110e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2204      	movs	r2, #4
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e029      	b.n	8001162 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 020e 	bic.w	r2, r2, #14
 800111c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0201 	bic.w	r2, r2, #1
 800112c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f003 021c 	and.w	r2, r3, #28
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2101      	movs	r1, #1
 800113c:	fa01 f202 	lsl.w	r2, r1, r2
 8001140:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
    }
  }
  return status;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	e17f      	b.n	800147c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8171 	beq.w	8001476 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d005      	beq.n	80011ac <HAL_GPIO_Init+0x40>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d130      	bne.n	800120e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 0201 	and.w	r2, r3, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b03      	cmp	r3, #3
 8001218:	d118      	bne.n	800124c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001220:	2201      	movs	r2, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	f003 0201 	and.w	r2, r3, #1
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b03      	cmp	r3, #3
 8001256:	d017      	beq.n	8001288 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80ac 	beq.w	8001476 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <HAL_GPIO_Init+0x330>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	4a5e      	ldr	r2, [pc, #376]	; (800149c <HAL_GPIO_Init+0x330>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6613      	str	r3, [r2, #96]	; 0x60
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_GPIO_Init+0x330>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001336:	4a5a      	ldr	r2, [pc, #360]	; (80014a0 <HAL_GPIO_Init+0x334>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x242>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_GPIO_Init+0x338>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x23e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_GPIO_Init+0x33c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x23a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_GPIO_Init+0x340>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x236>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x344>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x232>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x348>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x22e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x22a>
 8001392:	2306      	movs	r3, #6
 8001394:	e00c      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 8001396:	2307      	movs	r3, #7
 8001398:	e00a      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 800139a:	2305      	movs	r3, #5
 800139c:	e008      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 800139e:	2304      	movs	r3, #4
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013ae:	2300      	movs	r3, #0
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4093      	lsls	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013c0:	4937      	ldr	r1, [pc, #220]	; (80014a0 <HAL_GPIO_Init+0x334>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f2:	4a32      	ldr	r2, [pc, #200]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <HAL_GPIO_Init+0x350>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001446:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_GPIO_Init+0x350>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	f47f ae78 	bne.w	800117c <HAL_GPIO_Init+0x10>
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	48000400 	.word	0x48000400
 80014a8:	48000800 	.word	0x48000800
 80014ac:	48000c00 	.word	0x48000c00
 80014b0:	48001000 	.word	0x48001000
 80014b4:	48001400 	.word	0x48001400
 80014b8:	48001800 	.word	0x48001800
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_PWREx_GetVoltageRange+0x18>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40007000 	.word	0x40007000

0800150c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151a:	d130      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001528:	d038      	beq.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2232      	movs	r2, #50	; 0x32
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001550:	e002      	b.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3b01      	subs	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001564:	d102      	bne.n	800156c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f2      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001578:	d110      	bne.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e00f      	b.n	800159e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158a:	d007      	beq.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40007000 	.word	0x40007000
 80015b0:	20000000 	.word	0x20000000
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e3ca      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ca:	4b97      	ldr	r3, [pc, #604]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d4:	4b94      	ldr	r3, [pc, #592]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80e4 	beq.w	80017b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_RCC_OscConfig+0x4a>
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	f040 808b 	bne.w	8001710 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	f040 8087 	bne.w	8001710 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001602:	4b89      	ldr	r3, [pc, #548]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x62>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e3a2      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1a      	ldr	r2, [r3, #32]
 800161e:	4b82      	ldr	r3, [pc, #520]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <HAL_RCC_OscConfig+0x7c>
 800162a:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001632:	e005      	b.n	8001640 <HAL_RCC_OscConfig+0x88>
 8001634:	4b7c      	ldr	r3, [pc, #496]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001640:	4293      	cmp	r3, r2
 8001642:	d223      	bcs.n	800168c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd55 	bl	80020f8 <RCC_SetFlashLatencyFromMSIRange>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e383      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001658:	4b73      	ldr	r3, [pc, #460]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a72      	ldr	r2, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b70      	ldr	r3, [pc, #448]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	496d      	ldr	r1, [pc, #436]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001676:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	4968      	ldr	r1, [pc, #416]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
 800168a:	e025      	b.n	80016d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168c:	4b66      	ldr	r3, [pc, #408]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a65      	ldr	r2, [pc, #404]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4960      	ldr	r1, [pc, #384]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016aa:	4b5f      	ldr	r3, [pc, #380]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	495b      	ldr	r1, [pc, #364]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fd15 	bl	80020f8 <RCC_SetFlashLatencyFromMSIRange>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e343      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d8:	f000 fc4a 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b52      	ldr	r3, [pc, #328]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	4950      	ldr	r1, [pc, #320]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80016ea:	5ccb      	ldrb	r3, [r1, r3]
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	4a4e      	ldr	r2, [pc, #312]	; (8001830 <HAL_RCC_OscConfig+0x278>)
 80016f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016f8:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <HAL_RCC_OscConfig+0x27c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb25 	bl	8000d4c <HAL_InitTick>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d052      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	e327      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d032      	beq.n	800177e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001718:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a42      	ldr	r2, [pc, #264]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001724:	f7ff fb62 	bl	8000dec <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172c:	f7ff fb5e 	bl	8000dec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e310      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174a:	4b37      	ldr	r3, [pc, #220]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a36      	ldr	r2, [pc, #216]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4931      	ldr	r1, [pc, #196]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001768:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	492c      	ldr	r1, [pc, #176]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e01a      	b.n	80017b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a29      	ldr	r2, [pc, #164]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800178a:	f7ff fb2f 	bl	8000dec <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001792:	f7ff fb2b 	bl	8000dec <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e2dd      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x1da>
 80017b0:	e000      	b.n	80017b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d074      	beq.n	80018aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x21a>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	d10e      	bne.n	80017ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d10b      	bne.n	80017ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d064      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d160      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e2ba      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x24a>
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e026      	b.n	8001850 <HAL_RCC_OscConfig+0x298>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180a:	d115      	bne.n	8001838 <HAL_RCC_OscConfig+0x280>
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a02      	ldr	r2, [pc, #8]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e014      	b.n	8001850 <HAL_RCC_OscConfig+0x298>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	0800512c 	.word	0x0800512c
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004
 8001838:	4ba0      	ldr	r3, [pc, #640]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a9f      	ldr	r2, [pc, #636]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800183e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b9d      	ldr	r3, [pc, #628]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a9c      	ldr	r2, [pc, #624]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fac8 	bl	8000dec <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff fac4 	bl	8000dec <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e276      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001872:	4b92      	ldr	r3, [pc, #584]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x2a8>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fab4 	bl	8000dec <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fab0 	bl	8000dec <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e262      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x2d0>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d060      	beq.n	8001978 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x310>
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d119      	bne.n	80018f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d116      	bne.n	80018f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c8:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_OscConfig+0x328>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e23f      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	061b      	lsls	r3, r3, #24
 80018ee:	4973      	ldr	r1, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	e040      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d023      	beq.n	8001946 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fe:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff fa6f 	bl	8000dec <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff fa6b 	bl	8000dec <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e21d      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001924:	4b65      	ldr	r3, [pc, #404]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	495f      	ldr	r1, [pc, #380]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
 8001944:	e018      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a5c      	ldr	r2, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800194c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff fa4b 	bl	8000dec <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff fa47 	bl	8000dec <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1f9      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d03c      	beq.n	80019fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff fa26 	bl	8000dec <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fa22 	bl	8000dec <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1d4      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ef      	beq.n	80019a4 <HAL_RCC_OscConfig+0x3ec>
 80019c4:	e01b      	b.n	80019fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019cc:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff fa09 	bl	8000dec <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019de:	f7ff fa05 	bl	8000dec <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1b7      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f0:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1ef      	bne.n	80019de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80a6 	beq.w	8001b58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10d      	bne.n	8001a38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6593      	str	r3, [r2, #88]	; 0x58
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a34:	2301      	movs	r3, #1
 8001a36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d118      	bne.n	8001a76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a50:	f7ff f9cc 	bl	8000dec <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a58:	f7ff f9c8 	bl	8000dec <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e17a      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4d8>
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8e:	e029      	b.n	8001ae4 <HAL_RCC_OscConfig+0x52c>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d115      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x50c>
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_OscConfig+0x52c>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	4b9c      	ldr	r3, [pc, #624]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	4a9b      	ldr	r2, [pc, #620]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad4:	4b98      	ldr	r3, [pc, #608]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a97      	ldr	r2, [pc, #604]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d016      	beq.n	8001b1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff f97e 	bl	8000dec <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff f97a 	bl	8000dec <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e12a      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0a:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ed      	beq.n	8001af4 <HAL_RCC_OscConfig+0x53c>
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f967 	bl	8000dec <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7ff f963 	bl	8000dec <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e113      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b38:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ed      	bne.n	8001b22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b46:	7ffb      	ldrb	r3, [r7, #31]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4c:	4b7a      	ldr	r3, [pc, #488]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	4a79      	ldr	r2, [pc, #484]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80fe 	beq.w	8001d5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	f040 80d0 	bne.w	8001d0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b6c:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d130      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d127      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d11f      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bac:	2a07      	cmp	r2, #7
 8001bae:	bf14      	ite	ne
 8001bb0:	2201      	movne	r2, #1
 8001bb2:	2200      	moveq	r2, #0
 8001bb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d113      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d06e      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d069      	beq.n	8001cbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0ad      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c04:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a4b      	ldr	r2, [pc, #300]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c10:	f7ff f8ec 	bl	8000dec <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f8e8 	bl	8000dec <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e09a      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c36:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <HAL_RCC_OscConfig+0x784>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c46:	3a01      	subs	r2, #1
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c50:	0212      	lsls	r2, r2, #8
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c58:	0852      	lsrs	r2, r2, #1
 8001c5a:	3a01      	subs	r2, #1
 8001c5c:	0552      	lsls	r2, r2, #21
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c64:	0852      	lsrs	r2, r2, #1
 8001c66:	3a01      	subs	r2, #1
 8001c68:	0652      	lsls	r2, r2, #25
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c70:	0912      	lsrs	r2, r2, #4
 8001c72:	0452      	lsls	r2, r2, #17
 8001c74:	430a      	orrs	r2, r1
 8001c76:	4930      	ldr	r1, [pc, #192]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2d      	ldr	r2, [pc, #180]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4a2a      	ldr	r2, [pc, #168]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c94:	f7ff f8aa 	bl	8000dec <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff f8a6 	bl	8000dec <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e058      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cba:	e050      	b.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e04f      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d148      	bne.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a16      	ldr	r2, [pc, #88]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ce4:	f7ff f882 	bl	8000dec <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f87e 	bl	8000dec <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e030      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x734>
 8001d0a:	e028      	b.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d023      	beq.n	8001d5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f865 	bl	8000dec <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d24:	e00c      	b.n	8001d40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d26:	f7ff f861 	bl	8000dec <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d905      	bls.n	8001d40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e013      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_OscConfig+0x7b0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ec      	bne.n	8001d26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_OscConfig+0x7b0>)
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	4905      	ldr	r1, [pc, #20]	; (8001d68 <HAL_RCC_OscConfig+0x7b0>)
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_OscConfig+0x7b4>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	60cb      	str	r3, [r1, #12]
 8001d58:	e001      	b.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	feeefffc 	.word	0xfeeefffc

08001d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0e7      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4b75      	ldr	r3, [pc, #468]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d910      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	4970      	ldr	r1, [pc, #448]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b6e      	ldr	r3, [pc, #440]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0cf      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d010      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d908      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4960      	ldr	r1, [pc, #384]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d04c      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df6:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d121      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0a6      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	4b54      	ldr	r3, [pc, #336]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d115      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e09a      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e26:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e08e      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e36:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e086      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f023 0203 	bic.w	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4943      	ldr	r1, [pc, #268]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e58:	f7fe ffc8 	bl	8000dec <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7fe ffc4 	bl	8000dec <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e06e      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 020c 	and.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1eb      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d010      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d208      	bcs.n	8001eb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	492b      	ldr	r1, [pc, #172]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d210      	bcs.n	8001ee6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 0207 	bic.w	r2, r3, #7
 8001ecc:	4923      	ldr	r1, [pc, #140]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e036      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	4918      	ldr	r1, [pc, #96]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4910      	ldr	r1, [pc, #64]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f24:	f000 f824 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	490b      	ldr	r1, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1f4>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1fc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe feff 	bl	8000d4c <HAL_InitTick>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f52:	7afb      	ldrb	r3, [r7, #11]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	0800512c 	.word	0x0800512c
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d121      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d11e      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fa4:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fb0:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e005      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fcc:	4a2b      	ldr	r2, [pc, #172]	; (800207c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10d      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d102      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	e004      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d134      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d003      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0xa6>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d003      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0xac>
 8002014:	e005      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_RCC_GetSysClockFreq+0x110>)
 8002018:	617b      	str	r3, [r7, #20]
      break;
 800201a:	e005      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_RCC_GetSysClockFreq+0x114>)
 800201e:	617b      	str	r3, [r7, #20]
      break;
 8002020:	e002      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	617b      	str	r3, [r7, #20]
      break;
 8002026:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	3301      	adds	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	fb03 f202 	mul.w	r2, r3, r2
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	0e5b      	lsrs	r3, r3, #25
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	3301      	adds	r3, #1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002068:	69bb      	ldr	r3, [r7, #24]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	08005144 	.word	0x08005144
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200

08002088 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_RCC_GetHCLKFreq+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000000 	.word	0x20000000

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020a4:	f7ff fff0 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4904      	ldr	r1, [pc, #16]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	0800513c 	.word	0x0800513c

080020cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020d0:	f7ff ffda 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	0adb      	lsrs	r3, r3, #11
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4904      	ldr	r1, [pc, #16]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	0800513c 	.word	0x0800513c

080020f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002110:	f7ff f9ee 	bl	80014f0 <HAL_PWREx_GetVoltageRange>
 8002114:	6178      	str	r0, [r7, #20]
 8002116:	e014      	b.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002122:	6593      	str	r3, [r2, #88]	; 0x58
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002130:	f7ff f9de 	bl	80014f0 <HAL_PWREx_GetVoltageRange>
 8002134:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002148:	d10b      	bne.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d919      	bls.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2ba0      	cmp	r3, #160	; 0xa0
 8002154:	d902      	bls.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002156:	2302      	movs	r3, #2
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	e013      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800215c:	2301      	movs	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e010      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b80      	cmp	r3, #128	; 0x80
 8002166:	d902      	bls.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002168:	2303      	movs	r3, #3
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e00a      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d102      	bne.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002174:	2302      	movs	r3, #2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e004      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b70      	cmp	r3, #112	; 0x70
 800217e:	d101      	bne.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002180:	2301      	movs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0207 	bic.w	r2, r3, #7
 800218c:	4909      	ldr	r1, [pc, #36]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021c0:	2300      	movs	r3, #0
 80021c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021c4:	2300      	movs	r3, #0
 80021c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d041      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021dc:	d02a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021e2:	d824      	bhi.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021e8:	d008      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021ee:	d81e      	bhi.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021f8:	d010      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021fa:	e018      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021fc:	4b86      	ldr	r3, [pc, #536]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a85      	ldr	r2, [pc, #532]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002208:	e015      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fabb 	bl	800278c <RCCEx_PLLSAI1_Config>
 8002216:	4603      	mov	r3, r0
 8002218:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800221a:	e00c      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3320      	adds	r3, #32
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fba6 	bl	8002974 <RCCEx_PLLSAI2_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800222c:	e003      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	74fb      	strb	r3, [r7, #19]
      break;
 8002232:	e000      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800223c:	4b76      	ldr	r3, [pc, #472]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800224a:	4973      	ldr	r1, [pc, #460]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002252:	e001      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d041      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002268:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800226c:	d02a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800226e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002272:	d824      	bhi.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002278:	d008      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800227a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800227e:	d81e      	bhi.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002288:	d010      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800228a:	e018      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800228c:	4b62      	ldr	r3, [pc, #392]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a61      	ldr	r2, [pc, #388]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002296:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002298:	e015      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fa73 	bl	800278c <RCCEx_PLLSAI1_Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022aa:	e00c      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3320      	adds	r3, #32
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fb5e 	bl	8002974 <RCCEx_PLLSAI2_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022bc:	e003      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	74fb      	strb	r3, [r7, #19]
      break;
 80022c2:	e000      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022cc:	4b52      	ldr	r3, [pc, #328]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022da:	494f      	ldr	r1, [pc, #316]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022e2:	e001      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a0 	beq.w	8002436 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800230a:	2300      	movs	r3, #0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	4b41      	ldr	r3, [pc, #260]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	4a40      	ldr	r2, [pc, #256]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231a:	6593      	str	r3, [r2, #88]	; 0x58
 800231c:	4b3e      	ldr	r3, [pc, #248]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002328:	2301      	movs	r3, #1
 800232a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800232c:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a3a      	ldr	r2, [pc, #232]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002336:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002338:	f7fe fd58 	bl	8000dec <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800233e:	e009      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002340:	f7fe fd54 	bl	8000dec <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d902      	bls.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	74fb      	strb	r3, [r7, #19]
        break;
 8002352:	e005      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002354:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ef      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d15c      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002366:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002370:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01f      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	d019      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002396:	4a20      	ldr	r2, [pc, #128]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023b0:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d016      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c2:	f7fe fd13 	bl	8000dec <HAL_GetTick>
 80023c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c8:	e00b      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe fd0f 	bl	8000dec <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d902      	bls.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	74fb      	strb	r3, [r7, #19]
            break;
 80023e0:	e006      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ec      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10c      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002406:	4904      	ldr	r1, [pc, #16]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800240e:	e009      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	74bb      	strb	r3, [r7, #18]
 8002414:	e006      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002424:	7c7b      	ldrb	r3, [r7, #17]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d105      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b9e      	ldr	r3, [pc, #632]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	4a9d      	ldr	r2, [pc, #628]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002434:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002442:	4b98      	ldr	r3, [pc, #608]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f023 0203 	bic.w	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	4994      	ldr	r1, [pc, #592]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002464:	4b8f      	ldr	r3, [pc, #572]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 020c 	bic.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	498c      	ldr	r1, [pc, #560]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002486:	4b87      	ldr	r3, [pc, #540]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	4983      	ldr	r1, [pc, #524]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024a8:	4b7e      	ldr	r3, [pc, #504]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	497b      	ldr	r1, [pc, #492]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ca:	4b76      	ldr	r3, [pc, #472]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	4972      	ldr	r1, [pc, #456]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ec:	4b6d      	ldr	r3, [pc, #436]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	496a      	ldr	r1, [pc, #424]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	4961      	ldr	r1, [pc, #388]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002530:	4b5c      	ldr	r3, [pc, #368]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	4959      	ldr	r1, [pc, #356]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002552:	4b54      	ldr	r3, [pc, #336]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002560:	4950      	ldr	r1, [pc, #320]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002574:	4b4b      	ldr	r3, [pc, #300]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	4948      	ldr	r1, [pc, #288]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002596:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	493f      	ldr	r1, [pc, #252]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d028      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025b8:	4b3a      	ldr	r3, [pc, #232]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c6:	4937      	ldr	r1, [pc, #220]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d6:	d106      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d8:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a31      	ldr	r2, [pc, #196]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e2:	60d3      	str	r3, [r2, #12]
 80025e4:	e011      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ee:	d10c      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	2101      	movs	r1, #1
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f8c8 	bl	800278c <RCCEx_PLLSAI1_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d028      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002616:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	491f      	ldr	r1, [pc, #124]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002634:	d106      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4a1a      	ldr	r2, [pc, #104]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002640:	60d3      	str	r3, [r2, #12]
 8002642:	e011      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800264c:	d10c      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3304      	adds	r3, #4
 8002652:	2101      	movs	r1, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f899 	bl	800278c <RCCEx_PLLSAI1_Config>
 800265a:	4603      	mov	r3, r0
 800265c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d02b      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002692:	d109      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a02      	ldr	r2, [pc, #8]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800269e:	60d3      	str	r3, [r2, #12]
 80026a0:	e014      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2101      	movs	r1, #1
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f867 	bl	800278c <RCCEx_PLLSAI1_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d02f      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e6:	4928      	ldr	r1, [pc, #160]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026f6:	d10d      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3304      	adds	r3, #4
 80026fc:	2102      	movs	r1, #2
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f844 	bl	800278c <RCCEx_PLLSAI1_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d014      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	74bb      	strb	r3, [r7, #18]
 8002712:	e011      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271c:	d10c      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3320      	adds	r3, #32
 8002722:	2102      	movs	r1, #2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 f925 	bl	8002974 <RCCEx_PLLSAI2_Config>
 800272a:	4603      	mov	r3, r0
 800272c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002744:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002752:	490d      	ldr	r1, [pc, #52]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002776:	4904      	ldr	r1, [pc, #16]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800277e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000

0800278c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800279a:	4b75      	ldr	r3, [pc, #468]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d018      	beq.n	80027d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027a6:	4b72      	ldr	r3, [pc, #456]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0203 	and.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d10d      	bne.n	80027d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
       ||
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027be:	4b6c      	ldr	r3, [pc, #432]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
       ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d047      	beq.n	8002862 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e044      	b.n	8002862 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d018      	beq.n	8002812 <RCCEx_PLLSAI1_Config+0x86>
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d825      	bhi.n	8002830 <RCCEx_PLLSAI1_Config+0xa4>
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d002      	beq.n	80027ee <RCCEx_PLLSAI1_Config+0x62>
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d009      	beq.n	8002800 <RCCEx_PLLSAI1_Config+0x74>
 80027ec:	e020      	b.n	8002830 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ee:	4b60      	ldr	r3, [pc, #384]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11d      	bne.n	8002836 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fe:	e01a      	b.n	8002836 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002800:	4b5b      	ldr	r3, [pc, #364]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002810:	e013      	b.n	800283a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002812:	4b57      	ldr	r3, [pc, #348]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10f      	bne.n	800283e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800281e:	4b54      	ldr	r3, [pc, #336]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800282e:	e006      	b.n	800283e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      break;
 8002834:	e004      	b.n	8002840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002846:	4b4a      	ldr	r3, [pc, #296]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	430b      	orrs	r3, r1
 800285c:	4944      	ldr	r1, [pc, #272]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d17d      	bne.n	8002964 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002868:	4b41      	ldr	r3, [pc, #260]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a40      	ldr	r2, [pc, #256]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002874:	f7fe faba 	bl	8000dec <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800287a:	e009      	b.n	8002890 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800287c:	f7fe fab6 	bl	8000dec <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d902      	bls.n	8002890 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	73fb      	strb	r3, [r7, #15]
        break;
 800288e:	e005      	b.n	800289c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002890:	4b37      	ldr	r3, [pc, #220]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ef      	bne.n	800287c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d160      	bne.n	8002964 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d111      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a8:	4b31      	ldr	r3, [pc, #196]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6892      	ldr	r2, [r2, #8]
 80028b8:	0211      	lsls	r1, r2, #8
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	0912      	lsrs	r2, r2, #4
 80028c0:	0452      	lsls	r2, r2, #17
 80028c2:	430a      	orrs	r2, r1
 80028c4:	492a      	ldr	r1, [pc, #168]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	610b      	str	r3, [r1, #16]
 80028ca:	e027      	b.n	800291c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d112      	bne.n	80028f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6892      	ldr	r2, [r2, #8]
 80028e2:	0211      	lsls	r1, r2, #8
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6912      	ldr	r2, [r2, #16]
 80028e8:	0852      	lsrs	r2, r2, #1
 80028ea:	3a01      	subs	r2, #1
 80028ec:	0552      	lsls	r2, r2, #21
 80028ee:	430a      	orrs	r2, r1
 80028f0:	491f      	ldr	r1, [pc, #124]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	610b      	str	r3, [r1, #16]
 80028f6:	e011      	b.n	800291c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002900:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6892      	ldr	r2, [r2, #8]
 8002908:	0211      	lsls	r1, r2, #8
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6952      	ldr	r2, [r2, #20]
 800290e:	0852      	lsrs	r2, r2, #1
 8002910:	3a01      	subs	r2, #1
 8002912:	0652      	lsls	r2, r2, #25
 8002914:	430a      	orrs	r2, r1
 8002916:	4916      	ldr	r1, [pc, #88]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a13      	ldr	r2, [pc, #76]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002922:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002926:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7fe fa60 	bl	8000dec <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800292e:	e009      	b.n	8002944 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002930:	f7fe fa5c 	bl	8000dec <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d902      	bls.n	8002944 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	73fb      	strb	r3, [r7, #15]
          break;
 8002942:	e005      	b.n	8002950 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002944:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ef      	beq.n	8002930 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	4904      	ldr	r1, [pc, #16]	; (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002960:	4313      	orrs	r3, r2
 8002962:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000

08002974 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002982:	4b6a      	ldr	r3, [pc, #424]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d018      	beq.n	80029c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800298e:	4b67      	ldr	r3, [pc, #412]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0203 	and.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d10d      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
       ||
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029a6:	4b61      	ldr	r3, [pc, #388]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
       ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d047      	beq.n	8002a4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e044      	b.n	8002a4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d018      	beq.n	80029fa <RCCEx_PLLSAI2_Config+0x86>
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d825      	bhi.n	8002a18 <RCCEx_PLLSAI2_Config+0xa4>
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d002      	beq.n	80029d6 <RCCEx_PLLSAI2_Config+0x62>
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d009      	beq.n	80029e8 <RCCEx_PLLSAI2_Config+0x74>
 80029d4:	e020      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029d6:	4b55      	ldr	r3, [pc, #340]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11d      	bne.n	8002a1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e6:	e01a      	b.n	8002a1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e013      	b.n	8002a22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029fa:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10f      	bne.n	8002a26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a06:	4b49      	ldr	r3, [pc, #292]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a16:	e006      	b.n	8002a26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e004      	b.n	8002a28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	430b      	orrs	r3, r1
 8002a44:	4939      	ldr	r1, [pc, #228]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d167      	bne.n	8002b20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a50:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a35      	ldr	r2, [pc, #212]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5c:	f7fe f9c6 	bl	8000dec <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a62:	e009      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a64:	f7fe f9c2 	bl	8000dec <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d902      	bls.n	8002a78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	73fb      	strb	r3, [r7, #15]
        break;
 8002a76:	e005      	b.n	8002a84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a78:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ef      	bne.n	8002a64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d14a      	bne.n	8002b20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d111      	bne.n	8002ab4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a90:	4b26      	ldr	r3, [pc, #152]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6892      	ldr	r2, [r2, #8]
 8002aa0:	0211      	lsls	r1, r2, #8
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68d2      	ldr	r2, [r2, #12]
 8002aa6:	0912      	lsrs	r2, r2, #4
 8002aa8:	0452      	lsls	r2, r2, #17
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	491f      	ldr	r1, [pc, #124]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	614b      	str	r3, [r1, #20]
 8002ab2:	e011      	b.n	8002ad8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002abc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6892      	ldr	r2, [r2, #8]
 8002ac4:	0211      	lsls	r1, r2, #8
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6912      	ldr	r2, [r2, #16]
 8002aca:	0852      	lsrs	r2, r2, #1
 8002acc:	3a01      	subs	r2, #1
 8002ace:	0652      	lsls	r2, r2, #25
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	4916      	ldr	r1, [pc, #88]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ad8:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a13      	ldr	r2, [pc, #76]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe f982 	bl	8000dec <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aea:	e009      	b.n	8002b00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aec:	f7fe f97e 	bl	8000dec <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d902      	bls.n	8002b00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	73fb      	strb	r3, [r7, #15]
          break;
 8002afe:	e005      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ef      	beq.n	8002aec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	4904      	ldr	r1, [pc, #16]	; (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e040      	b.n	8002bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fd ff7e 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2224      	movs	r2, #36	; 0x24
 8002b5c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fec0 	bl	80038fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fc05 	bl	800338c <UART_SetConfig>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e01b      	b.n	8002bc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 ff3f 	bl	8003a40 <UART_CheckIdleState>
 8002bc2:	4603      	mov	r3, r0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d178      	bne.n	8002cd6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_UART_Transmit+0x24>
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e071      	b.n	8002cd8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c02:	f7fe f8f3 	bl	8000dec <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c20:	d108      	bne.n	8002c34 <HAL_UART_Transmit+0x68>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d104      	bne.n	8002c34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	e003      	b.n	8002c3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c3c:	e030      	b.n	8002ca0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2180      	movs	r1, #128	; 0x80
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 ffa1 	bl	8003b90 <UART_WaitOnFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e03c      	b.n	8002cd8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	881a      	ldrh	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c70:	b292      	uxth	r2, r2
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	3302      	adds	r3, #2
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	e008      	b.n	8002c8e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	b292      	uxth	r2, r2
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1c8      	bne.n	8002c3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2140      	movs	r1, #64	; 0x40
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 ff6a 	bl	8003b90 <UART_WaitOnFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e005      	b.n	8002cd8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e000      	b.n	8002cd8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	4613      	mov	r3, r2
 8002cec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d137      	bne.n	8002d68 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_UART_Receive_IT+0x24>
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e030      	b.n	8002d6a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <HAL_UART_Receive_IT+0x94>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d01f      	beq.n	8002d58 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d018      	beq.n	8002d58 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	e853 3f00 	ldrex	r3, [r3]
 8002d32:	613b      	str	r3, [r7, #16]
   return(result);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	623b      	str	r3, [r7, #32]
 8002d46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	69f9      	ldr	r1, [r7, #28]
 8002d4a:	6a3a      	ldr	r2, [r7, #32]
 8002d4c:	e841 2300 	strex	r3, r2, [r1]
 8002d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e6      	bne.n	8002d26 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 ff7e 	bl	8003c60 <UART_Start_Receive_IT>
 8002d64:	4603      	mov	r3, r0
 8002d66:	e000      	b.n	8002d6a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d68:	2302      	movs	r3, #2
  }
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40008000 	.word	0x40008000

08002d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b0ba      	sub	sp, #232	; 0xe8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002da2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002da6:	4013      	ands	r3, r2
 8002da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d115      	bne.n	8002de0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00f      	beq.n	8002de0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 82ae 	beq.w	8003332 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
      }
      return;
 8002dde:	e2a8      	b.n	8003332 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8117 	beq.w	8003018 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002df6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002dfa:	4b85      	ldr	r3, [pc, #532]	; (8003010 <HAL_UART_IRQHandler+0x298>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 810a 	beq.w	8003018 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d011      	beq.n	8002e34 <HAL_UART_IRQHandler+0xbc>
 8002e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2201      	movs	r2, #1
 8002e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2a:	f043 0201 	orr.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d011      	beq.n	8002e64 <HAL_UART_IRQHandler+0xec>
 8002e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2202      	movs	r2, #2
 8002e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d011      	beq.n	8002e94 <HAL_UART_IRQHandler+0x11c>
 8002e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2204      	movs	r2, #4
 8002e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8a:	f043 0202 	orr.w	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d017      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec6:	f043 0208 	orr.w	r2, r3, #8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d012      	beq.n	8002f02 <HAL_UART_IRQHandler+0x18a>
 8002edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00c      	beq.n	8002f02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8214 	beq.w	8003336 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b40      	cmp	r3, #64	; 0x40
 8002f4c:	d005      	beq.n	8002f5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d04f      	beq.n	8002ffa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 ff46 	bl	8003dec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d141      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3308      	adds	r3, #8
 8002f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3308      	adds	r3, #8
 8002f96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1d9      	bne.n	8002f6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d013      	beq.n	8002fea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	4a13      	ldr	r2, [pc, #76]	; (8003014 <HAL_UART_IRQHandler+0x29c>)
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe f88b 	bl	80010ea <HAL_DMA_Abort_IT>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d017      	beq.n	800300a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	e00f      	b.n	800300a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f9b8 	bl	8003360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	e00b      	b.n	800300a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f9b4 	bl	8003360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff8:	e007      	b.n	800300a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f9b0 	bl	8003360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003008:	e195      	b.n	8003336 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300a:	bf00      	nop
    return;
 800300c:	e193      	b.n	8003336 <HAL_UART_IRQHandler+0x5be>
 800300e:	bf00      	nop
 8003010:	04000120 	.word	0x04000120
 8003014:	08003eb5 	.word	0x08003eb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301c:	2b01      	cmp	r3, #1
 800301e:	f040 814e 	bne.w	80032be <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8147 	beq.w	80032be <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8140 	beq.w	80032be <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2210      	movs	r2, #16
 8003044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	f040 80b8 	bne.w	80031c6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003062:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8167 	beq.w	800333a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003076:	429a      	cmp	r2, r3
 8003078:	f080 815f 	bcs.w	800333a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003082:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 8086 	bne.w	80031a4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1da      	bne.n	8003098 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3308      	adds	r3, #8
 80030e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3308      	adds	r3, #8
 8003102:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003106:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800310a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800310e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003112:	e841 2300 	strex	r3, r2, [r1]
 8003116:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1e1      	bne.n	80030e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3308      	adds	r3, #8
 8003124:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800312e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3308      	adds	r3, #8
 800313e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003142:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003144:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003146:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003148:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800314a:	e841 2300 	strex	r3, r2, [r1]
 800314e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e3      	bne.n	800311e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003174:	f023 0310 	bic.w	r3, r3, #16
 8003178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003186:	65bb      	str	r3, [r7, #88]	; 0x58
 8003188:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800318c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e4      	bne.n	8003164 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd ff65 	bl	800106e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	4619      	mov	r1, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8d8 	bl	8003374 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031c4:	e0b9      	b.n	800333a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80ab 	beq.w	800333e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80031e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80a6 	beq.w	800333e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fa:	e853 3f00 	ldrex	r3, [r3]
 80031fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003214:	647b      	str	r3, [r7, #68]	; 0x44
 8003216:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800321a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800321c:	e841 2300 	strex	r3, r2, [r1]
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e4      	bne.n	80031f2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3308      	adds	r3, #8
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	623b      	str	r3, [r7, #32]
   return(result);
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3308      	adds	r3, #8
 8003248:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800324c:	633a      	str	r2, [r7, #48]	; 0x30
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e3      	bne.n	8003228 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	60fb      	str	r3, [r7, #12]
   return(result);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f023 0310 	bic.w	r3, r3, #16
 8003288:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	69b9      	ldr	r1, [r7, #24]
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	617b      	str	r3, [r7, #20]
   return(result);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e4      	bne.n	8003274 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2202      	movs	r2, #2
 80032ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032b4:	4619      	mov	r1, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f85c 	bl	8003374 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032bc:	e03f      	b.n	800333e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00e      	beq.n	80032e8 <HAL_UART_IRQHandler+0x570>
 80032ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 ffe3 	bl	80042ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032e6:	e02d      	b.n	8003344 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00e      	beq.n	8003312 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01c      	beq.n	8003342 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
    }
    return;
 8003310:	e017      	b.n	8003342 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d012      	beq.n	8003344 <HAL_UART_IRQHandler+0x5cc>
 800331e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00c      	beq.n	8003344 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fdd8 	bl	8003ee0 <UART_EndTransmit_IT>
    return;
 8003330:	e008      	b.n	8003344 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003332:	bf00      	nop
 8003334:	e006      	b.n	8003344 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003336:	bf00      	nop
 8003338:	e004      	b.n	8003344 <HAL_UART_IRQHandler+0x5cc>
      return;
 800333a:	bf00      	nop
 800333c:	e002      	b.n	8003344 <HAL_UART_IRQHandler+0x5cc>
      return;
 800333e:	bf00      	nop
 8003340:	e000      	b.n	8003344 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003342:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003344:	37e8      	adds	r7, #232	; 0xe8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop

0800334c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b08a      	sub	sp, #40	; 0x28
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4ba4      	ldr	r3, [pc, #656]	; (800364c <UART_SetConfig+0x2c0>)
 80033bc:	4013      	ands	r3, r2
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a99      	ldr	r2, [pc, #612]	; (8003650 <UART_SetConfig+0x2c4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	4313      	orrs	r3, r2
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003408:	430a      	orrs	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a90      	ldr	r2, [pc, #576]	; (8003654 <UART_SetConfig+0x2c8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d126      	bne.n	8003464 <UART_SetConfig+0xd8>
 8003416:	4b90      	ldr	r3, [pc, #576]	; (8003658 <UART_SetConfig+0x2cc>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	2b03      	cmp	r3, #3
 8003422:	d81b      	bhi.n	800345c <UART_SetConfig+0xd0>
 8003424:	a201      	add	r2, pc, #4	; (adr r2, 800342c <UART_SetConfig+0xa0>)
 8003426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342a:	bf00      	nop
 800342c:	0800343d 	.word	0x0800343d
 8003430:	0800344d 	.word	0x0800344d
 8003434:	08003445 	.word	0x08003445
 8003438:	08003455 	.word	0x08003455
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003442:	e116      	b.n	8003672 <UART_SetConfig+0x2e6>
 8003444:	2302      	movs	r3, #2
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344a:	e112      	b.n	8003672 <UART_SetConfig+0x2e6>
 800344c:	2304      	movs	r3, #4
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003452:	e10e      	b.n	8003672 <UART_SetConfig+0x2e6>
 8003454:	2308      	movs	r3, #8
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e10a      	b.n	8003672 <UART_SetConfig+0x2e6>
 800345c:	2310      	movs	r3, #16
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e106      	b.n	8003672 <UART_SetConfig+0x2e6>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a7c      	ldr	r2, [pc, #496]	; (800365c <UART_SetConfig+0x2d0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d138      	bne.n	80034e0 <UART_SetConfig+0x154>
 800346e:	4b7a      	ldr	r3, [pc, #488]	; (8003658 <UART_SetConfig+0x2cc>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b0c      	cmp	r3, #12
 800347a:	d82d      	bhi.n	80034d8 <UART_SetConfig+0x14c>
 800347c:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <UART_SetConfig+0xf8>)
 800347e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003482:	bf00      	nop
 8003484:	080034b9 	.word	0x080034b9
 8003488:	080034d9 	.word	0x080034d9
 800348c:	080034d9 	.word	0x080034d9
 8003490:	080034d9 	.word	0x080034d9
 8003494:	080034c9 	.word	0x080034c9
 8003498:	080034d9 	.word	0x080034d9
 800349c:	080034d9 	.word	0x080034d9
 80034a0:	080034d9 	.word	0x080034d9
 80034a4:	080034c1 	.word	0x080034c1
 80034a8:	080034d9 	.word	0x080034d9
 80034ac:	080034d9 	.word	0x080034d9
 80034b0:	080034d9 	.word	0x080034d9
 80034b4:	080034d1 	.word	0x080034d1
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034be:	e0d8      	b.n	8003672 <UART_SetConfig+0x2e6>
 80034c0:	2302      	movs	r3, #2
 80034c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c6:	e0d4      	b.n	8003672 <UART_SetConfig+0x2e6>
 80034c8:	2304      	movs	r3, #4
 80034ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ce:	e0d0      	b.n	8003672 <UART_SetConfig+0x2e6>
 80034d0:	2308      	movs	r3, #8
 80034d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d6:	e0cc      	b.n	8003672 <UART_SetConfig+0x2e6>
 80034d8:	2310      	movs	r3, #16
 80034da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034de:	e0c8      	b.n	8003672 <UART_SetConfig+0x2e6>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a5e      	ldr	r2, [pc, #376]	; (8003660 <UART_SetConfig+0x2d4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d125      	bne.n	8003536 <UART_SetConfig+0x1aa>
 80034ea:	4b5b      	ldr	r3, [pc, #364]	; (8003658 <UART_SetConfig+0x2cc>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034f4:	2b30      	cmp	r3, #48	; 0x30
 80034f6:	d016      	beq.n	8003526 <UART_SetConfig+0x19a>
 80034f8:	2b30      	cmp	r3, #48	; 0x30
 80034fa:	d818      	bhi.n	800352e <UART_SetConfig+0x1a2>
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d00a      	beq.n	8003516 <UART_SetConfig+0x18a>
 8003500:	2b20      	cmp	r3, #32
 8003502:	d814      	bhi.n	800352e <UART_SetConfig+0x1a2>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <UART_SetConfig+0x182>
 8003508:	2b10      	cmp	r3, #16
 800350a:	d008      	beq.n	800351e <UART_SetConfig+0x192>
 800350c:	e00f      	b.n	800352e <UART_SetConfig+0x1a2>
 800350e:	2300      	movs	r3, #0
 8003510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003514:	e0ad      	b.n	8003672 <UART_SetConfig+0x2e6>
 8003516:	2302      	movs	r3, #2
 8003518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351c:	e0a9      	b.n	8003672 <UART_SetConfig+0x2e6>
 800351e:	2304      	movs	r3, #4
 8003520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003524:	e0a5      	b.n	8003672 <UART_SetConfig+0x2e6>
 8003526:	2308      	movs	r3, #8
 8003528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352c:	e0a1      	b.n	8003672 <UART_SetConfig+0x2e6>
 800352e:	2310      	movs	r3, #16
 8003530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003534:	e09d      	b.n	8003672 <UART_SetConfig+0x2e6>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a4a      	ldr	r2, [pc, #296]	; (8003664 <UART_SetConfig+0x2d8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d125      	bne.n	800358c <UART_SetConfig+0x200>
 8003540:	4b45      	ldr	r3, [pc, #276]	; (8003658 <UART_SetConfig+0x2cc>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800354a:	2bc0      	cmp	r3, #192	; 0xc0
 800354c:	d016      	beq.n	800357c <UART_SetConfig+0x1f0>
 800354e:	2bc0      	cmp	r3, #192	; 0xc0
 8003550:	d818      	bhi.n	8003584 <UART_SetConfig+0x1f8>
 8003552:	2b80      	cmp	r3, #128	; 0x80
 8003554:	d00a      	beq.n	800356c <UART_SetConfig+0x1e0>
 8003556:	2b80      	cmp	r3, #128	; 0x80
 8003558:	d814      	bhi.n	8003584 <UART_SetConfig+0x1f8>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <UART_SetConfig+0x1d8>
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d008      	beq.n	8003574 <UART_SetConfig+0x1e8>
 8003562:	e00f      	b.n	8003584 <UART_SetConfig+0x1f8>
 8003564:	2300      	movs	r3, #0
 8003566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356a:	e082      	b.n	8003672 <UART_SetConfig+0x2e6>
 800356c:	2302      	movs	r3, #2
 800356e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003572:	e07e      	b.n	8003672 <UART_SetConfig+0x2e6>
 8003574:	2304      	movs	r3, #4
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357a:	e07a      	b.n	8003672 <UART_SetConfig+0x2e6>
 800357c:	2308      	movs	r3, #8
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e076      	b.n	8003672 <UART_SetConfig+0x2e6>
 8003584:	2310      	movs	r3, #16
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e072      	b.n	8003672 <UART_SetConfig+0x2e6>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a35      	ldr	r2, [pc, #212]	; (8003668 <UART_SetConfig+0x2dc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d12a      	bne.n	80035ec <UART_SetConfig+0x260>
 8003596:	4b30      	ldr	r3, [pc, #192]	; (8003658 <UART_SetConfig+0x2cc>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a4:	d01a      	beq.n	80035dc <UART_SetConfig+0x250>
 80035a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035aa:	d81b      	bhi.n	80035e4 <UART_SetConfig+0x258>
 80035ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b0:	d00c      	beq.n	80035cc <UART_SetConfig+0x240>
 80035b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b6:	d815      	bhi.n	80035e4 <UART_SetConfig+0x258>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <UART_SetConfig+0x238>
 80035bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c0:	d008      	beq.n	80035d4 <UART_SetConfig+0x248>
 80035c2:	e00f      	b.n	80035e4 <UART_SetConfig+0x258>
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ca:	e052      	b.n	8003672 <UART_SetConfig+0x2e6>
 80035cc:	2302      	movs	r3, #2
 80035ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d2:	e04e      	b.n	8003672 <UART_SetConfig+0x2e6>
 80035d4:	2304      	movs	r3, #4
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035da:	e04a      	b.n	8003672 <UART_SetConfig+0x2e6>
 80035dc:	2308      	movs	r3, #8
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e2:	e046      	b.n	8003672 <UART_SetConfig+0x2e6>
 80035e4:	2310      	movs	r3, #16
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ea:	e042      	b.n	8003672 <UART_SetConfig+0x2e6>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a17      	ldr	r2, [pc, #92]	; (8003650 <UART_SetConfig+0x2c4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d13a      	bne.n	800366c <UART_SetConfig+0x2e0>
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <UART_SetConfig+0x2cc>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003600:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003604:	d01a      	beq.n	800363c <UART_SetConfig+0x2b0>
 8003606:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800360a:	d81b      	bhi.n	8003644 <UART_SetConfig+0x2b8>
 800360c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003610:	d00c      	beq.n	800362c <UART_SetConfig+0x2a0>
 8003612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003616:	d815      	bhi.n	8003644 <UART_SetConfig+0x2b8>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <UART_SetConfig+0x298>
 800361c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003620:	d008      	beq.n	8003634 <UART_SetConfig+0x2a8>
 8003622:	e00f      	b.n	8003644 <UART_SetConfig+0x2b8>
 8003624:	2300      	movs	r3, #0
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	e022      	b.n	8003672 <UART_SetConfig+0x2e6>
 800362c:	2302      	movs	r3, #2
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003632:	e01e      	b.n	8003672 <UART_SetConfig+0x2e6>
 8003634:	2304      	movs	r3, #4
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363a:	e01a      	b.n	8003672 <UART_SetConfig+0x2e6>
 800363c:	2308      	movs	r3, #8
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003642:	e016      	b.n	8003672 <UART_SetConfig+0x2e6>
 8003644:	2310      	movs	r3, #16
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800364a:	e012      	b.n	8003672 <UART_SetConfig+0x2e6>
 800364c:	efff69f3 	.word	0xefff69f3
 8003650:	40008000 	.word	0x40008000
 8003654:	40013800 	.word	0x40013800
 8003658:	40021000 	.word	0x40021000
 800365c:	40004400 	.word	0x40004400
 8003660:	40004800 	.word	0x40004800
 8003664:	40004c00 	.word	0x40004c00
 8003668:	40005000 	.word	0x40005000
 800366c:	2310      	movs	r3, #16
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a9f      	ldr	r2, [pc, #636]	; (80038f4 <UART_SetConfig+0x568>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d17a      	bne.n	8003772 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800367c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003680:	2b08      	cmp	r3, #8
 8003682:	d824      	bhi.n	80036ce <UART_SetConfig+0x342>
 8003684:	a201      	add	r2, pc, #4	; (adr r2, 800368c <UART_SetConfig+0x300>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	080036b1 	.word	0x080036b1
 8003690:	080036cf 	.word	0x080036cf
 8003694:	080036b9 	.word	0x080036b9
 8003698:	080036cf 	.word	0x080036cf
 800369c:	080036bf 	.word	0x080036bf
 80036a0:	080036cf 	.word	0x080036cf
 80036a4:	080036cf 	.word	0x080036cf
 80036a8:	080036cf 	.word	0x080036cf
 80036ac:	080036c7 	.word	0x080036c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b0:	f7fe fcf6 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 80036b4:	61f8      	str	r0, [r7, #28]
        break;
 80036b6:	e010      	b.n	80036da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036b8:	4b8f      	ldr	r3, [pc, #572]	; (80038f8 <UART_SetConfig+0x56c>)
 80036ba:	61fb      	str	r3, [r7, #28]
        break;
 80036bc:	e00d      	b.n	80036da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036be:	f7fe fc57 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 80036c2:	61f8      	str	r0, [r7, #28]
        break;
 80036c4:	e009      	b.n	80036da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ca:	61fb      	str	r3, [r7, #28]
        break;
 80036cc:	e005      	b.n	80036da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80fb 	beq.w	80038d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d305      	bcc.n	80036fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d903      	bls.n	8003706 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003704:	e0e8      	b.n	80038d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	2200      	movs	r2, #0
 800370a:	461c      	mov	r4, r3
 800370c:	4615      	mov	r5, r2
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	022b      	lsls	r3, r5, #8
 8003718:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800371c:	0222      	lsls	r2, r4, #8
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	6849      	ldr	r1, [r1, #4]
 8003722:	0849      	lsrs	r1, r1, #1
 8003724:	2000      	movs	r0, #0
 8003726:	4688      	mov	r8, r1
 8003728:	4681      	mov	r9, r0
 800372a:	eb12 0a08 	adds.w	sl, r2, r8
 800372e:	eb43 0b09 	adc.w	fp, r3, r9
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003740:	4650      	mov	r0, sl
 8003742:	4659      	mov	r1, fp
 8003744:	f7fc fd94 	bl	8000270 <__aeabi_uldivmod>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4613      	mov	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003756:	d308      	bcc.n	800376a <UART_SetConfig+0x3de>
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375e:	d204      	bcs.n	800376a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	e0b6      	b.n	80038d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003770:	e0b2      	b.n	80038d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377a:	d15e      	bne.n	800383a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800377c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003780:	2b08      	cmp	r3, #8
 8003782:	d828      	bhi.n	80037d6 <UART_SetConfig+0x44a>
 8003784:	a201      	add	r2, pc, #4	; (adr r2, 800378c <UART_SetConfig+0x400>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	080037b1 	.word	0x080037b1
 8003790:	080037b9 	.word	0x080037b9
 8003794:	080037c1 	.word	0x080037c1
 8003798:	080037d7 	.word	0x080037d7
 800379c:	080037c7 	.word	0x080037c7
 80037a0:	080037d7 	.word	0x080037d7
 80037a4:	080037d7 	.word	0x080037d7
 80037a8:	080037d7 	.word	0x080037d7
 80037ac:	080037cf 	.word	0x080037cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b0:	f7fe fc76 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 80037b4:	61f8      	str	r0, [r7, #28]
        break;
 80037b6:	e014      	b.n	80037e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037b8:	f7fe fc88 	bl	80020cc <HAL_RCC_GetPCLK2Freq>
 80037bc:	61f8      	str	r0, [r7, #28]
        break;
 80037be:	e010      	b.n	80037e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c0:	4b4d      	ldr	r3, [pc, #308]	; (80038f8 <UART_SetConfig+0x56c>)
 80037c2:	61fb      	str	r3, [r7, #28]
        break;
 80037c4:	e00d      	b.n	80037e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037c6:	f7fe fbd3 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 80037ca:	61f8      	str	r0, [r7, #28]
        break;
 80037cc:	e009      	b.n	80037e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d2:	61fb      	str	r3, [r7, #28]
        break;
 80037d4:	e005      	b.n	80037e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d077      	beq.n	80038d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005a      	lsls	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	441a      	add	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b0f      	cmp	r3, #15
 8003802:	d916      	bls.n	8003832 <UART_SetConfig+0x4a6>
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380a:	d212      	bcs.n	8003832 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	b29b      	uxth	r3, r3
 8003810:	f023 030f 	bic.w	r3, r3, #15
 8003814:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	b29b      	uxth	r3, r3
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	b29a      	uxth	r2, r3
 8003822:	8afb      	ldrh	r3, [r7, #22]
 8003824:	4313      	orrs	r3, r2
 8003826:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	8afa      	ldrh	r2, [r7, #22]
 800382e:	60da      	str	r2, [r3, #12]
 8003830:	e052      	b.n	80038d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003838:	e04e      	b.n	80038d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800383a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800383e:	2b08      	cmp	r3, #8
 8003840:	d827      	bhi.n	8003892 <UART_SetConfig+0x506>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <UART_SetConfig+0x4bc>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	0800386d 	.word	0x0800386d
 800384c:	08003875 	.word	0x08003875
 8003850:	0800387d 	.word	0x0800387d
 8003854:	08003893 	.word	0x08003893
 8003858:	08003883 	.word	0x08003883
 800385c:	08003893 	.word	0x08003893
 8003860:	08003893 	.word	0x08003893
 8003864:	08003893 	.word	0x08003893
 8003868:	0800388b 	.word	0x0800388b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800386c:	f7fe fc18 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8003870:	61f8      	str	r0, [r7, #28]
        break;
 8003872:	e014      	b.n	800389e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003874:	f7fe fc2a 	bl	80020cc <HAL_RCC_GetPCLK2Freq>
 8003878:	61f8      	str	r0, [r7, #28]
        break;
 800387a:	e010      	b.n	800389e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800387c:	4b1e      	ldr	r3, [pc, #120]	; (80038f8 <UART_SetConfig+0x56c>)
 800387e:	61fb      	str	r3, [r7, #28]
        break;
 8003880:	e00d      	b.n	800389e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003882:	f7fe fb75 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8003886:	61f8      	str	r0, [r7, #28]
        break;
 8003888:	e009      	b.n	800389e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800388a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800388e:	61fb      	str	r3, [r7, #28]
        break;
 8003890:	e005      	b.n	800389e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800389c:	bf00      	nop
    }

    if (pclk != 0U)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d019      	beq.n	80038d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	085a      	lsrs	r2, r3, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	441a      	add	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	d909      	bls.n	80038d2 <UART_SetConfig+0x546>
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c4:	d205      	bcs.n	80038d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60da      	str	r2, [r3, #12]
 80038d0:	e002      	b.n	80038d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3728      	adds	r7, #40	; 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f2:	bf00      	nop
 80038f4:	40008000 	.word	0x40008000
 80038f8:	00f42400 	.word	0x00f42400

080038fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01a      	beq.n	8003a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fa:	d10a      	bne.n	8003a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]
  }
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b098      	sub	sp, #96	; 0x60
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a50:	f7fd f9cc 	bl	8000dec <HAL_GetTick>
 8003a54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d12e      	bne.n	8003ac2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f88c 	bl	8003b90 <UART_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d021      	beq.n	8003ac2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a92:	653b      	str	r3, [r7, #80]	; 0x50
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e6      	bne.n	8003a7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e062      	b.n	8003b88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d149      	bne.n	8003b64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f856 	bl	8003b90 <UART_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d03c      	beq.n	8003b64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	623b      	str	r3, [r7, #32]
   return(result);
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b08:	633b      	str	r3, [r7, #48]	; 0x30
 8003b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e6      	bne.n	8003aea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3308      	adds	r3, #8
 8003b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3308      	adds	r3, #8
 8003b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b3c:	61fa      	str	r2, [r7, #28]
 8003b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	69b9      	ldr	r1, [r7, #24]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	617b      	str	r3, [r7, #20]
   return(result);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e5      	bne.n	8003b1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e011      	b.n	8003b88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3758      	adds	r7, #88	; 0x58
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba0:	e049      	b.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d045      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003baa:	f7fd f91f 	bl	8000dec <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d302      	bcc.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e048      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d031      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d110      	bne.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2208      	movs	r2, #8
 8003be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f8ff 	bl	8003dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e029      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c10:	d111      	bne.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f8e5 	bl	8003dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e00f      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d0a6      	beq.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b097      	sub	sp, #92	; 0x5c
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	88fa      	ldrh	r2, [r7, #6]
 8003c78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c92:	d10e      	bne.n	8003cb2 <UART_Start_Receive_IT+0x52>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <UART_Start_Receive_IT+0x48>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ca2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ca6:	e02d      	b.n	8003d04 <UART_Start_Receive_IT+0xa4>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	22ff      	movs	r2, #255	; 0xff
 8003cac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cb0:	e028      	b.n	8003d04 <UART_Start_Receive_IT+0xa4>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10d      	bne.n	8003cd6 <UART_Start_Receive_IT+0x76>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <UART_Start_Receive_IT+0x6c>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	22ff      	movs	r2, #255	; 0xff
 8003cc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cca:	e01b      	b.n	8003d04 <UART_Start_Receive_IT+0xa4>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	227f      	movs	r2, #127	; 0x7f
 8003cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cd4:	e016      	b.n	8003d04 <UART_Start_Receive_IT+0xa4>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cde:	d10d      	bne.n	8003cfc <UART_Start_Receive_IT+0x9c>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <UART_Start_Receive_IT+0x92>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	227f      	movs	r2, #127	; 0x7f
 8003cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cf0:	e008      	b.n	8003d04 <UART_Start_Receive_IT+0xa4>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	223f      	movs	r2, #63	; 0x3f
 8003cf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cfa:	e003      	b.n	8003d04 <UART_Start_Receive_IT+0xa4>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2222      	movs	r2, #34	; 0x22
 8003d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3308      	adds	r3, #8
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3308      	adds	r3, #8
 8003d32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d34:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e5      	bne.n	8003d14 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d107      	bne.n	8003d62 <UART_Start_Receive_IT+0x102>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4a21      	ldr	r2, [pc, #132]	; (8003de4 <UART_Start_Receive_IT+0x184>)
 8003d5e:	669a      	str	r2, [r3, #104]	; 0x68
 8003d60:	e002      	b.n	8003d68 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a20      	ldr	r2, [pc, #128]	; (8003de8 <UART_Start_Receive_IT+0x188>)
 8003d66:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d019      	beq.n	8003da4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003d84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d90:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e6      	bne.n	8003d70 <UART_Start_Receive_IT+0x110>
 8003da2:	e018      	b.n	8003dd6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	613b      	str	r3, [r7, #16]
   return(result);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f043 0320 	orr.w	r3, r3, #32
 8003db8:	653b      	str	r3, [r7, #80]	; 0x50
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	69f9      	ldr	r1, [r7, #28]
 8003dc8:	6a3a      	ldr	r2, [r7, #32]
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e6      	bne.n	8003da4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	375c      	adds	r7, #92	; 0x5c
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	080040f1 	.word	0x080040f1
 8003de8:	08003f35 	.word	0x08003f35

08003dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b095      	sub	sp, #84	; 0x54
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e12:	643b      	str	r3, [r7, #64]	; 0x40
 8003e14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e6      	bne.n	8003df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3308      	adds	r3, #8
 8003e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e5      	bne.n	8003e26 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d118      	bne.n	8003e94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f023 0310 	bic.w	r3, r3, #16
 8003e76:	647b      	str	r3, [r7, #68]	; 0x44
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6979      	ldr	r1, [r7, #20]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e6      	bne.n	8003e62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ea8:	bf00      	nop
 8003eaa:	3754      	adds	r7, #84	; 0x54
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff fa44 	bl	8003360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6979      	ldr	r1, [r7, #20]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	613b      	str	r3, [r7, #16]
   return(result);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e6      	bne.n	8003ee8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fa10 	bl	800334c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f2c:	bf00      	nop
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b09c      	sub	sp, #112	; 0x70
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f42:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f4c:	2b22      	cmp	r3, #34	; 0x22
 8003f4e:	f040 80be 	bne.w	80040ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f60:	b2d9      	uxtb	r1, r3
 8003f62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 80a3 	bne.w	80040e2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fba:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e6      	bne.n	8003f9c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3308      	adds	r3, #8
 8003fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	667b      	str	r3, [r7, #100]	; 0x64
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3308      	adds	r3, #8
 8003fec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003fee:	647a      	str	r2, [r7, #68]	; 0x44
 8003ff0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e5      	bne.n	8003fce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a34      	ldr	r2, [pc, #208]	; (80040ec <UART_RxISR_8BIT+0x1b8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d01f      	beq.n	8004060 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d018      	beq.n	8004060 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	623b      	str	r3, [r7, #32]
   return(result);
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004042:	663b      	str	r3, [r7, #96]	; 0x60
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
 800404e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e6      	bne.n	800402e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004064:	2b01      	cmp	r3, #1
 8004066:	d12e      	bne.n	80040c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	60fb      	str	r3, [r7, #12]
   return(result);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0310 	bic.w	r3, r3, #16
 8004082:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	617b      	str	r3, [r7, #20]
   return(result);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d103      	bne.n	80040b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2210      	movs	r2, #16
 80040b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff f958 	bl	8003374 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040c4:	e00d      	b.n	80040e2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fc fa66 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 80040cc:	e009      	b.n	80040e2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	8b1b      	ldrh	r3, [r3, #24]
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0208 	orr.w	r2, r2, #8
 80040de:	b292      	uxth	r2, r2
 80040e0:	831a      	strh	r2, [r3, #24]
}
 80040e2:	bf00      	nop
 80040e4:	3770      	adds	r7, #112	; 0x70
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40008000 	.word	0x40008000

080040f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b09c      	sub	sp, #112	; 0x70
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004108:	2b22      	cmp	r3, #34	; 0x22
 800410a:	f040 80be 	bne.w	800428a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004114:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800411e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004122:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004126:	4013      	ands	r3, r2
 8004128:	b29a      	uxth	r2, r3
 800412a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800412c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	1c9a      	adds	r2, r3, #2
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 80a3 	bne.w	800429e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800416c:	667b      	str	r3, [r7, #100]	; 0x64
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004176:	657b      	str	r3, [r7, #84]	; 0x54
 8004178:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800417c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e6      	bne.n	8004158 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3308      	adds	r3, #8
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	663b      	str	r3, [r7, #96]	; 0x60
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041aa:	643a      	str	r2, [r7, #64]	; 0x40
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e5      	bne.n	800418a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a34      	ldr	r2, [pc, #208]	; (80042a8 <UART_RxISR_16BIT+0x1b8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01f      	beq.n	800421c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d018      	beq.n	800421c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800420a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800420e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e6      	bne.n	80041ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004220:	2b01      	cmp	r3, #1
 8004222:	d12e      	bne.n	8004282 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	60bb      	str	r3, [r7, #8]
   return(result);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f023 0310 	bic.w	r3, r3, #16
 800423e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6979      	ldr	r1, [r7, #20]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	613b      	str	r3, [r7, #16]
   return(result);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e6      	bne.n	800422a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b10      	cmp	r3, #16
 8004268:	d103      	bne.n	8004272 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2210      	movs	r2, #16
 8004270:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff f87a 	bl	8003374 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004280:	e00d      	b.n	800429e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fc f988 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8004288:	e009      	b.n	800429e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	8b1b      	ldrh	r3, [r3, #24]
 8004290:	b29a      	uxth	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0208 	orr.w	r2, r2, #8
 800429a:	b292      	uxth	r2, r2
 800429c:	831a      	strh	r2, [r3, #24]
}
 800429e:	bf00      	nop
 80042a0:	3770      	adds	r7, #112	; 0x70
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40008000 	.word	0x40008000

080042ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <std>:
 80042c0:	2300      	movs	r3, #0
 80042c2:	b510      	push	{r4, lr}
 80042c4:	4604      	mov	r4, r0
 80042c6:	e9c0 3300 	strd	r3, r3, [r0]
 80042ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042ce:	6083      	str	r3, [r0, #8]
 80042d0:	8181      	strh	r1, [r0, #12]
 80042d2:	6643      	str	r3, [r0, #100]	; 0x64
 80042d4:	81c2      	strh	r2, [r0, #14]
 80042d6:	6183      	str	r3, [r0, #24]
 80042d8:	4619      	mov	r1, r3
 80042da:	2208      	movs	r2, #8
 80042dc:	305c      	adds	r0, #92	; 0x5c
 80042de:	f000 f8f4 	bl	80044ca <memset>
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <std+0x38>)
 80042e4:	6263      	str	r3, [r4, #36]	; 0x24
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <std+0x3c>)
 80042e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <std+0x40>)
 80042ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <std+0x44>)
 80042f0:	6224      	str	r4, [r4, #32]
 80042f2:	6323      	str	r3, [r4, #48]	; 0x30
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	bf00      	nop
 80042f8:	08004445 	.word	0x08004445
 80042fc:	08004467 	.word	0x08004467
 8004300:	0800449f 	.word	0x0800449f
 8004304:	080044c3 	.word	0x080044c3

08004308 <stdio_exit_handler>:
 8004308:	4a02      	ldr	r2, [pc, #8]	; (8004314 <stdio_exit_handler+0xc>)
 800430a:	4903      	ldr	r1, [pc, #12]	; (8004318 <stdio_exit_handler+0x10>)
 800430c:	4803      	ldr	r0, [pc, #12]	; (800431c <stdio_exit_handler+0x14>)
 800430e:	f000 b869 	b.w	80043e4 <_fwalk_sglue>
 8004312:	bf00      	nop
 8004314:	2000000c 	.word	0x2000000c
 8004318:	08004e65 	.word	0x08004e65
 800431c:	20000018 	.word	0x20000018

08004320 <cleanup_stdio>:
 8004320:	6841      	ldr	r1, [r0, #4]
 8004322:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <cleanup_stdio+0x34>)
 8004324:	4299      	cmp	r1, r3
 8004326:	b510      	push	{r4, lr}
 8004328:	4604      	mov	r4, r0
 800432a:	d001      	beq.n	8004330 <cleanup_stdio+0x10>
 800432c:	f000 fd9a 	bl	8004e64 <_fflush_r>
 8004330:	68a1      	ldr	r1, [r4, #8]
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <cleanup_stdio+0x38>)
 8004334:	4299      	cmp	r1, r3
 8004336:	d002      	beq.n	800433e <cleanup_stdio+0x1e>
 8004338:	4620      	mov	r0, r4
 800433a:	f000 fd93 	bl	8004e64 <_fflush_r>
 800433e:	68e1      	ldr	r1, [r4, #12]
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <cleanup_stdio+0x3c>)
 8004342:	4299      	cmp	r1, r3
 8004344:	d004      	beq.n	8004350 <cleanup_stdio+0x30>
 8004346:	4620      	mov	r0, r4
 8004348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800434c:	f000 bd8a 	b.w	8004e64 <_fflush_r>
 8004350:	bd10      	pop	{r4, pc}
 8004352:	bf00      	nop
 8004354:	20000134 	.word	0x20000134
 8004358:	2000019c 	.word	0x2000019c
 800435c:	20000204 	.word	0x20000204

08004360 <global_stdio_init.part.0>:
 8004360:	b510      	push	{r4, lr}
 8004362:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <global_stdio_init.part.0+0x30>)
 8004364:	4c0b      	ldr	r4, [pc, #44]	; (8004394 <global_stdio_init.part.0+0x34>)
 8004366:	4a0c      	ldr	r2, [pc, #48]	; (8004398 <global_stdio_init.part.0+0x38>)
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	4620      	mov	r0, r4
 800436c:	2200      	movs	r2, #0
 800436e:	2104      	movs	r1, #4
 8004370:	f7ff ffa6 	bl	80042c0 <std>
 8004374:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004378:	2201      	movs	r2, #1
 800437a:	2109      	movs	r1, #9
 800437c:	f7ff ffa0 	bl	80042c0 <std>
 8004380:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004384:	2202      	movs	r2, #2
 8004386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800438a:	2112      	movs	r1, #18
 800438c:	f7ff bf98 	b.w	80042c0 <std>
 8004390:	2000026c 	.word	0x2000026c
 8004394:	20000134 	.word	0x20000134
 8004398:	08004309 	.word	0x08004309

0800439c <__sfp_lock_acquire>:
 800439c:	4801      	ldr	r0, [pc, #4]	; (80043a4 <__sfp_lock_acquire+0x8>)
 800439e:	f000 b90d 	b.w	80045bc <__retarget_lock_acquire_recursive>
 80043a2:	bf00      	nop
 80043a4:	20000275 	.word	0x20000275

080043a8 <__sfp_lock_release>:
 80043a8:	4801      	ldr	r0, [pc, #4]	; (80043b0 <__sfp_lock_release+0x8>)
 80043aa:	f000 b908 	b.w	80045be <__retarget_lock_release_recursive>
 80043ae:	bf00      	nop
 80043b0:	20000275 	.word	0x20000275

080043b4 <__sinit>:
 80043b4:	b510      	push	{r4, lr}
 80043b6:	4604      	mov	r4, r0
 80043b8:	f7ff fff0 	bl	800439c <__sfp_lock_acquire>
 80043bc:	6a23      	ldr	r3, [r4, #32]
 80043be:	b11b      	cbz	r3, 80043c8 <__sinit+0x14>
 80043c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c4:	f7ff bff0 	b.w	80043a8 <__sfp_lock_release>
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <__sinit+0x28>)
 80043ca:	6223      	str	r3, [r4, #32]
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <__sinit+0x2c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f5      	bne.n	80043c0 <__sinit+0xc>
 80043d4:	f7ff ffc4 	bl	8004360 <global_stdio_init.part.0>
 80043d8:	e7f2      	b.n	80043c0 <__sinit+0xc>
 80043da:	bf00      	nop
 80043dc:	08004321 	.word	0x08004321
 80043e0:	2000026c 	.word	0x2000026c

080043e4 <_fwalk_sglue>:
 80043e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e8:	4607      	mov	r7, r0
 80043ea:	4688      	mov	r8, r1
 80043ec:	4614      	mov	r4, r2
 80043ee:	2600      	movs	r6, #0
 80043f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043f4:	f1b9 0901 	subs.w	r9, r9, #1
 80043f8:	d505      	bpl.n	8004406 <_fwalk_sglue+0x22>
 80043fa:	6824      	ldr	r4, [r4, #0]
 80043fc:	2c00      	cmp	r4, #0
 80043fe:	d1f7      	bne.n	80043f0 <_fwalk_sglue+0xc>
 8004400:	4630      	mov	r0, r6
 8004402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d907      	bls.n	800441c <_fwalk_sglue+0x38>
 800440c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004410:	3301      	adds	r3, #1
 8004412:	d003      	beq.n	800441c <_fwalk_sglue+0x38>
 8004414:	4629      	mov	r1, r5
 8004416:	4638      	mov	r0, r7
 8004418:	47c0      	blx	r8
 800441a:	4306      	orrs	r6, r0
 800441c:	3568      	adds	r5, #104	; 0x68
 800441e:	e7e9      	b.n	80043f4 <_fwalk_sglue+0x10>

08004420 <iprintf>:
 8004420:	b40f      	push	{r0, r1, r2, r3}
 8004422:	b507      	push	{r0, r1, r2, lr}
 8004424:	4906      	ldr	r1, [pc, #24]	; (8004440 <iprintf+0x20>)
 8004426:	ab04      	add	r3, sp, #16
 8004428:	6808      	ldr	r0, [r1, #0]
 800442a:	f853 2b04 	ldr.w	r2, [r3], #4
 800442e:	6881      	ldr	r1, [r0, #8]
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	f000 f9e7 	bl	8004804 <_vfiprintf_r>
 8004436:	b003      	add	sp, #12
 8004438:	f85d eb04 	ldr.w	lr, [sp], #4
 800443c:	b004      	add	sp, #16
 800443e:	4770      	bx	lr
 8004440:	20000064 	.word	0x20000064

08004444 <__sread>:
 8004444:	b510      	push	{r4, lr}
 8004446:	460c      	mov	r4, r1
 8004448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800444c:	f000 f868 	bl	8004520 <_read_r>
 8004450:	2800      	cmp	r0, #0
 8004452:	bfab      	itete	ge
 8004454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004456:	89a3      	ldrhlt	r3, [r4, #12]
 8004458:	181b      	addge	r3, r3, r0
 800445a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800445e:	bfac      	ite	ge
 8004460:	6563      	strge	r3, [r4, #84]	; 0x54
 8004462:	81a3      	strhlt	r3, [r4, #12]
 8004464:	bd10      	pop	{r4, pc}

08004466 <__swrite>:
 8004466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800446a:	461f      	mov	r7, r3
 800446c:	898b      	ldrh	r3, [r1, #12]
 800446e:	05db      	lsls	r3, r3, #23
 8004470:	4605      	mov	r5, r0
 8004472:	460c      	mov	r4, r1
 8004474:	4616      	mov	r6, r2
 8004476:	d505      	bpl.n	8004484 <__swrite+0x1e>
 8004478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800447c:	2302      	movs	r3, #2
 800447e:	2200      	movs	r2, #0
 8004480:	f000 f83c 	bl	80044fc <_lseek_r>
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800448a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800448e:	81a3      	strh	r3, [r4, #12]
 8004490:	4632      	mov	r2, r6
 8004492:	463b      	mov	r3, r7
 8004494:	4628      	mov	r0, r5
 8004496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800449a:	f000 b853 	b.w	8004544 <_write_r>

0800449e <__sseek>:
 800449e:	b510      	push	{r4, lr}
 80044a0:	460c      	mov	r4, r1
 80044a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a6:	f000 f829 	bl	80044fc <_lseek_r>
 80044aa:	1c43      	adds	r3, r0, #1
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	bf15      	itete	ne
 80044b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80044b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044ba:	81a3      	strheq	r3, [r4, #12]
 80044bc:	bf18      	it	ne
 80044be:	81a3      	strhne	r3, [r4, #12]
 80044c0:	bd10      	pop	{r4, pc}

080044c2 <__sclose>:
 80044c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c6:	f000 b809 	b.w	80044dc <_close_r>

080044ca <memset>:
 80044ca:	4402      	add	r2, r0
 80044cc:	4603      	mov	r3, r0
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d100      	bne.n	80044d4 <memset+0xa>
 80044d2:	4770      	bx	lr
 80044d4:	f803 1b01 	strb.w	r1, [r3], #1
 80044d8:	e7f9      	b.n	80044ce <memset+0x4>
	...

080044dc <_close_r>:
 80044dc:	b538      	push	{r3, r4, r5, lr}
 80044de:	4d06      	ldr	r5, [pc, #24]	; (80044f8 <_close_r+0x1c>)
 80044e0:	2300      	movs	r3, #0
 80044e2:	4604      	mov	r4, r0
 80044e4:	4608      	mov	r0, r1
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	f7fc fb69 	bl	8000bbe <_close>
 80044ec:	1c43      	adds	r3, r0, #1
 80044ee:	d102      	bne.n	80044f6 <_close_r+0x1a>
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	b103      	cbz	r3, 80044f6 <_close_r+0x1a>
 80044f4:	6023      	str	r3, [r4, #0]
 80044f6:	bd38      	pop	{r3, r4, r5, pc}
 80044f8:	20000270 	.word	0x20000270

080044fc <_lseek_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	4d07      	ldr	r5, [pc, #28]	; (800451c <_lseek_r+0x20>)
 8004500:	4604      	mov	r4, r0
 8004502:	4608      	mov	r0, r1
 8004504:	4611      	mov	r1, r2
 8004506:	2200      	movs	r2, #0
 8004508:	602a      	str	r2, [r5, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	f7fc fb7e 	bl	8000c0c <_lseek>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d102      	bne.n	800451a <_lseek_r+0x1e>
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	b103      	cbz	r3, 800451a <_lseek_r+0x1e>
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	bd38      	pop	{r3, r4, r5, pc}
 800451c:	20000270 	.word	0x20000270

08004520 <_read_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4d07      	ldr	r5, [pc, #28]	; (8004540 <_read_r+0x20>)
 8004524:	4604      	mov	r4, r0
 8004526:	4608      	mov	r0, r1
 8004528:	4611      	mov	r1, r2
 800452a:	2200      	movs	r2, #0
 800452c:	602a      	str	r2, [r5, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	f7fc fb28 	bl	8000b84 <_read>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d102      	bne.n	800453e <_read_r+0x1e>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	b103      	cbz	r3, 800453e <_read_r+0x1e>
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	20000270 	.word	0x20000270

08004544 <_write_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4d07      	ldr	r5, [pc, #28]	; (8004564 <_write_r+0x20>)
 8004548:	4604      	mov	r4, r0
 800454a:	4608      	mov	r0, r1
 800454c:	4611      	mov	r1, r2
 800454e:	2200      	movs	r2, #0
 8004550:	602a      	str	r2, [r5, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	f7fc f80a 	bl	800056c <_write>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d102      	bne.n	8004562 <_write_r+0x1e>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	b103      	cbz	r3, 8004562 <_write_r+0x1e>
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	20000270 	.word	0x20000270

08004568 <__errno>:
 8004568:	4b01      	ldr	r3, [pc, #4]	; (8004570 <__errno+0x8>)
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000064 	.word	0x20000064

08004574 <__libc_init_array>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	4d0d      	ldr	r5, [pc, #52]	; (80045ac <__libc_init_array+0x38>)
 8004578:	4c0d      	ldr	r4, [pc, #52]	; (80045b0 <__libc_init_array+0x3c>)
 800457a:	1b64      	subs	r4, r4, r5
 800457c:	10a4      	asrs	r4, r4, #2
 800457e:	2600      	movs	r6, #0
 8004580:	42a6      	cmp	r6, r4
 8004582:	d109      	bne.n	8004598 <__libc_init_array+0x24>
 8004584:	4d0b      	ldr	r5, [pc, #44]	; (80045b4 <__libc_init_array+0x40>)
 8004586:	4c0c      	ldr	r4, [pc, #48]	; (80045b8 <__libc_init_array+0x44>)
 8004588:	f000 fdbe 	bl	8005108 <_init>
 800458c:	1b64      	subs	r4, r4, r5
 800458e:	10a4      	asrs	r4, r4, #2
 8004590:	2600      	movs	r6, #0
 8004592:	42a6      	cmp	r6, r4
 8004594:	d105      	bne.n	80045a2 <__libc_init_array+0x2e>
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	f855 3b04 	ldr.w	r3, [r5], #4
 800459c:	4798      	blx	r3
 800459e:	3601      	adds	r6, #1
 80045a0:	e7ee      	b.n	8004580 <__libc_init_array+0xc>
 80045a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a6:	4798      	blx	r3
 80045a8:	3601      	adds	r6, #1
 80045aa:	e7f2      	b.n	8004592 <__libc_init_array+0x1e>
 80045ac:	080051b0 	.word	0x080051b0
 80045b0:	080051b0 	.word	0x080051b0
 80045b4:	080051b0 	.word	0x080051b0
 80045b8:	080051b4 	.word	0x080051b4

080045bc <__retarget_lock_acquire_recursive>:
 80045bc:	4770      	bx	lr

080045be <__retarget_lock_release_recursive>:
 80045be:	4770      	bx	lr

080045c0 <_free_r>:
 80045c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045c2:	2900      	cmp	r1, #0
 80045c4:	d044      	beq.n	8004650 <_free_r+0x90>
 80045c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ca:	9001      	str	r0, [sp, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f1a1 0404 	sub.w	r4, r1, #4
 80045d2:	bfb8      	it	lt
 80045d4:	18e4      	addlt	r4, r4, r3
 80045d6:	f000 f8df 	bl	8004798 <__malloc_lock>
 80045da:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <_free_r+0x94>)
 80045dc:	9801      	ldr	r0, [sp, #4]
 80045de:	6813      	ldr	r3, [r2, #0]
 80045e0:	b933      	cbnz	r3, 80045f0 <_free_r+0x30>
 80045e2:	6063      	str	r3, [r4, #4]
 80045e4:	6014      	str	r4, [r2, #0]
 80045e6:	b003      	add	sp, #12
 80045e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045ec:	f000 b8da 	b.w	80047a4 <__malloc_unlock>
 80045f0:	42a3      	cmp	r3, r4
 80045f2:	d908      	bls.n	8004606 <_free_r+0x46>
 80045f4:	6825      	ldr	r5, [r4, #0]
 80045f6:	1961      	adds	r1, r4, r5
 80045f8:	428b      	cmp	r3, r1
 80045fa:	bf01      	itttt	eq
 80045fc:	6819      	ldreq	r1, [r3, #0]
 80045fe:	685b      	ldreq	r3, [r3, #4]
 8004600:	1949      	addeq	r1, r1, r5
 8004602:	6021      	streq	r1, [r4, #0]
 8004604:	e7ed      	b.n	80045e2 <_free_r+0x22>
 8004606:	461a      	mov	r2, r3
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	b10b      	cbz	r3, 8004610 <_free_r+0x50>
 800460c:	42a3      	cmp	r3, r4
 800460e:	d9fa      	bls.n	8004606 <_free_r+0x46>
 8004610:	6811      	ldr	r1, [r2, #0]
 8004612:	1855      	adds	r5, r2, r1
 8004614:	42a5      	cmp	r5, r4
 8004616:	d10b      	bne.n	8004630 <_free_r+0x70>
 8004618:	6824      	ldr	r4, [r4, #0]
 800461a:	4421      	add	r1, r4
 800461c:	1854      	adds	r4, r2, r1
 800461e:	42a3      	cmp	r3, r4
 8004620:	6011      	str	r1, [r2, #0]
 8004622:	d1e0      	bne.n	80045e6 <_free_r+0x26>
 8004624:	681c      	ldr	r4, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	6053      	str	r3, [r2, #4]
 800462a:	440c      	add	r4, r1
 800462c:	6014      	str	r4, [r2, #0]
 800462e:	e7da      	b.n	80045e6 <_free_r+0x26>
 8004630:	d902      	bls.n	8004638 <_free_r+0x78>
 8004632:	230c      	movs	r3, #12
 8004634:	6003      	str	r3, [r0, #0]
 8004636:	e7d6      	b.n	80045e6 <_free_r+0x26>
 8004638:	6825      	ldr	r5, [r4, #0]
 800463a:	1961      	adds	r1, r4, r5
 800463c:	428b      	cmp	r3, r1
 800463e:	bf04      	itt	eq
 8004640:	6819      	ldreq	r1, [r3, #0]
 8004642:	685b      	ldreq	r3, [r3, #4]
 8004644:	6063      	str	r3, [r4, #4]
 8004646:	bf04      	itt	eq
 8004648:	1949      	addeq	r1, r1, r5
 800464a:	6021      	streq	r1, [r4, #0]
 800464c:	6054      	str	r4, [r2, #4]
 800464e:	e7ca      	b.n	80045e6 <_free_r+0x26>
 8004650:	b003      	add	sp, #12
 8004652:	bd30      	pop	{r4, r5, pc}
 8004654:	20000278 	.word	0x20000278

08004658 <sbrk_aligned>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	4e0e      	ldr	r6, [pc, #56]	; (8004694 <sbrk_aligned+0x3c>)
 800465c:	460c      	mov	r4, r1
 800465e:	6831      	ldr	r1, [r6, #0]
 8004660:	4605      	mov	r5, r0
 8004662:	b911      	cbnz	r1, 800466a <sbrk_aligned+0x12>
 8004664:	f000 fcbc 	bl	8004fe0 <_sbrk_r>
 8004668:	6030      	str	r0, [r6, #0]
 800466a:	4621      	mov	r1, r4
 800466c:	4628      	mov	r0, r5
 800466e:	f000 fcb7 	bl	8004fe0 <_sbrk_r>
 8004672:	1c43      	adds	r3, r0, #1
 8004674:	d00a      	beq.n	800468c <sbrk_aligned+0x34>
 8004676:	1cc4      	adds	r4, r0, #3
 8004678:	f024 0403 	bic.w	r4, r4, #3
 800467c:	42a0      	cmp	r0, r4
 800467e:	d007      	beq.n	8004690 <sbrk_aligned+0x38>
 8004680:	1a21      	subs	r1, r4, r0
 8004682:	4628      	mov	r0, r5
 8004684:	f000 fcac 	bl	8004fe0 <_sbrk_r>
 8004688:	3001      	adds	r0, #1
 800468a:	d101      	bne.n	8004690 <sbrk_aligned+0x38>
 800468c:	f04f 34ff 	mov.w	r4, #4294967295
 8004690:	4620      	mov	r0, r4
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	2000027c 	.word	0x2000027c

08004698 <_malloc_r>:
 8004698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800469c:	1ccd      	adds	r5, r1, #3
 800469e:	f025 0503 	bic.w	r5, r5, #3
 80046a2:	3508      	adds	r5, #8
 80046a4:	2d0c      	cmp	r5, #12
 80046a6:	bf38      	it	cc
 80046a8:	250c      	movcc	r5, #12
 80046aa:	2d00      	cmp	r5, #0
 80046ac:	4607      	mov	r7, r0
 80046ae:	db01      	blt.n	80046b4 <_malloc_r+0x1c>
 80046b0:	42a9      	cmp	r1, r5
 80046b2:	d905      	bls.n	80046c0 <_malloc_r+0x28>
 80046b4:	230c      	movs	r3, #12
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	2600      	movs	r6, #0
 80046ba:	4630      	mov	r0, r6
 80046bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004794 <_malloc_r+0xfc>
 80046c4:	f000 f868 	bl	8004798 <__malloc_lock>
 80046c8:	f8d8 3000 	ldr.w	r3, [r8]
 80046cc:	461c      	mov	r4, r3
 80046ce:	bb5c      	cbnz	r4, 8004728 <_malloc_r+0x90>
 80046d0:	4629      	mov	r1, r5
 80046d2:	4638      	mov	r0, r7
 80046d4:	f7ff ffc0 	bl	8004658 <sbrk_aligned>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	4604      	mov	r4, r0
 80046dc:	d155      	bne.n	800478a <_malloc_r+0xf2>
 80046de:	f8d8 4000 	ldr.w	r4, [r8]
 80046e2:	4626      	mov	r6, r4
 80046e4:	2e00      	cmp	r6, #0
 80046e6:	d145      	bne.n	8004774 <_malloc_r+0xdc>
 80046e8:	2c00      	cmp	r4, #0
 80046ea:	d048      	beq.n	800477e <_malloc_r+0xe6>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	4631      	mov	r1, r6
 80046f0:	4638      	mov	r0, r7
 80046f2:	eb04 0903 	add.w	r9, r4, r3
 80046f6:	f000 fc73 	bl	8004fe0 <_sbrk_r>
 80046fa:	4581      	cmp	r9, r0
 80046fc:	d13f      	bne.n	800477e <_malloc_r+0xe6>
 80046fe:	6821      	ldr	r1, [r4, #0]
 8004700:	1a6d      	subs	r5, r5, r1
 8004702:	4629      	mov	r1, r5
 8004704:	4638      	mov	r0, r7
 8004706:	f7ff ffa7 	bl	8004658 <sbrk_aligned>
 800470a:	3001      	adds	r0, #1
 800470c:	d037      	beq.n	800477e <_malloc_r+0xe6>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	442b      	add	r3, r5
 8004712:	6023      	str	r3, [r4, #0]
 8004714:	f8d8 3000 	ldr.w	r3, [r8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d038      	beq.n	800478e <_malloc_r+0xf6>
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	42a2      	cmp	r2, r4
 8004720:	d12b      	bne.n	800477a <_malloc_r+0xe2>
 8004722:	2200      	movs	r2, #0
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	e00f      	b.n	8004748 <_malloc_r+0xb0>
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	1b52      	subs	r2, r2, r5
 800472c:	d41f      	bmi.n	800476e <_malloc_r+0xd6>
 800472e:	2a0b      	cmp	r2, #11
 8004730:	d917      	bls.n	8004762 <_malloc_r+0xca>
 8004732:	1961      	adds	r1, r4, r5
 8004734:	42a3      	cmp	r3, r4
 8004736:	6025      	str	r5, [r4, #0]
 8004738:	bf18      	it	ne
 800473a:	6059      	strne	r1, [r3, #4]
 800473c:	6863      	ldr	r3, [r4, #4]
 800473e:	bf08      	it	eq
 8004740:	f8c8 1000 	streq.w	r1, [r8]
 8004744:	5162      	str	r2, [r4, r5]
 8004746:	604b      	str	r3, [r1, #4]
 8004748:	4638      	mov	r0, r7
 800474a:	f104 060b 	add.w	r6, r4, #11
 800474e:	f000 f829 	bl	80047a4 <__malloc_unlock>
 8004752:	f026 0607 	bic.w	r6, r6, #7
 8004756:	1d23      	adds	r3, r4, #4
 8004758:	1af2      	subs	r2, r6, r3
 800475a:	d0ae      	beq.n	80046ba <_malloc_r+0x22>
 800475c:	1b9b      	subs	r3, r3, r6
 800475e:	50a3      	str	r3, [r4, r2]
 8004760:	e7ab      	b.n	80046ba <_malloc_r+0x22>
 8004762:	42a3      	cmp	r3, r4
 8004764:	6862      	ldr	r2, [r4, #4]
 8004766:	d1dd      	bne.n	8004724 <_malloc_r+0x8c>
 8004768:	f8c8 2000 	str.w	r2, [r8]
 800476c:	e7ec      	b.n	8004748 <_malloc_r+0xb0>
 800476e:	4623      	mov	r3, r4
 8004770:	6864      	ldr	r4, [r4, #4]
 8004772:	e7ac      	b.n	80046ce <_malloc_r+0x36>
 8004774:	4634      	mov	r4, r6
 8004776:	6876      	ldr	r6, [r6, #4]
 8004778:	e7b4      	b.n	80046e4 <_malloc_r+0x4c>
 800477a:	4613      	mov	r3, r2
 800477c:	e7cc      	b.n	8004718 <_malloc_r+0x80>
 800477e:	230c      	movs	r3, #12
 8004780:	603b      	str	r3, [r7, #0]
 8004782:	4638      	mov	r0, r7
 8004784:	f000 f80e 	bl	80047a4 <__malloc_unlock>
 8004788:	e797      	b.n	80046ba <_malloc_r+0x22>
 800478a:	6025      	str	r5, [r4, #0]
 800478c:	e7dc      	b.n	8004748 <_malloc_r+0xb0>
 800478e:	605b      	str	r3, [r3, #4]
 8004790:	deff      	udf	#255	; 0xff
 8004792:	bf00      	nop
 8004794:	20000278 	.word	0x20000278

08004798 <__malloc_lock>:
 8004798:	4801      	ldr	r0, [pc, #4]	; (80047a0 <__malloc_lock+0x8>)
 800479a:	f7ff bf0f 	b.w	80045bc <__retarget_lock_acquire_recursive>
 800479e:	bf00      	nop
 80047a0:	20000274 	.word	0x20000274

080047a4 <__malloc_unlock>:
 80047a4:	4801      	ldr	r0, [pc, #4]	; (80047ac <__malloc_unlock+0x8>)
 80047a6:	f7ff bf0a 	b.w	80045be <__retarget_lock_release_recursive>
 80047aa:	bf00      	nop
 80047ac:	20000274 	.word	0x20000274

080047b0 <__sfputc_r>:
 80047b0:	6893      	ldr	r3, [r2, #8]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	b410      	push	{r4}
 80047b8:	6093      	str	r3, [r2, #8]
 80047ba:	da08      	bge.n	80047ce <__sfputc_r+0x1e>
 80047bc:	6994      	ldr	r4, [r2, #24]
 80047be:	42a3      	cmp	r3, r4
 80047c0:	db01      	blt.n	80047c6 <__sfputc_r+0x16>
 80047c2:	290a      	cmp	r1, #10
 80047c4:	d103      	bne.n	80047ce <__sfputc_r+0x1e>
 80047c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ca:	f000 bb73 	b.w	8004eb4 <__swbuf_r>
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	1c58      	adds	r0, r3, #1
 80047d2:	6010      	str	r0, [r2, #0]
 80047d4:	7019      	strb	r1, [r3, #0]
 80047d6:	4608      	mov	r0, r1
 80047d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047dc:	4770      	bx	lr

080047de <__sfputs_r>:
 80047de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e0:	4606      	mov	r6, r0
 80047e2:	460f      	mov	r7, r1
 80047e4:	4614      	mov	r4, r2
 80047e6:	18d5      	adds	r5, r2, r3
 80047e8:	42ac      	cmp	r4, r5
 80047ea:	d101      	bne.n	80047f0 <__sfputs_r+0x12>
 80047ec:	2000      	movs	r0, #0
 80047ee:	e007      	b.n	8004800 <__sfputs_r+0x22>
 80047f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f4:	463a      	mov	r2, r7
 80047f6:	4630      	mov	r0, r6
 80047f8:	f7ff ffda 	bl	80047b0 <__sfputc_r>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d1f3      	bne.n	80047e8 <__sfputs_r+0xa>
 8004800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004804 <_vfiprintf_r>:
 8004804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004808:	460d      	mov	r5, r1
 800480a:	b09d      	sub	sp, #116	; 0x74
 800480c:	4614      	mov	r4, r2
 800480e:	4698      	mov	r8, r3
 8004810:	4606      	mov	r6, r0
 8004812:	b118      	cbz	r0, 800481c <_vfiprintf_r+0x18>
 8004814:	6a03      	ldr	r3, [r0, #32]
 8004816:	b90b      	cbnz	r3, 800481c <_vfiprintf_r+0x18>
 8004818:	f7ff fdcc 	bl	80043b4 <__sinit>
 800481c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800481e:	07d9      	lsls	r1, r3, #31
 8004820:	d405      	bmi.n	800482e <_vfiprintf_r+0x2a>
 8004822:	89ab      	ldrh	r3, [r5, #12]
 8004824:	059a      	lsls	r2, r3, #22
 8004826:	d402      	bmi.n	800482e <_vfiprintf_r+0x2a>
 8004828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800482a:	f7ff fec7 	bl	80045bc <__retarget_lock_acquire_recursive>
 800482e:	89ab      	ldrh	r3, [r5, #12]
 8004830:	071b      	lsls	r3, r3, #28
 8004832:	d501      	bpl.n	8004838 <_vfiprintf_r+0x34>
 8004834:	692b      	ldr	r3, [r5, #16]
 8004836:	b99b      	cbnz	r3, 8004860 <_vfiprintf_r+0x5c>
 8004838:	4629      	mov	r1, r5
 800483a:	4630      	mov	r0, r6
 800483c:	f000 fb78 	bl	8004f30 <__swsetup_r>
 8004840:	b170      	cbz	r0, 8004860 <_vfiprintf_r+0x5c>
 8004842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004844:	07dc      	lsls	r4, r3, #31
 8004846:	d504      	bpl.n	8004852 <_vfiprintf_r+0x4e>
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	b01d      	add	sp, #116	; 0x74
 800484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004852:	89ab      	ldrh	r3, [r5, #12]
 8004854:	0598      	lsls	r0, r3, #22
 8004856:	d4f7      	bmi.n	8004848 <_vfiprintf_r+0x44>
 8004858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800485a:	f7ff feb0 	bl	80045be <__retarget_lock_release_recursive>
 800485e:	e7f3      	b.n	8004848 <_vfiprintf_r+0x44>
 8004860:	2300      	movs	r3, #0
 8004862:	9309      	str	r3, [sp, #36]	; 0x24
 8004864:	2320      	movs	r3, #32
 8004866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800486a:	f8cd 800c 	str.w	r8, [sp, #12]
 800486e:	2330      	movs	r3, #48	; 0x30
 8004870:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004a24 <_vfiprintf_r+0x220>
 8004874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004878:	f04f 0901 	mov.w	r9, #1
 800487c:	4623      	mov	r3, r4
 800487e:	469a      	mov	sl, r3
 8004880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004884:	b10a      	cbz	r2, 800488a <_vfiprintf_r+0x86>
 8004886:	2a25      	cmp	r2, #37	; 0x25
 8004888:	d1f9      	bne.n	800487e <_vfiprintf_r+0x7a>
 800488a:	ebba 0b04 	subs.w	fp, sl, r4
 800488e:	d00b      	beq.n	80048a8 <_vfiprintf_r+0xa4>
 8004890:	465b      	mov	r3, fp
 8004892:	4622      	mov	r2, r4
 8004894:	4629      	mov	r1, r5
 8004896:	4630      	mov	r0, r6
 8004898:	f7ff ffa1 	bl	80047de <__sfputs_r>
 800489c:	3001      	adds	r0, #1
 800489e:	f000 80a9 	beq.w	80049f4 <_vfiprintf_r+0x1f0>
 80048a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048a4:	445a      	add	r2, fp
 80048a6:	9209      	str	r2, [sp, #36]	; 0x24
 80048a8:	f89a 3000 	ldrb.w	r3, [sl]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a1 	beq.w	80049f4 <_vfiprintf_r+0x1f0>
 80048b2:	2300      	movs	r3, #0
 80048b4:	f04f 32ff 	mov.w	r2, #4294967295
 80048b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048bc:	f10a 0a01 	add.w	sl, sl, #1
 80048c0:	9304      	str	r3, [sp, #16]
 80048c2:	9307      	str	r3, [sp, #28]
 80048c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048c8:	931a      	str	r3, [sp, #104]	; 0x68
 80048ca:	4654      	mov	r4, sl
 80048cc:	2205      	movs	r2, #5
 80048ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d2:	4854      	ldr	r0, [pc, #336]	; (8004a24 <_vfiprintf_r+0x220>)
 80048d4:	f7fb fc7c 	bl	80001d0 <memchr>
 80048d8:	9a04      	ldr	r2, [sp, #16]
 80048da:	b9d8      	cbnz	r0, 8004914 <_vfiprintf_r+0x110>
 80048dc:	06d1      	lsls	r1, r2, #27
 80048de:	bf44      	itt	mi
 80048e0:	2320      	movmi	r3, #32
 80048e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048e6:	0713      	lsls	r3, r2, #28
 80048e8:	bf44      	itt	mi
 80048ea:	232b      	movmi	r3, #43	; 0x2b
 80048ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048f0:	f89a 3000 	ldrb.w	r3, [sl]
 80048f4:	2b2a      	cmp	r3, #42	; 0x2a
 80048f6:	d015      	beq.n	8004924 <_vfiprintf_r+0x120>
 80048f8:	9a07      	ldr	r2, [sp, #28]
 80048fa:	4654      	mov	r4, sl
 80048fc:	2000      	movs	r0, #0
 80048fe:	f04f 0c0a 	mov.w	ip, #10
 8004902:	4621      	mov	r1, r4
 8004904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004908:	3b30      	subs	r3, #48	; 0x30
 800490a:	2b09      	cmp	r3, #9
 800490c:	d94d      	bls.n	80049aa <_vfiprintf_r+0x1a6>
 800490e:	b1b0      	cbz	r0, 800493e <_vfiprintf_r+0x13a>
 8004910:	9207      	str	r2, [sp, #28]
 8004912:	e014      	b.n	800493e <_vfiprintf_r+0x13a>
 8004914:	eba0 0308 	sub.w	r3, r0, r8
 8004918:	fa09 f303 	lsl.w	r3, r9, r3
 800491c:	4313      	orrs	r3, r2
 800491e:	9304      	str	r3, [sp, #16]
 8004920:	46a2      	mov	sl, r4
 8004922:	e7d2      	b.n	80048ca <_vfiprintf_r+0xc6>
 8004924:	9b03      	ldr	r3, [sp, #12]
 8004926:	1d19      	adds	r1, r3, #4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	9103      	str	r1, [sp, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	bfbb      	ittet	lt
 8004930:	425b      	neglt	r3, r3
 8004932:	f042 0202 	orrlt.w	r2, r2, #2
 8004936:	9307      	strge	r3, [sp, #28]
 8004938:	9307      	strlt	r3, [sp, #28]
 800493a:	bfb8      	it	lt
 800493c:	9204      	strlt	r2, [sp, #16]
 800493e:	7823      	ldrb	r3, [r4, #0]
 8004940:	2b2e      	cmp	r3, #46	; 0x2e
 8004942:	d10c      	bne.n	800495e <_vfiprintf_r+0x15a>
 8004944:	7863      	ldrb	r3, [r4, #1]
 8004946:	2b2a      	cmp	r3, #42	; 0x2a
 8004948:	d134      	bne.n	80049b4 <_vfiprintf_r+0x1b0>
 800494a:	9b03      	ldr	r3, [sp, #12]
 800494c:	1d1a      	adds	r2, r3, #4
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	9203      	str	r2, [sp, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	bfb8      	it	lt
 8004956:	f04f 33ff 	movlt.w	r3, #4294967295
 800495a:	3402      	adds	r4, #2
 800495c:	9305      	str	r3, [sp, #20]
 800495e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004a34 <_vfiprintf_r+0x230>
 8004962:	7821      	ldrb	r1, [r4, #0]
 8004964:	2203      	movs	r2, #3
 8004966:	4650      	mov	r0, sl
 8004968:	f7fb fc32 	bl	80001d0 <memchr>
 800496c:	b138      	cbz	r0, 800497e <_vfiprintf_r+0x17a>
 800496e:	9b04      	ldr	r3, [sp, #16]
 8004970:	eba0 000a 	sub.w	r0, r0, sl
 8004974:	2240      	movs	r2, #64	; 0x40
 8004976:	4082      	lsls	r2, r0
 8004978:	4313      	orrs	r3, r2
 800497a:	3401      	adds	r4, #1
 800497c:	9304      	str	r3, [sp, #16]
 800497e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004982:	4829      	ldr	r0, [pc, #164]	; (8004a28 <_vfiprintf_r+0x224>)
 8004984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004988:	2206      	movs	r2, #6
 800498a:	f7fb fc21 	bl	80001d0 <memchr>
 800498e:	2800      	cmp	r0, #0
 8004990:	d03f      	beq.n	8004a12 <_vfiprintf_r+0x20e>
 8004992:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <_vfiprintf_r+0x228>)
 8004994:	bb1b      	cbnz	r3, 80049de <_vfiprintf_r+0x1da>
 8004996:	9b03      	ldr	r3, [sp, #12]
 8004998:	3307      	adds	r3, #7
 800499a:	f023 0307 	bic.w	r3, r3, #7
 800499e:	3308      	adds	r3, #8
 80049a0:	9303      	str	r3, [sp, #12]
 80049a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a4:	443b      	add	r3, r7
 80049a6:	9309      	str	r3, [sp, #36]	; 0x24
 80049a8:	e768      	b.n	800487c <_vfiprintf_r+0x78>
 80049aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ae:	460c      	mov	r4, r1
 80049b0:	2001      	movs	r0, #1
 80049b2:	e7a6      	b.n	8004902 <_vfiprintf_r+0xfe>
 80049b4:	2300      	movs	r3, #0
 80049b6:	3401      	adds	r4, #1
 80049b8:	9305      	str	r3, [sp, #20]
 80049ba:	4619      	mov	r1, r3
 80049bc:	f04f 0c0a 	mov.w	ip, #10
 80049c0:	4620      	mov	r0, r4
 80049c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049c6:	3a30      	subs	r2, #48	; 0x30
 80049c8:	2a09      	cmp	r2, #9
 80049ca:	d903      	bls.n	80049d4 <_vfiprintf_r+0x1d0>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0c6      	beq.n	800495e <_vfiprintf_r+0x15a>
 80049d0:	9105      	str	r1, [sp, #20]
 80049d2:	e7c4      	b.n	800495e <_vfiprintf_r+0x15a>
 80049d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80049d8:	4604      	mov	r4, r0
 80049da:	2301      	movs	r3, #1
 80049dc:	e7f0      	b.n	80049c0 <_vfiprintf_r+0x1bc>
 80049de:	ab03      	add	r3, sp, #12
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	462a      	mov	r2, r5
 80049e4:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <_vfiprintf_r+0x22c>)
 80049e6:	a904      	add	r1, sp, #16
 80049e8:	4630      	mov	r0, r6
 80049ea:	f3af 8000 	nop.w
 80049ee:	4607      	mov	r7, r0
 80049f0:	1c78      	adds	r0, r7, #1
 80049f2:	d1d6      	bne.n	80049a2 <_vfiprintf_r+0x19e>
 80049f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049f6:	07d9      	lsls	r1, r3, #31
 80049f8:	d405      	bmi.n	8004a06 <_vfiprintf_r+0x202>
 80049fa:	89ab      	ldrh	r3, [r5, #12]
 80049fc:	059a      	lsls	r2, r3, #22
 80049fe:	d402      	bmi.n	8004a06 <_vfiprintf_r+0x202>
 8004a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a02:	f7ff fddc 	bl	80045be <__retarget_lock_release_recursive>
 8004a06:	89ab      	ldrh	r3, [r5, #12]
 8004a08:	065b      	lsls	r3, r3, #25
 8004a0a:	f53f af1d 	bmi.w	8004848 <_vfiprintf_r+0x44>
 8004a0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a10:	e71c      	b.n	800484c <_vfiprintf_r+0x48>
 8004a12:	ab03      	add	r3, sp, #12
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	462a      	mov	r2, r5
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <_vfiprintf_r+0x22c>)
 8004a1a:	a904      	add	r1, sp, #16
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	f000 f879 	bl	8004b14 <_printf_i>
 8004a22:	e7e4      	b.n	80049ee <_vfiprintf_r+0x1ea>
 8004a24:	08005174 	.word	0x08005174
 8004a28:	0800517e 	.word	0x0800517e
 8004a2c:	00000000 	.word	0x00000000
 8004a30:	080047df 	.word	0x080047df
 8004a34:	0800517a 	.word	0x0800517a

08004a38 <_printf_common>:
 8004a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	4699      	mov	r9, r3
 8004a40:	688a      	ldr	r2, [r1, #8]
 8004a42:	690b      	ldr	r3, [r1, #16]
 8004a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	bfb8      	it	lt
 8004a4c:	4613      	movlt	r3, r2
 8004a4e:	6033      	str	r3, [r6, #0]
 8004a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a54:	4607      	mov	r7, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	b10a      	cbz	r2, 8004a5e <_printf_common+0x26>
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	6033      	str	r3, [r6, #0]
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	0699      	lsls	r1, r3, #26
 8004a62:	bf42      	ittt	mi
 8004a64:	6833      	ldrmi	r3, [r6, #0]
 8004a66:	3302      	addmi	r3, #2
 8004a68:	6033      	strmi	r3, [r6, #0]
 8004a6a:	6825      	ldr	r5, [r4, #0]
 8004a6c:	f015 0506 	ands.w	r5, r5, #6
 8004a70:	d106      	bne.n	8004a80 <_printf_common+0x48>
 8004a72:	f104 0a19 	add.w	sl, r4, #25
 8004a76:	68e3      	ldr	r3, [r4, #12]
 8004a78:	6832      	ldr	r2, [r6, #0]
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	42ab      	cmp	r3, r5
 8004a7e:	dc26      	bgt.n	8004ace <_printf_common+0x96>
 8004a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a84:	1e13      	subs	r3, r2, #0
 8004a86:	6822      	ldr	r2, [r4, #0]
 8004a88:	bf18      	it	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	0692      	lsls	r2, r2, #26
 8004a8e:	d42b      	bmi.n	8004ae8 <_printf_common+0xb0>
 8004a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a94:	4649      	mov	r1, r9
 8004a96:	4638      	mov	r0, r7
 8004a98:	47c0      	blx	r8
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d01e      	beq.n	8004adc <_printf_common+0xa4>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	6922      	ldr	r2, [r4, #16]
 8004aa2:	f003 0306 	and.w	r3, r3, #6
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	bf02      	ittt	eq
 8004aaa:	68e5      	ldreq	r5, [r4, #12]
 8004aac:	6833      	ldreq	r3, [r6, #0]
 8004aae:	1aed      	subeq	r5, r5, r3
 8004ab0:	68a3      	ldr	r3, [r4, #8]
 8004ab2:	bf0c      	ite	eq
 8004ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab8:	2500      	movne	r5, #0
 8004aba:	4293      	cmp	r3, r2
 8004abc:	bfc4      	itt	gt
 8004abe:	1a9b      	subgt	r3, r3, r2
 8004ac0:	18ed      	addgt	r5, r5, r3
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	341a      	adds	r4, #26
 8004ac6:	42b5      	cmp	r5, r6
 8004ac8:	d11a      	bne.n	8004b00 <_printf_common+0xc8>
 8004aca:	2000      	movs	r0, #0
 8004acc:	e008      	b.n	8004ae0 <_printf_common+0xa8>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4652      	mov	r2, sl
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	47c0      	blx	r8
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d103      	bne.n	8004ae4 <_printf_common+0xac>
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae4:	3501      	adds	r5, #1
 8004ae6:	e7c6      	b.n	8004a76 <_printf_common+0x3e>
 8004ae8:	18e1      	adds	r1, r4, r3
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	2030      	movs	r0, #48	; 0x30
 8004aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004af2:	4422      	add	r2, r4
 8004af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004afc:	3302      	adds	r3, #2
 8004afe:	e7c7      	b.n	8004a90 <_printf_common+0x58>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4622      	mov	r2, r4
 8004b04:	4649      	mov	r1, r9
 8004b06:	4638      	mov	r0, r7
 8004b08:	47c0      	blx	r8
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d0e6      	beq.n	8004adc <_printf_common+0xa4>
 8004b0e:	3601      	adds	r6, #1
 8004b10:	e7d9      	b.n	8004ac6 <_printf_common+0x8e>
	...

08004b14 <_printf_i>:
 8004b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	7e0f      	ldrb	r7, [r1, #24]
 8004b1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b1c:	2f78      	cmp	r7, #120	; 0x78
 8004b1e:	4691      	mov	r9, r2
 8004b20:	4680      	mov	r8, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	469a      	mov	sl, r3
 8004b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b2a:	d807      	bhi.n	8004b3c <_printf_i+0x28>
 8004b2c:	2f62      	cmp	r7, #98	; 0x62
 8004b2e:	d80a      	bhi.n	8004b46 <_printf_i+0x32>
 8004b30:	2f00      	cmp	r7, #0
 8004b32:	f000 80d4 	beq.w	8004cde <_printf_i+0x1ca>
 8004b36:	2f58      	cmp	r7, #88	; 0x58
 8004b38:	f000 80c0 	beq.w	8004cbc <_printf_i+0x1a8>
 8004b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b44:	e03a      	b.n	8004bbc <_printf_i+0xa8>
 8004b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b4a:	2b15      	cmp	r3, #21
 8004b4c:	d8f6      	bhi.n	8004b3c <_printf_i+0x28>
 8004b4e:	a101      	add	r1, pc, #4	; (adr r1, 8004b54 <_printf_i+0x40>)
 8004b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b54:	08004bad 	.word	0x08004bad
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004b3d 	.word	0x08004b3d
 8004b60:	08004b3d 	.word	0x08004b3d
 8004b64:	08004b3d 	.word	0x08004b3d
 8004b68:	08004b3d 	.word	0x08004b3d
 8004b6c:	08004bc1 	.word	0x08004bc1
 8004b70:	08004b3d 	.word	0x08004b3d
 8004b74:	08004b3d 	.word	0x08004b3d
 8004b78:	08004b3d 	.word	0x08004b3d
 8004b7c:	08004b3d 	.word	0x08004b3d
 8004b80:	08004cc5 	.word	0x08004cc5
 8004b84:	08004bed 	.word	0x08004bed
 8004b88:	08004c7f 	.word	0x08004c7f
 8004b8c:	08004b3d 	.word	0x08004b3d
 8004b90:	08004b3d 	.word	0x08004b3d
 8004b94:	08004ce7 	.word	0x08004ce7
 8004b98:	08004b3d 	.word	0x08004b3d
 8004b9c:	08004bed 	.word	0x08004bed
 8004ba0:	08004b3d 	.word	0x08004b3d
 8004ba4:	08004b3d 	.word	0x08004b3d
 8004ba8:	08004c87 	.word	0x08004c87
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	1d1a      	adds	r2, r3, #4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	602a      	str	r2, [r5, #0]
 8004bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e09f      	b.n	8004d00 <_printf_i+0x1ec>
 8004bc0:	6820      	ldr	r0, [r4, #0]
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	0607      	lsls	r7, r0, #24
 8004bc6:	f103 0104 	add.w	r1, r3, #4
 8004bca:	6029      	str	r1, [r5, #0]
 8004bcc:	d501      	bpl.n	8004bd2 <_printf_i+0xbe>
 8004bce:	681e      	ldr	r6, [r3, #0]
 8004bd0:	e003      	b.n	8004bda <_printf_i+0xc6>
 8004bd2:	0646      	lsls	r6, r0, #25
 8004bd4:	d5fb      	bpl.n	8004bce <_printf_i+0xba>
 8004bd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bda:	2e00      	cmp	r6, #0
 8004bdc:	da03      	bge.n	8004be6 <_printf_i+0xd2>
 8004bde:	232d      	movs	r3, #45	; 0x2d
 8004be0:	4276      	negs	r6, r6
 8004be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be6:	485a      	ldr	r0, [pc, #360]	; (8004d50 <_printf_i+0x23c>)
 8004be8:	230a      	movs	r3, #10
 8004bea:	e012      	b.n	8004c12 <_printf_i+0xfe>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	6820      	ldr	r0, [r4, #0]
 8004bf0:	1d19      	adds	r1, r3, #4
 8004bf2:	6029      	str	r1, [r5, #0]
 8004bf4:	0605      	lsls	r5, r0, #24
 8004bf6:	d501      	bpl.n	8004bfc <_printf_i+0xe8>
 8004bf8:	681e      	ldr	r6, [r3, #0]
 8004bfa:	e002      	b.n	8004c02 <_printf_i+0xee>
 8004bfc:	0641      	lsls	r1, r0, #25
 8004bfe:	d5fb      	bpl.n	8004bf8 <_printf_i+0xe4>
 8004c00:	881e      	ldrh	r6, [r3, #0]
 8004c02:	4853      	ldr	r0, [pc, #332]	; (8004d50 <_printf_i+0x23c>)
 8004c04:	2f6f      	cmp	r7, #111	; 0x6f
 8004c06:	bf0c      	ite	eq
 8004c08:	2308      	moveq	r3, #8
 8004c0a:	230a      	movne	r3, #10
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c12:	6865      	ldr	r5, [r4, #4]
 8004c14:	60a5      	str	r5, [r4, #8]
 8004c16:	2d00      	cmp	r5, #0
 8004c18:	bfa2      	ittt	ge
 8004c1a:	6821      	ldrge	r1, [r4, #0]
 8004c1c:	f021 0104 	bicge.w	r1, r1, #4
 8004c20:	6021      	strge	r1, [r4, #0]
 8004c22:	b90e      	cbnz	r6, 8004c28 <_printf_i+0x114>
 8004c24:	2d00      	cmp	r5, #0
 8004c26:	d04b      	beq.n	8004cc0 <_printf_i+0x1ac>
 8004c28:	4615      	mov	r5, r2
 8004c2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c2e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c32:	5dc7      	ldrb	r7, [r0, r7]
 8004c34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c38:	4637      	mov	r7, r6
 8004c3a:	42bb      	cmp	r3, r7
 8004c3c:	460e      	mov	r6, r1
 8004c3e:	d9f4      	bls.n	8004c2a <_printf_i+0x116>
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d10b      	bne.n	8004c5c <_printf_i+0x148>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	07de      	lsls	r6, r3, #31
 8004c48:	d508      	bpl.n	8004c5c <_printf_i+0x148>
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	6861      	ldr	r1, [r4, #4]
 8004c4e:	4299      	cmp	r1, r3
 8004c50:	bfde      	ittt	le
 8004c52:	2330      	movle	r3, #48	; 0x30
 8004c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c5c:	1b52      	subs	r2, r2, r5
 8004c5e:	6122      	str	r2, [r4, #16]
 8004c60:	f8cd a000 	str.w	sl, [sp]
 8004c64:	464b      	mov	r3, r9
 8004c66:	aa03      	add	r2, sp, #12
 8004c68:	4621      	mov	r1, r4
 8004c6a:	4640      	mov	r0, r8
 8004c6c:	f7ff fee4 	bl	8004a38 <_printf_common>
 8004c70:	3001      	adds	r0, #1
 8004c72:	d14a      	bne.n	8004d0a <_printf_i+0x1f6>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	b004      	add	sp, #16
 8004c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	f043 0320 	orr.w	r3, r3, #32
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	4833      	ldr	r0, [pc, #204]	; (8004d54 <_printf_i+0x240>)
 8004c88:	2778      	movs	r7, #120	; 0x78
 8004c8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	6829      	ldr	r1, [r5, #0]
 8004c92:	061f      	lsls	r7, r3, #24
 8004c94:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c98:	d402      	bmi.n	8004ca0 <_printf_i+0x18c>
 8004c9a:	065f      	lsls	r7, r3, #25
 8004c9c:	bf48      	it	mi
 8004c9e:	b2b6      	uxthmi	r6, r6
 8004ca0:	07df      	lsls	r7, r3, #31
 8004ca2:	bf48      	it	mi
 8004ca4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ca8:	6029      	str	r1, [r5, #0]
 8004caa:	bf48      	it	mi
 8004cac:	6023      	strmi	r3, [r4, #0]
 8004cae:	b91e      	cbnz	r6, 8004cb8 <_printf_i+0x1a4>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	f023 0320 	bic.w	r3, r3, #32
 8004cb6:	6023      	str	r3, [r4, #0]
 8004cb8:	2310      	movs	r3, #16
 8004cba:	e7a7      	b.n	8004c0c <_printf_i+0xf8>
 8004cbc:	4824      	ldr	r0, [pc, #144]	; (8004d50 <_printf_i+0x23c>)
 8004cbe:	e7e4      	b.n	8004c8a <_printf_i+0x176>
 8004cc0:	4615      	mov	r5, r2
 8004cc2:	e7bd      	b.n	8004c40 <_printf_i+0x12c>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	6826      	ldr	r6, [r4, #0]
 8004cc8:	6961      	ldr	r1, [r4, #20]
 8004cca:	1d18      	adds	r0, r3, #4
 8004ccc:	6028      	str	r0, [r5, #0]
 8004cce:	0635      	lsls	r5, r6, #24
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	d501      	bpl.n	8004cd8 <_printf_i+0x1c4>
 8004cd4:	6019      	str	r1, [r3, #0]
 8004cd6:	e002      	b.n	8004cde <_printf_i+0x1ca>
 8004cd8:	0670      	lsls	r0, r6, #25
 8004cda:	d5fb      	bpl.n	8004cd4 <_printf_i+0x1c0>
 8004cdc:	8019      	strh	r1, [r3, #0]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	4615      	mov	r5, r2
 8004ce4:	e7bc      	b.n	8004c60 <_printf_i+0x14c>
 8004ce6:	682b      	ldr	r3, [r5, #0]
 8004ce8:	1d1a      	adds	r2, r3, #4
 8004cea:	602a      	str	r2, [r5, #0]
 8004cec:	681d      	ldr	r5, [r3, #0]
 8004cee:	6862      	ldr	r2, [r4, #4]
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f7fb fa6c 	bl	80001d0 <memchr>
 8004cf8:	b108      	cbz	r0, 8004cfe <_printf_i+0x1ea>
 8004cfa:	1b40      	subs	r0, r0, r5
 8004cfc:	6060      	str	r0, [r4, #4]
 8004cfe:	6863      	ldr	r3, [r4, #4]
 8004d00:	6123      	str	r3, [r4, #16]
 8004d02:	2300      	movs	r3, #0
 8004d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d08:	e7aa      	b.n	8004c60 <_printf_i+0x14c>
 8004d0a:	6923      	ldr	r3, [r4, #16]
 8004d0c:	462a      	mov	r2, r5
 8004d0e:	4649      	mov	r1, r9
 8004d10:	4640      	mov	r0, r8
 8004d12:	47d0      	blx	sl
 8004d14:	3001      	adds	r0, #1
 8004d16:	d0ad      	beq.n	8004c74 <_printf_i+0x160>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	079b      	lsls	r3, r3, #30
 8004d1c:	d413      	bmi.n	8004d46 <_printf_i+0x232>
 8004d1e:	68e0      	ldr	r0, [r4, #12]
 8004d20:	9b03      	ldr	r3, [sp, #12]
 8004d22:	4298      	cmp	r0, r3
 8004d24:	bfb8      	it	lt
 8004d26:	4618      	movlt	r0, r3
 8004d28:	e7a6      	b.n	8004c78 <_printf_i+0x164>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4640      	mov	r0, r8
 8004d32:	47d0      	blx	sl
 8004d34:	3001      	adds	r0, #1
 8004d36:	d09d      	beq.n	8004c74 <_printf_i+0x160>
 8004d38:	3501      	adds	r5, #1
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	9903      	ldr	r1, [sp, #12]
 8004d3e:	1a5b      	subs	r3, r3, r1
 8004d40:	42ab      	cmp	r3, r5
 8004d42:	dcf2      	bgt.n	8004d2a <_printf_i+0x216>
 8004d44:	e7eb      	b.n	8004d1e <_printf_i+0x20a>
 8004d46:	2500      	movs	r5, #0
 8004d48:	f104 0619 	add.w	r6, r4, #25
 8004d4c:	e7f5      	b.n	8004d3a <_printf_i+0x226>
 8004d4e:	bf00      	nop
 8004d50:	08005185 	.word	0x08005185
 8004d54:	08005196 	.word	0x08005196

08004d58 <__sflush_r>:
 8004d58:	898a      	ldrh	r2, [r1, #12]
 8004d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5e:	4605      	mov	r5, r0
 8004d60:	0710      	lsls	r0, r2, #28
 8004d62:	460c      	mov	r4, r1
 8004d64:	d458      	bmi.n	8004e18 <__sflush_r+0xc0>
 8004d66:	684b      	ldr	r3, [r1, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	dc05      	bgt.n	8004d78 <__sflush_r+0x20>
 8004d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	dc02      	bgt.n	8004d78 <__sflush_r+0x20>
 8004d72:	2000      	movs	r0, #0
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d7a:	2e00      	cmp	r6, #0
 8004d7c:	d0f9      	beq.n	8004d72 <__sflush_r+0x1a>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d84:	682f      	ldr	r7, [r5, #0]
 8004d86:	6a21      	ldr	r1, [r4, #32]
 8004d88:	602b      	str	r3, [r5, #0]
 8004d8a:	d032      	beq.n	8004df2 <__sflush_r+0x9a>
 8004d8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	075a      	lsls	r2, r3, #29
 8004d92:	d505      	bpl.n	8004da0 <__sflush_r+0x48>
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	1ac0      	subs	r0, r0, r3
 8004d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d9a:	b10b      	cbz	r3, 8004da0 <__sflush_r+0x48>
 8004d9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d9e:	1ac0      	subs	r0, r0, r3
 8004da0:	2300      	movs	r3, #0
 8004da2:	4602      	mov	r2, r0
 8004da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004da6:	6a21      	ldr	r1, [r4, #32]
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b0      	blx	r6
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	d106      	bne.n	8004dc0 <__sflush_r+0x68>
 8004db2:	6829      	ldr	r1, [r5, #0]
 8004db4:	291d      	cmp	r1, #29
 8004db6:	d82b      	bhi.n	8004e10 <__sflush_r+0xb8>
 8004db8:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <__sflush_r+0x108>)
 8004dba:	410a      	asrs	r2, r1
 8004dbc:	07d6      	lsls	r6, r2, #31
 8004dbe:	d427      	bmi.n	8004e10 <__sflush_r+0xb8>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	6062      	str	r2, [r4, #4]
 8004dc4:	04d9      	lsls	r1, r3, #19
 8004dc6:	6922      	ldr	r2, [r4, #16]
 8004dc8:	6022      	str	r2, [r4, #0]
 8004dca:	d504      	bpl.n	8004dd6 <__sflush_r+0x7e>
 8004dcc:	1c42      	adds	r2, r0, #1
 8004dce:	d101      	bne.n	8004dd4 <__sflush_r+0x7c>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b903      	cbnz	r3, 8004dd6 <__sflush_r+0x7e>
 8004dd4:	6560      	str	r0, [r4, #84]	; 0x54
 8004dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dd8:	602f      	str	r7, [r5, #0]
 8004dda:	2900      	cmp	r1, #0
 8004ddc:	d0c9      	beq.n	8004d72 <__sflush_r+0x1a>
 8004dde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004de2:	4299      	cmp	r1, r3
 8004de4:	d002      	beq.n	8004dec <__sflush_r+0x94>
 8004de6:	4628      	mov	r0, r5
 8004de8:	f7ff fbea 	bl	80045c0 <_free_r>
 8004dec:	2000      	movs	r0, #0
 8004dee:	6360      	str	r0, [r4, #52]	; 0x34
 8004df0:	e7c0      	b.n	8004d74 <__sflush_r+0x1c>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4628      	mov	r0, r5
 8004df6:	47b0      	blx	r6
 8004df8:	1c41      	adds	r1, r0, #1
 8004dfa:	d1c8      	bne.n	8004d8e <__sflush_r+0x36>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0c5      	beq.n	8004d8e <__sflush_r+0x36>
 8004e02:	2b1d      	cmp	r3, #29
 8004e04:	d001      	beq.n	8004e0a <__sflush_r+0xb2>
 8004e06:	2b16      	cmp	r3, #22
 8004e08:	d101      	bne.n	8004e0e <__sflush_r+0xb6>
 8004e0a:	602f      	str	r7, [r5, #0]
 8004e0c:	e7b1      	b.n	8004d72 <__sflush_r+0x1a>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	e7ad      	b.n	8004d74 <__sflush_r+0x1c>
 8004e18:	690f      	ldr	r7, [r1, #16]
 8004e1a:	2f00      	cmp	r7, #0
 8004e1c:	d0a9      	beq.n	8004d72 <__sflush_r+0x1a>
 8004e1e:	0793      	lsls	r3, r2, #30
 8004e20:	680e      	ldr	r6, [r1, #0]
 8004e22:	bf08      	it	eq
 8004e24:	694b      	ldreq	r3, [r1, #20]
 8004e26:	600f      	str	r7, [r1, #0]
 8004e28:	bf18      	it	ne
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	eba6 0807 	sub.w	r8, r6, r7
 8004e30:	608b      	str	r3, [r1, #8]
 8004e32:	f1b8 0f00 	cmp.w	r8, #0
 8004e36:	dd9c      	ble.n	8004d72 <__sflush_r+0x1a>
 8004e38:	6a21      	ldr	r1, [r4, #32]
 8004e3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e3c:	4643      	mov	r3, r8
 8004e3e:	463a      	mov	r2, r7
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	2800      	cmp	r0, #0
 8004e46:	dc06      	bgt.n	8004e56 <__sflush_r+0xfe>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	e78e      	b.n	8004d74 <__sflush_r+0x1c>
 8004e56:	4407      	add	r7, r0
 8004e58:	eba8 0800 	sub.w	r8, r8, r0
 8004e5c:	e7e9      	b.n	8004e32 <__sflush_r+0xda>
 8004e5e:	bf00      	nop
 8004e60:	dfbffffe 	.word	0xdfbffffe

08004e64 <_fflush_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	690b      	ldr	r3, [r1, #16]
 8004e68:	4605      	mov	r5, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	b913      	cbnz	r3, 8004e74 <_fflush_r+0x10>
 8004e6e:	2500      	movs	r5, #0
 8004e70:	4628      	mov	r0, r5
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	b118      	cbz	r0, 8004e7e <_fflush_r+0x1a>
 8004e76:	6a03      	ldr	r3, [r0, #32]
 8004e78:	b90b      	cbnz	r3, 8004e7e <_fflush_r+0x1a>
 8004e7a:	f7ff fa9b 	bl	80043b4 <__sinit>
 8004e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f3      	beq.n	8004e6e <_fflush_r+0xa>
 8004e86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e88:	07d0      	lsls	r0, r2, #31
 8004e8a:	d404      	bmi.n	8004e96 <_fflush_r+0x32>
 8004e8c:	0599      	lsls	r1, r3, #22
 8004e8e:	d402      	bmi.n	8004e96 <_fflush_r+0x32>
 8004e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e92:	f7ff fb93 	bl	80045bc <__retarget_lock_acquire_recursive>
 8004e96:	4628      	mov	r0, r5
 8004e98:	4621      	mov	r1, r4
 8004e9a:	f7ff ff5d 	bl	8004d58 <__sflush_r>
 8004e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ea0:	07da      	lsls	r2, r3, #31
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	d4e4      	bmi.n	8004e70 <_fflush_r+0xc>
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	059b      	lsls	r3, r3, #22
 8004eaa:	d4e1      	bmi.n	8004e70 <_fflush_r+0xc>
 8004eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eae:	f7ff fb86 	bl	80045be <__retarget_lock_release_recursive>
 8004eb2:	e7dd      	b.n	8004e70 <_fflush_r+0xc>

08004eb4 <__swbuf_r>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	460e      	mov	r6, r1
 8004eb8:	4614      	mov	r4, r2
 8004eba:	4605      	mov	r5, r0
 8004ebc:	b118      	cbz	r0, 8004ec6 <__swbuf_r+0x12>
 8004ebe:	6a03      	ldr	r3, [r0, #32]
 8004ec0:	b90b      	cbnz	r3, 8004ec6 <__swbuf_r+0x12>
 8004ec2:	f7ff fa77 	bl	80043b4 <__sinit>
 8004ec6:	69a3      	ldr	r3, [r4, #24]
 8004ec8:	60a3      	str	r3, [r4, #8]
 8004eca:	89a3      	ldrh	r3, [r4, #12]
 8004ecc:	071a      	lsls	r2, r3, #28
 8004ece:	d525      	bpl.n	8004f1c <__swbuf_r+0x68>
 8004ed0:	6923      	ldr	r3, [r4, #16]
 8004ed2:	b31b      	cbz	r3, 8004f1c <__swbuf_r+0x68>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	6922      	ldr	r2, [r4, #16]
 8004ed8:	1a98      	subs	r0, r3, r2
 8004eda:	6963      	ldr	r3, [r4, #20]
 8004edc:	b2f6      	uxtb	r6, r6
 8004ede:	4283      	cmp	r3, r0
 8004ee0:	4637      	mov	r7, r6
 8004ee2:	dc04      	bgt.n	8004eee <__swbuf_r+0x3a>
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f7ff ffbc 	bl	8004e64 <_fflush_r>
 8004eec:	b9e0      	cbnz	r0, 8004f28 <__swbuf_r+0x74>
 8004eee:	68a3      	ldr	r3, [r4, #8]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	60a3      	str	r3, [r4, #8]
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	6022      	str	r2, [r4, #0]
 8004efa:	701e      	strb	r6, [r3, #0]
 8004efc:	6962      	ldr	r2, [r4, #20]
 8004efe:	1c43      	adds	r3, r0, #1
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d004      	beq.n	8004f0e <__swbuf_r+0x5a>
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	07db      	lsls	r3, r3, #31
 8004f08:	d506      	bpl.n	8004f18 <__swbuf_r+0x64>
 8004f0a:	2e0a      	cmp	r6, #10
 8004f0c:	d104      	bne.n	8004f18 <__swbuf_r+0x64>
 8004f0e:	4621      	mov	r1, r4
 8004f10:	4628      	mov	r0, r5
 8004f12:	f7ff ffa7 	bl	8004e64 <_fflush_r>
 8004f16:	b938      	cbnz	r0, 8004f28 <__swbuf_r+0x74>
 8004f18:	4638      	mov	r0, r7
 8004f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 f806 	bl	8004f30 <__swsetup_r>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d0d5      	beq.n	8004ed4 <__swbuf_r+0x20>
 8004f28:	f04f 37ff 	mov.w	r7, #4294967295
 8004f2c:	e7f4      	b.n	8004f18 <__swbuf_r+0x64>
	...

08004f30 <__swsetup_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <__swsetup_r+0xac>)
 8004f34:	4605      	mov	r5, r0
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	460c      	mov	r4, r1
 8004f3a:	b118      	cbz	r0, 8004f44 <__swsetup_r+0x14>
 8004f3c:	6a03      	ldr	r3, [r0, #32]
 8004f3e:	b90b      	cbnz	r3, 8004f44 <__swsetup_r+0x14>
 8004f40:	f7ff fa38 	bl	80043b4 <__sinit>
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f4a:	0718      	lsls	r0, r3, #28
 8004f4c:	d422      	bmi.n	8004f94 <__swsetup_r+0x64>
 8004f4e:	06d9      	lsls	r1, r3, #27
 8004f50:	d407      	bmi.n	8004f62 <__swsetup_r+0x32>
 8004f52:	2309      	movs	r3, #9
 8004f54:	602b      	str	r3, [r5, #0]
 8004f56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f5a:	81a3      	strh	r3, [r4, #12]
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f60:	e034      	b.n	8004fcc <__swsetup_r+0x9c>
 8004f62:	0758      	lsls	r0, r3, #29
 8004f64:	d512      	bpl.n	8004f8c <__swsetup_r+0x5c>
 8004f66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f68:	b141      	cbz	r1, 8004f7c <__swsetup_r+0x4c>
 8004f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f6e:	4299      	cmp	r1, r3
 8004f70:	d002      	beq.n	8004f78 <__swsetup_r+0x48>
 8004f72:	4628      	mov	r0, r5
 8004f74:	f7ff fb24 	bl	80045c0 <_free_r>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	6363      	str	r3, [r4, #52]	; 0x34
 8004f7c:	89a3      	ldrh	r3, [r4, #12]
 8004f7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f82:	81a3      	strh	r3, [r4, #12]
 8004f84:	2300      	movs	r3, #0
 8004f86:	6063      	str	r3, [r4, #4]
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	f043 0308 	orr.w	r3, r3, #8
 8004f92:	81a3      	strh	r3, [r4, #12]
 8004f94:	6923      	ldr	r3, [r4, #16]
 8004f96:	b94b      	cbnz	r3, 8004fac <__swsetup_r+0x7c>
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa2:	d003      	beq.n	8004fac <__swsetup_r+0x7c>
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f000 f850 	bl	800504c <__smakebuf_r>
 8004fac:	89a0      	ldrh	r0, [r4, #12]
 8004fae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fb2:	f010 0301 	ands.w	r3, r0, #1
 8004fb6:	d00a      	beq.n	8004fce <__swsetup_r+0x9e>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60a3      	str	r3, [r4, #8]
 8004fbc:	6963      	ldr	r3, [r4, #20]
 8004fbe:	425b      	negs	r3, r3
 8004fc0:	61a3      	str	r3, [r4, #24]
 8004fc2:	6923      	ldr	r3, [r4, #16]
 8004fc4:	b943      	cbnz	r3, 8004fd8 <__swsetup_r+0xa8>
 8004fc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fca:	d1c4      	bne.n	8004f56 <__swsetup_r+0x26>
 8004fcc:	bd38      	pop	{r3, r4, r5, pc}
 8004fce:	0781      	lsls	r1, r0, #30
 8004fd0:	bf58      	it	pl
 8004fd2:	6963      	ldrpl	r3, [r4, #20]
 8004fd4:	60a3      	str	r3, [r4, #8]
 8004fd6:	e7f4      	b.n	8004fc2 <__swsetup_r+0x92>
 8004fd8:	2000      	movs	r0, #0
 8004fda:	e7f7      	b.n	8004fcc <__swsetup_r+0x9c>
 8004fdc:	20000064 	.word	0x20000064

08004fe0 <_sbrk_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4d06      	ldr	r5, [pc, #24]	; (8004ffc <_sbrk_r+0x1c>)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4608      	mov	r0, r1
 8004fea:	602b      	str	r3, [r5, #0]
 8004fec:	f7fb fe1c 	bl	8000c28 <_sbrk>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_sbrk_r+0x1a>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_sbrk_r+0x1a>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	20000270 	.word	0x20000270

08005000 <__swhatbuf_r>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	460c      	mov	r4, r1
 8005004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005008:	2900      	cmp	r1, #0
 800500a:	b096      	sub	sp, #88	; 0x58
 800500c:	4615      	mov	r5, r2
 800500e:	461e      	mov	r6, r3
 8005010:	da0d      	bge.n	800502e <__swhatbuf_r+0x2e>
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005018:	f04f 0100 	mov.w	r1, #0
 800501c:	bf0c      	ite	eq
 800501e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005022:	2340      	movne	r3, #64	; 0x40
 8005024:	2000      	movs	r0, #0
 8005026:	6031      	str	r1, [r6, #0]
 8005028:	602b      	str	r3, [r5, #0]
 800502a:	b016      	add	sp, #88	; 0x58
 800502c:	bd70      	pop	{r4, r5, r6, pc}
 800502e:	466a      	mov	r2, sp
 8005030:	f000 f848 	bl	80050c4 <_fstat_r>
 8005034:	2800      	cmp	r0, #0
 8005036:	dbec      	blt.n	8005012 <__swhatbuf_r+0x12>
 8005038:	9901      	ldr	r1, [sp, #4]
 800503a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800503e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005042:	4259      	negs	r1, r3
 8005044:	4159      	adcs	r1, r3
 8005046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800504a:	e7eb      	b.n	8005024 <__swhatbuf_r+0x24>

0800504c <__smakebuf_r>:
 800504c:	898b      	ldrh	r3, [r1, #12]
 800504e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005050:	079d      	lsls	r5, r3, #30
 8005052:	4606      	mov	r6, r0
 8005054:	460c      	mov	r4, r1
 8005056:	d507      	bpl.n	8005068 <__smakebuf_r+0x1c>
 8005058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	2301      	movs	r3, #1
 8005062:	6163      	str	r3, [r4, #20]
 8005064:	b002      	add	sp, #8
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	ab01      	add	r3, sp, #4
 800506a:	466a      	mov	r2, sp
 800506c:	f7ff ffc8 	bl	8005000 <__swhatbuf_r>
 8005070:	9900      	ldr	r1, [sp, #0]
 8005072:	4605      	mov	r5, r0
 8005074:	4630      	mov	r0, r6
 8005076:	f7ff fb0f 	bl	8004698 <_malloc_r>
 800507a:	b948      	cbnz	r0, 8005090 <__smakebuf_r+0x44>
 800507c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005080:	059a      	lsls	r2, r3, #22
 8005082:	d4ef      	bmi.n	8005064 <__smakebuf_r+0x18>
 8005084:	f023 0303 	bic.w	r3, r3, #3
 8005088:	f043 0302 	orr.w	r3, r3, #2
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	e7e3      	b.n	8005058 <__smakebuf_r+0xc>
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	6020      	str	r0, [r4, #0]
 8005094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	9b00      	ldr	r3, [sp, #0]
 800509c:	6163      	str	r3, [r4, #20]
 800509e:	9b01      	ldr	r3, [sp, #4]
 80050a0:	6120      	str	r0, [r4, #16]
 80050a2:	b15b      	cbz	r3, 80050bc <__smakebuf_r+0x70>
 80050a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050a8:	4630      	mov	r0, r6
 80050aa:	f000 f81d 	bl	80050e8 <_isatty_r>
 80050ae:	b128      	cbz	r0, 80050bc <__smakebuf_r+0x70>
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	81a3      	strh	r3, [r4, #12]
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	431d      	orrs	r5, r3
 80050c0:	81a5      	strh	r5, [r4, #12]
 80050c2:	e7cf      	b.n	8005064 <__smakebuf_r+0x18>

080050c4 <_fstat_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4d07      	ldr	r5, [pc, #28]	; (80050e4 <_fstat_r+0x20>)
 80050c8:	2300      	movs	r3, #0
 80050ca:	4604      	mov	r4, r0
 80050cc:	4608      	mov	r0, r1
 80050ce:	4611      	mov	r1, r2
 80050d0:	602b      	str	r3, [r5, #0]
 80050d2:	f7fb fd80 	bl	8000bd6 <_fstat>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	d102      	bne.n	80050e0 <_fstat_r+0x1c>
 80050da:	682b      	ldr	r3, [r5, #0]
 80050dc:	b103      	cbz	r3, 80050e0 <_fstat_r+0x1c>
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	bd38      	pop	{r3, r4, r5, pc}
 80050e2:	bf00      	nop
 80050e4:	20000270 	.word	0x20000270

080050e8 <_isatty_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d06      	ldr	r5, [pc, #24]	; (8005104 <_isatty_r+0x1c>)
 80050ec:	2300      	movs	r3, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	f7fb fd7f 	bl	8000bf6 <_isatty>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_isatty_r+0x1a>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_isatty_r+0x1a>
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	20000270 	.word	0x20000270

08005108 <_init>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	bf00      	nop
 800510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510e:	bc08      	pop	{r3}
 8005110:	469e      	mov	lr, r3
 8005112:	4770      	bx	lr

08005114 <_fini>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr
