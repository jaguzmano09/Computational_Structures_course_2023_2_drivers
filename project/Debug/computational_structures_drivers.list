
computational_structures_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005284  08005284  00015284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005320  08005320  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005328  08005328  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08005398  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08005398  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce5a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000207a  00000000  00000000  0002cf35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad8  00000000  00000000  0002efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000083b  00000000  00000000  0002fa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a70  00000000  00000000  000302c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d559  00000000  00000000  00056d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9a84  00000000  00000000  0006428c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003274  00000000  00000000  0014dd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d4  00000000  00000000  00150f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800526c 	.word	0x0800526c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800526c 	.word	0x0800526c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	ring_buffer_put(&ring_buffer_uart_rx, rx_data);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <HAL_UART_RxCpltCallback+0x28>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <HAL_UART_RxCpltCallback+0x2c>)
 800057c:	f000 fa4f 	bl	8000a1e <ring_buffer_put>
	HAL_UART_Receive_IT(&huart2, &rx_data,1);
 8000580:	2201      	movs	r2, #1
 8000582:	4904      	ldr	r1, [pc, #16]	; (8000594 <HAL_UART_RxCpltCallback+0x28>)
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <HAL_UART_RxCpltCallback+0x30>)
 8000586:	f002 fc5d 	bl	8002e44 <HAL_UART_Receive_IT>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000128 	.word	0x20000128
 8000598:	2000011c 	.word	0x2000011c
 800059c:	20000084 	.word	0x20000084

080005a0 <_write>:

int _write(int file, char *ptr, int len)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	68b9      	ldr	r1, [r7, #8]
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <_write+0x28>)
 80005b8:	f002 fbba 	bl	8002d30 <HAL_UART_Transmit>
	return len;
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000084 	.word	0x20000084

080005cc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	  uint16_t column_1=(COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin);
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <HAL_GPIO_EXTI_Callback+0x58>)
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005e0:	81fb      	strh	r3, [r7, #14]
	  uint16_t column_2=(COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin);
 80005e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ee:	81bb      	strh	r3, [r7, #12]
	  uint16_t column_3=(COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin);
 80005f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005fc:	817b      	strh	r3, [r7, #10]
	  uint16_t column_4=(COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin);
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	b29b      	uxth	r3, r3
 8000604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000608:	813b      	strh	r3, [r7, #8]
	  printf("Keys: %x,%x,%x,%x\r\n",column_1,column_2,column_3,column_4);
 800060a:	89f9      	ldrh	r1, [r7, #14]
 800060c:	89ba      	ldrh	r2, [r7, #12]
 800060e:	8978      	ldrh	r0, [r7, #10]
 8000610:	893b      	ldrh	r3, [r7, #8]
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4603      	mov	r3, r0
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <HAL_GPIO_EXTI_Callback+0x60>)
 8000618:	f003 ffb4 	bl	8004584 <iprintf>
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	48000400 	.word	0x48000400
 8000628:	48000800 	.word	0x48000800
 800062c:	08005284 	.word	0x08005284

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000634:	b087      	sub	sp, #28
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fc02 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f894 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f914 	bl	800086c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000644:	f000 f8e2 	bl	800080c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 16);
 8000648:	2210      	movs	r2, #16
 800064a:	4940      	ldr	r1, [pc, #256]	; (800074c <main+0x11c>)
 800064c:	4840      	ldr	r0, [pc, #256]	; (8000750 <main+0x120>)
 800064e:	f000 f9ca 	bl	80009e6 <ring_buffer_init>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	493f      	ldr	r1, [pc, #252]	; (8000754 <main+0x124>)
 8000656:	4840      	ldr	r0, [pc, #256]	; (8000758 <main+0x128>)
 8000658:	f002 fbf4 	bl	8002e44 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  ROW_1_GPIO_Port->BSRR=ROW_1_Pin;
 800065c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000664:	619a      	str	r2, [r3, #24]
  ROW_2_GPIO_Port->BSRR=ROW_2_Pin;
 8000666:	4b3d      	ldr	r3, [pc, #244]	; (800075c <main+0x12c>)
 8000668:	2208      	movs	r2, #8
 800066a:	619a      	str	r2, [r3, #24]
  ROW_3_GPIO_Port->BSRR=ROW_3_Pin;
 800066c:	4b3b      	ldr	r3, [pc, #236]	; (800075c <main+0x12c>)
 800066e:	2220      	movs	r2, #32
 8000670:	619a      	str	r2, [r3, #24]
  ROW_4_GPIO_Port->BSRR=ROW_4_Pin;
 8000672:	4b3a      	ldr	r3, [pc, #232]	; (800075c <main+0x12c>)
 8000674:	2210      	movs	r2, #16
 8000676:	619a      	str	r2, [r3, #24]

  while (1)
  {

	  uint16_t column_1=(COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin);
 8000678:	4b38      	ldr	r3, [pc, #224]	; (800075c <main+0x12c>)
 800067a:	691b      	ldr	r3, [r3, #16]
 800067c:	b29b      	uxth	r3, r3
 800067e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000682:	82bb      	strh	r3, [r7, #20]
	  uint16_t column_2=(COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin);
 8000684:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	b29b      	uxth	r3, r3
 800068c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000690:	827b      	strh	r3, [r7, #18]
	  uint16_t column_3=(COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin);
 8000692:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	b29b      	uxth	r3, r3
 800069a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800069e:	823b      	strh	r3, [r7, #16]
	  uint16_t column_4=(COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin);
 80006a0:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <main+0x130>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	81fb      	strh	r3, [r7, #14]


	 uint16_t size = ring_buffer_size(&ring_buffer_uart_rx);
 80006ac:	4828      	ldr	r0, [pc, #160]	; (8000750 <main+0x120>)
 80006ae:	f000 fa02 	bl	8000ab6 <ring_buffer_size>
 80006b2:	4603      	mov	r3, r0
 80006b4:	81bb      	strh	r3, [r7, #12]

	 if(size != 0){
 80006b6:	89bb      	ldrh	r3, [r7, #12]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d042      	beq.n	8000742 <main+0x112>
 80006bc:	466b      	mov	r3, sp
 80006be:	461e      	mov	r6, r3
		 uint8_t rx_data[size+1];
 80006c0:	89bb      	ldrh	r3, [r7, #12]
 80006c2:	1c59      	adds	r1, r3, #1
 80006c4:	1e4b      	subs	r3, r1, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	460a      	mov	r2, r1
 80006ca:	2300      	movs	r3, #0
 80006cc:	4614      	mov	r4, r2
 80006ce:	461d      	mov	r5, r3
 80006d0:	f04f 0200 	mov.w	r2, #0
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	00eb      	lsls	r3, r5, #3
 80006da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006de:	00e2      	lsls	r2, r4, #3
 80006e0:	460a      	mov	r2, r1
 80006e2:	2300      	movs	r3, #0
 80006e4:	4690      	mov	r8, r2
 80006e6:	4699      	mov	r9, r3
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006fc:	460b      	mov	r3, r1
 80006fe:	3307      	adds	r3, #7
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	ebad 0d03 	sub.w	sp, sp, r3
 8000708:	466b      	mov	r3, sp
 800070a:	3300      	adds	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
		 for(uint16_t idx=0; idx < size; idx++){
 800070e:	2300      	movs	r3, #0
 8000710:	82fb      	strh	r3, [r7, #22]
 8000712:	e009      	b.n	8000728 <main+0xf8>
			 ring_buffer_get(&ring_buffer_uart_rx, &rx_data[idx]);
 8000714:	8afb      	ldrh	r3, [r7, #22]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	4619      	mov	r1, r3
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <main+0x120>)
 800071e:	f000 f9bb 	bl	8000a98 <ring_buffer_get>
		 for(uint16_t idx=0; idx < size; idx++){
 8000722:	8afb      	ldrh	r3, [r7, #22]
 8000724:	3301      	adds	r3, #1
 8000726:	82fb      	strh	r3, [r7, #22]
 8000728:	8afa      	ldrh	r2, [r7, #22]
 800072a:	89bb      	ldrh	r3, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	d3f1      	bcc.n	8000714 <main+0xe4>
		 }
		 rx_data[size] = 0;
 8000730:	89bb      	ldrh	r3, [r7, #12]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	2100      	movs	r1, #0
 8000736:	54d1      	strb	r1, [r2, r3]
		 printf("Rec: %s\r\n", rx_data);
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	480a      	ldr	r0, [pc, #40]	; (8000764 <main+0x134>)
 800073c:	f003 ff22 	bl	8004584 <iprintf>
 8000740:	46b5      	mov	sp, r6

	 }
	 HAL_Delay(100);
 8000742:	2064      	movs	r0, #100	; 0x64
 8000744:	f000 fbf8 	bl	8000f38 <HAL_Delay>
  {
 8000748:	e796      	b.n	8000678 <main+0x48>
 800074a:	bf00      	nop
 800074c:	2000010c 	.word	0x2000010c
 8000750:	2000011c 	.word	0x2000011c
 8000754:	20000128 	.word	0x20000128
 8000758:	20000084 	.word	0x20000084
 800075c:	48000400 	.word	0x48000400
 8000760:	48000800 	.word	0x48000800
 8000764:	08005298 	.word	0x08005298

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b096      	sub	sp, #88	; 0x58
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2244      	movs	r2, #68	; 0x44
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f003 ff59 	bl	800462e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800078a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800078e:	f000 ff6f 	bl	8001670 <HAL_PWREx_ControlVoltageScaling>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000798:	f000 f920 	bl	80009dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	2310      	movs	r3, #16
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ae:	2302      	movs	r3, #2
 80007b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007b6:	230a      	movs	r3, #10
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ba:	2307      	movs	r3, #7
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 ffa6 	bl	800171c <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007d6:	f000 f901 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2303      	movs	r3, #3
 80007e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	2104      	movs	r1, #4
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fb6e 	bl	8001ed4 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007fe:	f000 f8ed 	bl	80009dc <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3758      	adds	r7, #88	; 0x58
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000812:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_USART2_UART_Init+0x5c>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000850:	f002 fa20 	bl	8002c94 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f8bf 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000084 	.word	0x20000084
 8000868:	40004400 	.word	0x40004400

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <MX_GPIO_Init+0x164>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	4b4d      	ldr	r3, [pc, #308]	; (80009d0 <MX_GPIO_Init+0x164>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a4c      	ldr	r2, [pc, #304]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a46      	ldr	r2, [pc, #280]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a40      	ldr	r2, [pc, #256]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <MX_GPIO_Init+0x164>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROW_1_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f000 fe82 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2138      	movs	r1, #56	; 0x38
 80008f4:	4837      	ldr	r0, [pc, #220]	; (80009d4 <MX_GPIO_Init+0x168>)
 80008f6:	f000 fe7d 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000900:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4831      	ldr	r0, [pc, #196]	; (80009d8 <MX_GPIO_Init+0x16c>)
 8000912:	f000 fcc5 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ROW_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ROW_1_Pin;
 8000916:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f000 fcb5 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_1_Pin */
  GPIO_InitStruct.Pin = COLUMN_1_Pin;
 8000936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000942:	2302      	movs	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_1_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4821      	ldr	r0, [pc, #132]	; (80009d4 <MX_GPIO_Init+0x168>)
 800094e:	f000 fca7 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_4_Pin */
  GPIO_InitStruct.Pin = COLUMN_4_Pin;
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000956:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_4_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_GPIO_Init+0x16c>)
 8000968:	f000 fc9a 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN_2_Pin COLUMN_3_Pin */
  GPIO_InitStruct.Pin = COLUMN_2_Pin|COLUMN_3_Pin;
 800096c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f000 fc8b 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 800098a:	2338      	movs	r3, #56	; 0x38
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_GPIO_Init+0x168>)
 80009a2:	f000 fc7d 	bl	80012a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2017      	movs	r0, #23
 80009ac:	f000 fbc3 	bl	8001136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009b0:	2017      	movs	r0, #23
 80009b2:	f000 fbdc 	bl	800116e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2028      	movs	r0, #40	; 0x28
 80009bc:	f000 fbbb 	bl	8001136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c0:	2028      	movs	r0, #40	; 0x28
 80009c2:	f000 fbd4 	bl	800116e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000400 	.word	0x48000400
 80009d8:	48000800 	.word	0x48000800

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>

080009e6 <ring_buffer_init>:


/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity){
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	4613      	mov	r3, r2
 80009f2:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	601a      	str	r2, [r3, #0]
	ring_buffer-> capacity = capacity;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	88fa      	ldrh	r2, [r7, #6]
 80009fe:	811a      	strh	r2, [r3, #8]
	ring_buffer->head = 0;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2200      	movs	r2, #0
 8000a04:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	729a      	strb	r2, [r3, #10]
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <ring_buffer_put>:

/**
 * @brief This function adds a data in the ring buffer
 * @param data: the value to be added
*/
uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data){
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	460b      	mov	r3, r1
 8000a28:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	8892      	ldrh	r2, [r2, #4]
 8000a32:	4413      	add	r3, r2
 8000a34:	78fa      	ldrb	r2, [r7, #3]
 8000a36:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head+1) % ring_buffer->capacity;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	889b      	ldrh	r3, [r3, #4]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	8912      	ldrh	r2, [r2, #8]
 8000a42:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a46:	fb01 f202 	mul.w	r2, r1, r2
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	809a      	strh	r2, [r3, #4]

	if(ring_buffer->is_full != 0){
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7a9b      	ldrb	r3, [r3, #10]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00c      	beq.n	8000a74 <ring_buffer_put+0x56>
		ring_buffer->tail = (ring_buffer->tail+1) % ring_buffer->capacity;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	88db      	ldrh	r3, [r3, #6]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	8912      	ldrh	r2, [r2, #8]
 8000a64:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a68:	fb01 f202 	mul.w	r2, r1, r2
 8000a6c:	1a9b      	subs	r3, r3, r2
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	80da      	strh	r2, [r3, #6]
	}

	if(ring_buffer->head == ring_buffer->tail){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	889a      	ldrh	r2, [r3, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	88db      	ldrh	r3, [r3, #6]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d104      	bne.n	8000a8a <ring_buffer_put+0x6c>
		ring_buffer->is_full = 1;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2201      	movs	r2, #1
 8000a84:	729a      	strb	r2, [r3, #10]
		return 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <ring_buffer_put+0x6e>
	}
	return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <ring_buffer_get>:
/**
 * @brief This function read data in order to add it to the ring buffer
 * @param data: the pointer to the address to write the data
*/
uint8_t ring_buffer_get(ring_buffer_t *ring_buffer, uint8_t *data){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
		*data = ring_buffer->buffer[ring_buffer->tail];
		ring_buffer->tail = (ring_buffer->tail+1) % ring_buffer->capacity;
		ring_buffer->is_full = 0;
		return 1;
	}
	ring_buffer->is_full = 0;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	729a      	strb	r2, [r3, #10]
	return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <ring_buffer_size>:
/**
 * @brief This function returns the size of the ring_buffer
*/
uint8_t ring_buffer_size(ring_buffer_t *ring_buffer){
 8000ab6:	b480      	push	{r7}
 8000ab8:	b085      	sub	sp, #20
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
	uint16_t size=0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	81fb      	strh	r3, [r7, #14]
	if((ring_buffer->is_full == 0 )&& (ring_buffer->tail <= ring_buffer->head)){
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7a9b      	ldrb	r3, [r3, #10]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10c      	bne.n	8000ae4 <ring_buffer_size+0x2e>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	88da      	ldrh	r2, [r3, #6]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	889b      	ldrh	r3, [r3, #4]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d806      	bhi.n	8000ae4 <ring_buffer_size+0x2e>
		size = ring_buffer->head-ring_buffer->tail;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	889a      	ldrh	r2, [r3, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	88db      	ldrh	r3, [r3, #6]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	81fb      	strh	r3, [r7, #14]
 8000ae2:	e009      	b.n	8000af8 <ring_buffer_size+0x42>
	}else{
		size = ring_buffer->head + (ring_buffer->capacity - ring_buffer->tail);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	889a      	ldrh	r2, [r3, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	8919      	ldrh	r1, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	88db      	ldrh	r3, [r3, #6]
 8000af0:	1acb      	subs	r3, r1, r3
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	4413      	add	r3, r2
 8000af6:	81fb      	strh	r3, [r7, #14]
	}
	return size;
 8000af8:	89fb      	ldrh	r3, [r7, #14]
 8000afa:	b2db      	uxtb	r3, r3
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x44>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0ac      	sub	sp, #176	; 0xb0
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2288      	movs	r2, #136	; 0x88
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 fd5c 	bl	800462e <memset>
  if(huart->Instance==USART2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a25      	ldr	r2, [pc, #148]	; (8000c10 <HAL_UART_MspInit+0xc0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d143      	bne.n	8000c08 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 fbc5 	bl	800231c <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b98:	f7ff ff20 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba0:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb8:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bcc:	230c      	movs	r3, #12
 8000bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be4:	2307      	movs	r3, #7
 8000be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f000 fb54 	bl	80012a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2026      	movs	r0, #38	; 0x26
 8000bfe:	f000 fa9a 	bl	8001136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c02:	2026      	movs	r0, #38	; 0x26
 8000c04:	f000 fab3 	bl	800116e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c08:	bf00      	nop
 8000c0a:	37b0      	adds	r7, #176	; 0xb0
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40004400 	.word	0x40004400
 8000c14:	40021000 	.word	0x40021000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f948 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_4_Pin);
 8000c70:	2080      	movs	r0, #128	; 0x80
 8000c72:	f000 fcd7 	bl	8001624 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_2_Pin);
 8000c76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c7a:	f000 fcd3 	bl	8001624 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_3_Pin);
 8000c7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c82:	f000 fccf 	bl	8001624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <USART2_IRQHandler+0x10>)
 8000c92:	f002 f923 	bl	8002edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000084 	.word	0x20000084

08000ca0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_1_Pin);
 8000ca4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ca8:	f000 fcbc 	bl	8001624 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cb0:	f000 fcb8 	bl	8001624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	e00a      	b.n	8000ce0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cca:	f3af 8000 	nop.w
 8000cce:	4601      	mov	r1, r0
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	b2ca      	uxtb	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbf0      	blt.n	8000cca <_read+0x12>
  }

  return len;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_isatty>:

int _isatty(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f003 fc9e 	bl	80046cc <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20018000 	.word	0x20018000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	2000012c 	.word	0x2000012c
 8000dc4:	20000280 	.word	0x20000280

08000dc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df0:	f7ff ffea 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	; (8000e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f003 fc5d 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1e:	f7ff fc07 	bl	8000630 <main>

08000e22 <LoopForever>:

LoopForever:
    b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e30:	08005330 	.word	0x08005330
  ldr r2, =_sbss
 8000e34:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e38:	20000280 	.word	0x20000280

08000e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_2_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_Init+0x3c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_Init+0x3c>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f000 f962 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 f80f 	bl	8000e80 <HAL_InitTick>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	e001      	b.n	8000e72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6e:	f7ff fe4b 	bl	8000b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e72:	79fb      	ldrb	r3, [r7, #7]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40022000 	.word	0x40022000

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_InitTick+0x6c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d023      	beq.n	8000edc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_InitTick+0x70>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_InitTick+0x6c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f96d 	bl	800118a <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10f      	bne.n	8000ed6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d809      	bhi.n	8000ed0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f937 	bl	8001136 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_InitTick+0x74>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e007      	b.n	8000ee0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e004      	b.n	8000ee0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	e001      	b.n	8000ee0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000130 	.word	0x20000130

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000130 	.word	0x20000130

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ec:	d301      	bcc.n	80010f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00f      	b.n	8001112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <SysTick_Config+0x40>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fa:	210f      	movs	r1, #15
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f7ff ff8e 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x40>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x40>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff29 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff3e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff8e 	bl	8001074 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff31 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa2 	bl	80010dc <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d008      	beq.n	80011cc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2204      	movs	r2, #4
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e022      	b.n	8001212 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 020e 	bic.w	r2, r2, #14
 80011da:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	f003 021c 	and.w	r2, r3, #28
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f202 	lsl.w	r2, r1, r2
 80011fe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d005      	beq.n	8001242 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2204      	movs	r2, #4
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e029      	b.n	8001296 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 020e 	bic.w	r2, r2, #14
 8001250:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f003 021c 	and.w	r2, r3, #28
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	2101      	movs	r1, #1
 8001270:	fa01 f202 	lsl.w	r2, r1, r2
 8001274:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	4798      	blx	r3
    }
  }
  return status;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	e17f      	b.n	80015b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8171 	beq.w	80015aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d005      	beq.n	80012e0 <HAL_GPIO_Init+0x40>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d130      	bne.n	8001342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001316:	2201      	movs	r2, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 0201 	and.w	r2, r3, #1
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b03      	cmp	r3, #3
 800134c:	d118      	bne.n	8001380 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	08db      	lsrs	r3, r3, #3
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	6939      	ldr	r1, [r7, #16]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80ac 	beq.w	80015aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	4b5f      	ldr	r3, [pc, #380]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	4a5e      	ldr	r2, [pc, #376]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6613      	str	r3, [r2, #96]	; 0x60
 800145e:	4b5c      	ldr	r3, [pc, #368]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800146a:	4a5a      	ldr	r2, [pc, #360]	; (80015d4 <HAL_GPIO_Init+0x334>)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001494:	d025      	beq.n	80014e2 <HAL_GPIO_Init+0x242>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4f      	ldr	r2, [pc, #316]	; (80015d8 <HAL_GPIO_Init+0x338>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d01f      	beq.n	80014de <HAL_GPIO_Init+0x23e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4e      	ldr	r2, [pc, #312]	; (80015dc <HAL_GPIO_Init+0x33c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d019      	beq.n	80014da <HAL_GPIO_Init+0x23a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4d      	ldr	r2, [pc, #308]	; (80015e0 <HAL_GPIO_Init+0x340>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0x236>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4c      	ldr	r2, [pc, #304]	; (80015e4 <HAL_GPIO_Init+0x344>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00d      	beq.n	80014d2 <HAL_GPIO_Init+0x232>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4b      	ldr	r2, [pc, #300]	; (80015e8 <HAL_GPIO_Init+0x348>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <HAL_GPIO_Init+0x22e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4a      	ldr	r2, [pc, #296]	; (80015ec <HAL_GPIO_Init+0x34c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x22a>
 80014c6:	2306      	movs	r3, #6
 80014c8:	e00c      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014ca:	2307      	movs	r3, #7
 80014cc:	e00a      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014e2:	2300      	movs	r3, #0
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	f002 0203 	and.w	r2, r2, #3
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014f4:	4937      	ldr	r1, [pc, #220]	; (80015d4 <HAL_GPIO_Init+0x334>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_GPIO_Init+0x350>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001526:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <HAL_GPIO_Init+0x350>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_GPIO_Init+0x350>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001550:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <HAL_GPIO_Init+0x350>)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_GPIO_Init+0x350>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_GPIO_Init+0x350>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_GPIO_Init+0x350>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_GPIO_Init+0x350>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f47f ae78 	bne.w	80012b0 <HAL_GPIO_Init+0x10>
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	48000400 	.word	0x48000400
 80015dc:	48000800 	.word	0x48000800
 80015e0:	48000c00 	.word	0x48000c00
 80015e4:	48001000 	.word	0x48001000
 80015e8:	48001400 	.word	0x48001400
 80015ec:	48001800 	.word	0x48001800
 80015f0:	40010400 	.word	0x40010400

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001610:	e002      	b.n	8001618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ffc2 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40010400 	.word	0x40010400

08001654 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <HAL_PWREx_GetVoltageRange+0x18>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40007000 	.word	0x40007000

08001670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800167e:	d130      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168c:	d038      	beq.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001696:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2232      	movs	r2, #50	; 0x32
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	0c9b      	lsrs	r3, r3, #18
 80016b0:	3301      	adds	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b4:	e002      	b.n	80016bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c8:	d102      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f2      	bne.n	80016b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016dc:	d110      	bne.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e00f      	b.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ee:	d007      	beq.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016f8:	4a05      	ldr	r2, [pc, #20]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40007000 	.word	0x40007000
 8001714:	20000000 	.word	0x20000000
 8001718:	431bde83 	.word	0x431bde83

0800171c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e3ca      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800172e:	4b97      	ldr	r3, [pc, #604]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001738:	4b94      	ldr	r3, [pc, #592]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80e4 	beq.w	8001918 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_RCC_OscConfig+0x4a>
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	2b0c      	cmp	r3, #12
 800175a:	f040 808b 	bne.w	8001874 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b01      	cmp	r3, #1
 8001762:	f040 8087 	bne.w	8001874 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001766:	4b89      	ldr	r3, [pc, #548]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_RCC_OscConfig+0x62>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e3a2      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1a      	ldr	r2, [r3, #32]
 8001782:	4b82      	ldr	r3, [pc, #520]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <HAL_RCC_OscConfig+0x7c>
 800178e:	4b7f      	ldr	r3, [pc, #508]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001796:	e005      	b.n	80017a4 <HAL_RCC_OscConfig+0x88>
 8001798:	4b7c      	ldr	r3, [pc, #496]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800179a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d223      	bcs.n	80017f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fd55 	bl	800225c <RCC_SetFlashLatencyFromMSIRange>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e383      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017bc:	4b73      	ldr	r3, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a72      	ldr	r2, [pc, #456]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b70      	ldr	r3, [pc, #448]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	496d      	ldr	r1, [pc, #436]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017da:	4b6c      	ldr	r3, [pc, #432]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	4968      	ldr	r1, [pc, #416]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
 80017ee:	e025      	b.n	800183c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f0:	4b66      	ldr	r3, [pc, #408]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a65      	ldr	r2, [pc, #404]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b63      	ldr	r3, [pc, #396]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4960      	ldr	r1, [pc, #384]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	495b      	ldr	r1, [pc, #364]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 fd15 	bl	800225c <RCC_SetFlashLatencyFromMSIRange>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e343      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800183c:	f000 fc4a 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8001840:	4602      	mov	r2, r0
 8001842:	4b52      	ldr	r3, [pc, #328]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	4950      	ldr	r1, [pc, #320]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 800184e:	5ccb      	ldrb	r3, [r1, r3]
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
 8001858:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <HAL_RCC_OscConfig+0x278>)
 800185a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800185c:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <HAL_RCC_OscConfig+0x27c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fb0d 	bl	8000e80 <HAL_InitTick>
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d052      	beq.n	8001916 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	e327      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d032      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800187c:	4b43      	ldr	r3, [pc, #268]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a42      	ldr	r2, [pc, #264]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001888:	f7ff fb4a 	bl	8000f20 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001890:	f7ff fb46 	bl	8000f20 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e310      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a36      	ldr	r2, [pc, #216]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4931      	ldr	r1, [pc, #196]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018cc:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	492c      	ldr	r1, [pc, #176]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
 80018e0:	e01a      	b.n	8001918 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a29      	ldr	r2, [pc, #164]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018e8:	f023 0301 	bic.w	r3, r3, #1
 80018ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fb17 	bl	8000f20 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f6:	f7ff fb13 	bl	8000f20 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e2dd      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001908:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0x1da>
 8001914:	e000      	b.n	8001918 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001916:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d074      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b08      	cmp	r3, #8
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x21a>
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b0c      	cmp	r3, #12
 800192e:	d10e      	bne.n	800194e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d10b      	bne.n	800194e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d064      	beq.n	8001a0c <HAL_RCC_OscConfig+0x2f0>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d160      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e2ba      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001956:	d106      	bne.n	8001966 <HAL_RCC_OscConfig+0x24a>
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800195e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e026      	b.n	80019b4 <HAL_RCC_OscConfig+0x298>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800196e:	d115      	bne.n	800199c <HAL_RCC_OscConfig+0x280>
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a05      	ldr	r2, [pc, #20]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a02      	ldr	r2, [pc, #8]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e014      	b.n	80019b4 <HAL_RCC_OscConfig+0x298>
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	080052a4 	.word	0x080052a4
 8001994:	20000000 	.word	0x20000000
 8001998:	20000004 	.word	0x20000004
 800199c:	4ba0      	ldr	r3, [pc, #640]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a9f      	ldr	r2, [pc, #636]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b9d      	ldr	r3, [pc, #628]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a9c      	ldr	r2, [pc, #624]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fab0 	bl	8000f20 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff faac 	bl	8000f20 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e276      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d6:	4b92      	ldr	r3, [pc, #584]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x2a8>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff fa9c 	bl	8000f20 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff fa98 	bl	8000f20 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e262      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fe:	4b88      	ldr	r3, [pc, #544]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x2d0>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d060      	beq.n	8001adc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_OscConfig+0x310>
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d119      	bne.n	8001a5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d116      	bne.n	8001a5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2c:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_OscConfig+0x328>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e23f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	4973      	ldr	r1, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a58:	e040      	b.n	8001adc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d023      	beq.n	8001aaa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a62:	4b6f      	ldr	r3, [pc, #444]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6e      	ldr	r2, [pc, #440]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fa57 	bl	8000f20 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff fa53 	bl	8000f20 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e21d      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a88:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b62      	ldr	r3, [pc, #392]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	495f      	ldr	r1, [pc, #380]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e018      	b.n	8001adc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fa33 	bl	8000f20 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abe:	f7ff fa2f 	bl	8000f20 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e1f9      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad0:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d03c      	beq.n	8001b62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af0:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af6:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff fa0e 	bl	8000f20 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff fa0a 	bl	8000f20 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e1d4      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b1a:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ef      	beq.n	8001b08 <HAL_RCC_OscConfig+0x3ec>
 8001b28:	e01b      	b.n	8001b62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b30:	4a3b      	ldr	r2, [pc, #236]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f023 0301 	bic.w	r3, r3, #1
 8001b36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f9f1 	bl	8000f20 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b42:	f7ff f9ed 	bl	8000f20 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1b7      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b54:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ef      	bne.n	8001b42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80a6 	beq.w	8001cbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10d      	bne.n	8001b9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x508>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d118      	bne.n	8001bda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_RCC_OscConfig+0x508>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <HAL_RCC_OscConfig+0x508>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f9b4 	bl	8000f20 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbc:	f7ff f9b0 	bl	8000f20 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e17a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x508>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d108      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4d8>
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf2:	e029      	b.n	8001c48 <HAL_RCC_OscConfig+0x52c>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d115      	bne.n	8001c28 <HAL_RCC_OscConfig+0x50c>
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c12:	4a03      	ldr	r2, [pc, #12]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1c:	e014      	b.n	8001c48 <HAL_RCC_OscConfig+0x52c>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40007000 	.word	0x40007000
 8001c28:	4b9c      	ldr	r3, [pc, #624]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	4a9b      	ldr	r2, [pc, #620]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c38:	4b98      	ldr	r3, [pc, #608]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	4a97      	ldr	r2, [pc, #604]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d016      	beq.n	8001c7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff f966 	bl	8000f20 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff f962 	bl	8000f20 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e12a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6e:	4b8b      	ldr	r3, [pc, #556]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ed      	beq.n	8001c58 <HAL_RCC_OscConfig+0x53c>
 8001c7c:	e015      	b.n	8001caa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f94f 	bl	8000f20 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7ff f94b 	bl	8000f20 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e113      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c9c:	4b7f      	ldr	r3, [pc, #508]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ed      	bne.n	8001c86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001caa:	7ffb      	ldrb	r3, [r7, #31]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d105      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb0:	4b7a      	ldr	r3, [pc, #488]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	4a79      	ldr	r2, [pc, #484]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80fe 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	f040 80d0 	bne.w	8001e70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cd0:	4b72      	ldr	r3, [pc, #456]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d130      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d127      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d11f      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d10:	2a07      	cmp	r2, #7
 8001d12:	bf14      	ite	ne
 8001d14:	2201      	movne	r2, #1
 8001d16:	2200      	moveq	r2, #0
 8001d18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d113      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d06e      	beq.n	8001e24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b0c      	cmp	r3, #12
 8001d4a:	d069      	beq.n	8001e20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0ad      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d68:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a4b      	ldr	r2, [pc, #300]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d74:	f7ff f8d4 	bl	8000f20 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7ff f8d0 	bl	8000f20 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e09a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8e:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9a:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <HAL_RCC_OscConfig+0x784>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001daa:	3a01      	subs	r2, #1
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001db4:	0212      	lsls	r2, r2, #8
 8001db6:	4311      	orrs	r1, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dbc:	0852      	lsrs	r2, r2, #1
 8001dbe:	3a01      	subs	r2, #1
 8001dc0:	0552      	lsls	r2, r2, #21
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dc8:	0852      	lsrs	r2, r2, #1
 8001dca:	3a01      	subs	r2, #1
 8001dcc:	0652      	lsls	r2, r2, #25
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dd4:	0912      	lsrs	r2, r2, #4
 8001dd6:	0452      	lsls	r2, r2, #17
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	4930      	ldr	r1, [pc, #192]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001de0:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4a2a      	ldr	r2, [pc, #168]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df8:	f7ff f892 	bl	8000f20 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e00:	f7ff f88e 	bl	8000f20 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e058      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e1e:	e050      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e04f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d148      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e48:	f7ff f86a 	bl	8000f20 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7ff f866 	bl	8000f20 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e030      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x734>
 8001e6e:	e028      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d023      	beq.n	8001ebe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7ff f84d 	bl	8000f20 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e88:	e00c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff f849 	bl	8000f20 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d905      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e013      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_OscConfig+0x7b0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ec      	bne.n	8001e8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_OscConfig+0x7b0>)
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	4905      	ldr	r1, [pc, #20]	; (8001ecc <HAL_RCC_OscConfig+0x7b0>)
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_OscConfig+0x7b4>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
 8001ebc:	e001      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	feeefffc 	.word	0xfeeefffc

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0e7      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b75      	ldr	r3, [pc, #468]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d910      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b72      	ldr	r3, [pc, #456]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0207 	bic.w	r2, r3, #7
 8001efe:	4970      	ldr	r1, [pc, #448]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b6e      	ldr	r3, [pc, #440]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0cf      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d908      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4960      	ldr	r1, [pc, #384]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d04c      	beq.n	8001fec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d121      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0a6      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f72:	4b54      	ldr	r3, [pc, #336]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d115      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e09a      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f8a:	4b4e      	ldr	r3, [pc, #312]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e08e      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9a:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e086      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4943      	ldr	r1, [pc, #268]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fbc:	f7fe ffb0 	bl	8000f20 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7fe ffac 	bl	8000f20 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e06e      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d010      	beq.n	800201a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002004:	429a      	cmp	r2, r3
 8002006:	d208      	bcs.n	800201a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	492b      	ldr	r1, [pc, #172]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800201a:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d210      	bcs.n	800204a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 0207 	bic.w	r2, r3, #7
 8002030:	4923      	ldr	r1, [pc, #140]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e036      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	4918      	ldr	r1, [pc, #96]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d009      	beq.n	8002088 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4910      	ldr	r1, [pc, #64]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002088:	f000 f824 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	490b      	ldr	r1, [pc, #44]	; (80020c8 <HAL_RCC_ClockConfig+0x1f4>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 80020a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1fc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fee7 	bl	8000e80 <HAL_InitTick>
 80020b2:	4603      	mov	r3, r0
 80020b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80020b6:	7afb      	ldrb	r3, [r7, #11]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	080052a4 	.word	0x080052a4
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e2:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x34>
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d121      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d11e      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002108:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d107      	bne.n	8002124 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e005      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10d      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002144:	e00a      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d102      	bne.n	8002152 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	e004      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d101      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002158:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800215a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d134      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0xa6>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d003      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0xac>
 8002178:	e005      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800217c:	617b      	str	r3, [r7, #20]
      break;
 800217e:	e005      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002182:	617b      	str	r3, [r7, #20]
      break;
 8002184:	e002      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	617b      	str	r3, [r7, #20]
      break;
 800218a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	3301      	adds	r3, #1
 8002198:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	fb03 f202 	mul.w	r2, r3, r2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	0e5b      	lsrs	r3, r3, #25
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	3301      	adds	r3, #1
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021cc:	69bb      	ldr	r3, [r7, #24]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	080052bc 	.word	0x080052bc
 80021e4:	00f42400 	.word	0x00f42400
 80021e8:	007a1200 	.word	0x007a1200

080021ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000000 	.word	0x20000000

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002208:	f7ff fff0 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4904      	ldr	r1, [pc, #16]	; (800222c <HAL_RCC_GetPCLK1Freq+0x28>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	080052b4 	.word	0x080052b4

08002230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002234:	f7ff ffda 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetPCLK2Freq+0x24>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0adb      	lsrs	r3, r3, #11
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4904      	ldr	r1, [pc, #16]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	080052b4 	.word	0x080052b4

0800225c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002274:	f7ff f9ee 	bl	8001654 <HAL_PWREx_GetVoltageRange>
 8002278:	6178      	str	r0, [r7, #20]
 800227a:	e014      	b.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	4a24      	ldr	r2, [pc, #144]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	; 0x58
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002294:	f7ff f9de 	bl	8001654 <HAL_PWREx_GetVoltageRange>
 8002298:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ac:	d10b      	bne.n	80022c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b80      	cmp	r3, #128	; 0x80
 80022b2:	d919      	bls.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2ba0      	cmp	r3, #160	; 0xa0
 80022b8:	d902      	bls.n	80022c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ba:	2302      	movs	r3, #2
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	e013      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c0:	2301      	movs	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	e010      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b80      	cmp	r3, #128	; 0x80
 80022ca:	d902      	bls.n	80022d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022cc:	2303      	movs	r3, #3
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	e00a      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b80      	cmp	r3, #128	; 0x80
 80022d6:	d102      	bne.n	80022de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022d8:	2302      	movs	r3, #2
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	e004      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b70      	cmp	r3, #112	; 0x70
 80022e2:	d101      	bne.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e4:	2301      	movs	r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 0207 	bic.w	r2, r3, #7
 80022f0:	4909      	ldr	r1, [pc, #36]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	40022000 	.word	0x40022000

0800231c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002324:	2300      	movs	r3, #0
 8002326:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002328:	2300      	movs	r3, #0
 800232a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002334:	2b00      	cmp	r3, #0
 8002336:	d041      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800233c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002340:	d02a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002342:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002346:	d824      	bhi.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800234c:	d008      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800234e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002352:	d81e      	bhi.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235c:	d010      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800235e:	e018      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002360:	4b86      	ldr	r3, [pc, #536]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a85      	ldr	r2, [pc, #532]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800236c:	e015      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fabb 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800237e:	e00c      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3320      	adds	r3, #32
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fba6 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002390:	e003      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	74fb      	strb	r3, [r7, #19]
      break;
 8002396:	e000      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a0:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ae:	4973      	ldr	r1, [pc, #460]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023b6:	e001      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d041      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023d0:	d02a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023d6:	d824      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023dc:	d008      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e2:	d81e      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ec:	d010      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023ee:	e018      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023f0:	4b62      	ldr	r3, [pc, #392]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a61      	ldr	r2, [pc, #388]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023fc:	e015      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fa73 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800240e:	e00c      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3320      	adds	r3, #32
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fb5e 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002420:	e003      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	74fb      	strb	r3, [r7, #19]
      break;
 8002426:	e000      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002430:	4b52      	ldr	r3, [pc, #328]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243e:	494f      	ldr	r1, [pc, #316]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002446:	e001      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80a0 	beq.w	800259a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00d      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4a40      	ldr	r2, [pc, #256]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	6593      	str	r3, [r2, #88]	; 0x58
 8002480:	4b3e      	ldr	r3, [pc, #248]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248c:	2301      	movs	r3, #1
 800248e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a3a      	ldr	r2, [pc, #232]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800249c:	f7fe fd40 	bl	8000f20 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024a2:	e009      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7fe fd3c 	bl	8000f20 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d902      	bls.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	74fb      	strb	r3, [r7, #19]
        break;
 80024b6:	e005      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ef      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d15c      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01f      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d019      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	4a20      	ldr	r2, [pc, #128]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fcfb 	bl	8000f20 <HAL_GetTick>
 800252a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252c:	e00b      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fcf7 	bl	8000f20 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d902      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	74fb      	strb	r3, [r7, #19]
            break;
 8002544:	e006      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ec      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256a:	4904      	ldr	r1, [pc, #16]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002572:	e009      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	74bb      	strb	r3, [r7, #18]
 8002578:	e006      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002588:	7c7b      	ldrb	r3, [r7, #17]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b9e      	ldr	r3, [pc, #632]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	4a9d      	ldr	r2, [pc, #628]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a6:	4b98      	ldr	r3, [pc, #608]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f023 0203 	bic.w	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	4994      	ldr	r1, [pc, #592]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c8:	4b8f      	ldr	r3, [pc, #572]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 020c 	bic.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	498c      	ldr	r1, [pc, #560]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ea:	4b87      	ldr	r3, [pc, #540]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	4983      	ldr	r1, [pc, #524]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800260c:	4b7e      	ldr	r3, [pc, #504]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	497b      	ldr	r1, [pc, #492]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800262e:	4b76      	ldr	r3, [pc, #472]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263c:	4972      	ldr	r1, [pc, #456]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002650:	4b6d      	ldr	r3, [pc, #436]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	496a      	ldr	r1, [pc, #424]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	4961      	ldr	r1, [pc, #388]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002694:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	4959      	ldr	r1, [pc, #356]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b6:	4b54      	ldr	r3, [pc, #336]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c4:	4950      	ldr	r1, [pc, #320]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026d8:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	4948      	ldr	r1, [pc, #288]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	493f      	ldr	r1, [pc, #252]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d028      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800272a:	4937      	ldr	r1, [pc, #220]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800273a:	d106      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a31      	ldr	r2, [pc, #196]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002746:	60d3      	str	r3, [r2, #12]
 8002748:	e011      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002752:	d10c      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f8c8 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d028      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800277a:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	491f      	ldr	r1, [pc, #124]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002798:	d106      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279a:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a4:	60d3      	str	r3, [r2, #12]
 80027a6:	e011      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f899 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d02b      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f6:	d109      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a02      	ldr	r2, [pc, #8]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002802:	60d3      	str	r3, [r2, #12]
 8002804:	e014      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002814:	d10c      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f867 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02f      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800284a:	4928      	ldr	r1, [pc, #160]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800285a:	d10d      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f844 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d014      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	74bb      	strb	r3, [r7, #18]
 8002876:	e011      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002880:	d10c      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3320      	adds	r3, #32
 8002886:	2102      	movs	r1, #2
 8002888:	4618      	mov	r0, r3
 800288a:	f000 f925 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b6:	490d      	ldr	r1, [pc, #52]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028da:	4904      	ldr	r1, [pc, #16]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000

080028f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028fe:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d018      	beq.n	800293c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800290a:	4b72      	ldr	r3, [pc, #456]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0203 	and.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d10d      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
       ||
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002922:	4b6c      	ldr	r3, [pc, #432]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
       ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d047      	beq.n	80029c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e044      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d018      	beq.n	8002976 <RCCEx_PLLSAI1_Config+0x86>
 8002944:	2b03      	cmp	r3, #3
 8002946:	d825      	bhi.n	8002994 <RCCEx_PLLSAI1_Config+0xa4>
 8002948:	2b01      	cmp	r3, #1
 800294a:	d002      	beq.n	8002952 <RCCEx_PLLSAI1_Config+0x62>
 800294c:	2b02      	cmp	r3, #2
 800294e:	d009      	beq.n	8002964 <RCCEx_PLLSAI1_Config+0x74>
 8002950:	e020      	b.n	8002994 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002952:	4b60      	ldr	r3, [pc, #384]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d11d      	bne.n	800299a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002962:	e01a      	b.n	800299a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002964:	4b5b      	ldr	r3, [pc, #364]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d116      	bne.n	800299e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002974:	e013      	b.n	800299e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002976:	4b57      	ldr	r3, [pc, #348]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002982:	4b54      	ldr	r3, [pc, #336]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002992:	e006      	b.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      break;
 8002998:	e004      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800299a:	bf00      	nop
 800299c:	e002      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029aa:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	430b      	orrs	r3, r1
 80029c0:	4944      	ldr	r1, [pc, #272]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d17d      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029cc:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a40      	ldr	r2, [pc, #256]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d8:	f7fe faa2 	bl	8000f20 <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029de:	e009      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029e0:	f7fe fa9e 	bl	8000f20 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d902      	bls.n	80029f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	73fb      	strb	r3, [r7, #15]
        break;
 80029f2:	e005      	b.n	8002a00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029f4:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ef      	bne.n	80029e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d160      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d111      	bne.n	8002a30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6892      	ldr	r2, [r2, #8]
 8002a1c:	0211      	lsls	r1, r2, #8
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68d2      	ldr	r2, [r2, #12]
 8002a22:	0912      	lsrs	r2, r2, #4
 8002a24:	0452      	lsls	r2, r2, #17
 8002a26:	430a      	orrs	r2, r1
 8002a28:	492a      	ldr	r1, [pc, #168]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	610b      	str	r3, [r1, #16]
 8002a2e:	e027      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d112      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a36:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6892      	ldr	r2, [r2, #8]
 8002a46:	0211      	lsls	r1, r2, #8
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6912      	ldr	r2, [r2, #16]
 8002a4c:	0852      	lsrs	r2, r2, #1
 8002a4e:	3a01      	subs	r2, #1
 8002a50:	0552      	lsls	r2, r2, #21
 8002a52:	430a      	orrs	r2, r1
 8002a54:	491f      	ldr	r1, [pc, #124]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	610b      	str	r3, [r1, #16]
 8002a5a:	e011      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6892      	ldr	r2, [r2, #8]
 8002a6c:	0211      	lsls	r1, r2, #8
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6952      	ldr	r2, [r2, #20]
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0652      	lsls	r2, r2, #25
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fa48 	bl	8000f20 <HAL_GetTick>
 8002a90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a92:	e009      	b.n	8002aa8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a94:	f7fe fa44 	bl	8000f20 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d902      	bls.n	8002aa8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	73fb      	strb	r3, [r7, #15]
          break;
 8002aa6:	e005      	b.n	8002ab4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ef      	beq.n	8002a94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	4904      	ldr	r1, [pc, #16]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ae6:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d018      	beq.n	8002b24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002af2:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10d      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
       ||
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b0a:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
       ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d047      	beq.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	e044      	b.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d018      	beq.n	8002b5e <RCCEx_PLLSAI2_Config+0x86>
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d825      	bhi.n	8002b7c <RCCEx_PLLSAI2_Config+0xa4>
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d002      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0x62>
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d009      	beq.n	8002b4c <RCCEx_PLLSAI2_Config+0x74>
 8002b38:	e020      	b.n	8002b7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b3a:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11d      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4a:	e01a      	b.n	8002b82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b4c:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d116      	bne.n	8002b86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5c:	e013      	b.n	8002b86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b7a:	e006      	b.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e004      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b82:	bf00      	nop
 8002b84:	e002      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b92:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	4939      	ldr	r1, [pc, #228]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d167      	bne.n	8002c84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bb4:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a35      	ldr	r2, [pc, #212]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc0:	f7fe f9ae 	bl	8000f20 <HAL_GetTick>
 8002bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bc6:	e009      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bc8:	f7fe f9aa 	bl	8000f20 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d902      	bls.n	8002bdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bda:	e005      	b.n	8002be8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ef      	bne.n	8002bc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d14a      	bne.n	8002c84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d111      	bne.n	8002c18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bf4:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6892      	ldr	r2, [r2, #8]
 8002c04:	0211      	lsls	r1, r2, #8
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	0912      	lsrs	r2, r2, #4
 8002c0c:	0452      	lsls	r2, r2, #17
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	491f      	ldr	r1, [pc, #124]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	614b      	str	r3, [r1, #20]
 8002c16:	e011      	b.n	8002c3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6892      	ldr	r2, [r2, #8]
 8002c28:	0211      	lsls	r1, r2, #8
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6912      	ldr	r2, [r2, #16]
 8002c2e:	0852      	lsrs	r2, r2, #1
 8002c30:	3a01      	subs	r2, #1
 8002c32:	0652      	lsls	r2, r2, #25
 8002c34:	430a      	orrs	r2, r1
 8002c36:	4916      	ldr	r1, [pc, #88]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe f96a 	bl	8000f20 <HAL_GetTick>
 8002c4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c4e:	e009      	b.n	8002c64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c50:	f7fe f966 	bl	8000f20 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d902      	bls.n	8002c64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	73fb      	strb	r3, [r7, #15]
          break;
 8002c62:	e005      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ef      	beq.n	8002c50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	4904      	ldr	r1, [pc, #16]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000

08002c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e040      	b.n	8002d28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fd ff4a 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	; 0x24
 8002cc0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fec0 	bl	8003a60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fc05 	bl	80034f0 <UART_SetConfig>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e01b      	b.n	8002d28 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 ff3f 	bl	8003ba4 <UART_CheckIdleState>
 8002d26:	4603      	mov	r3, r0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d178      	bne.n	8002e3a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_UART_Transmit+0x24>
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e071      	b.n	8002e3c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2221      	movs	r2, #33	; 0x21
 8002d64:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d66:	f7fe f8db 	bl	8000f20 <HAL_GetTick>
 8002d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	88fa      	ldrh	r2, [r7, #6]
 8002d70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d84:	d108      	bne.n	8002d98 <HAL_UART_Transmit+0x68>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d104      	bne.n	8002d98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e003      	b.n	8002da0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002da0:	e030      	b.n	8002e04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2200      	movs	r2, #0
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 ffa1 	bl	8003cf4 <UART_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e03c      	b.n	8002e3c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	881a      	ldrh	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd4:	b292      	uxth	r2, r2
 8002dd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	3302      	adds	r3, #2
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	e008      	b.n	8002df2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b292      	uxth	r2, r2
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	3301      	adds	r3, #1
 8002df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1c8      	bne.n	8002da2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2140      	movs	r1, #64	; 0x40
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 ff6a 	bl	8003cf4 <UART_WaitOnFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d004      	beq.n	8002e30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e005      	b.n	8002e3c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d137      	bne.n	8002ecc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_UART_Receive_IT+0x24>
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e030      	b.n	8002ece <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <HAL_UART_Receive_IT+0x94>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d01f      	beq.n	8002ebc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d018      	beq.n	8002ebc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	e853 3f00 	ldrex	r3, [r3]
 8002e96:	613b      	str	r3, [r7, #16]
   return(result);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	623b      	str	r3, [r7, #32]
 8002eaa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eac:	69f9      	ldr	r1, [r7, #28]
 8002eae:	6a3a      	ldr	r2, [r7, #32]
 8002eb0:	e841 2300 	strex	r3, r2, [r1]
 8002eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e6      	bne.n	8002e8a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 ff7e 	bl	8003dc4 <UART_Start_Receive_IT>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	e000      	b.n	8002ece <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
  }
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3728      	adds	r7, #40	; 0x28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40008000 	.word	0x40008000

08002edc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b0ba      	sub	sp, #232	; 0xe8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f06:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d115      	bne.n	8002f44 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00f      	beq.n	8002f44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 82ae 	beq.w	8003496 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
      }
      return;
 8002f42:	e2a8      	b.n	8003496 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8117 	beq.w	800317c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f5e:	4b85      	ldr	r3, [pc, #532]	; (8003174 <HAL_UART_IRQHandler+0x298>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 810a 	beq.w	800317c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d011      	beq.n	8002f98 <HAL_UART_IRQHandler+0xbc>
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2201      	movs	r2, #1
 8002f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f8e:	f043 0201 	orr.w	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d011      	beq.n	8002fc8 <HAL_UART_IRQHandler+0xec>
 8002fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fbe:	f043 0204 	orr.w	r2, r3, #4
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d011      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x11c>
 8002fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fee:	f043 0202 	orr.w	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d017      	beq.n	8003034 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003014:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2208      	movs	r2, #8
 8003022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302a:	f043 0208 	orr.w	r2, r3, #8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800303c:	2b00      	cmp	r3, #0
 800303e:	d012      	beq.n	8003066 <HAL_UART_IRQHandler+0x18a>
 8003040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00c      	beq.n	8003066 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8214 	beq.w	800349a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00d      	beq.n	800309a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800307e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	d005      	beq.n	80030be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d04f      	beq.n	800315e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 ff46 	bl	8003f50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d141      	bne.n	8003156 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3308      	adds	r3, #8
 80030d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3308      	adds	r3, #8
 80030fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800310a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800310e:	e841 2300 	strex	r3, r2, [r1]
 8003112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1d9      	bne.n	80030d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	2b00      	cmp	r3, #0
 8003124:	d013      	beq.n	800314e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	4a13      	ldr	r2, [pc, #76]	; (8003178 <HAL_UART_IRQHandler+0x29c>)
 800312c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe f873 	bl	800121e <HAL_DMA_Abort_IT>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d017      	beq.n	800316e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003148:	4610      	mov	r0, r2
 800314a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314c:	e00f      	b.n	800316e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f9b8 	bl	80034c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003154:	e00b      	b.n	800316e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f9b4 	bl	80034c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315c:	e007      	b.n	800316e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9b0 	bl	80034c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800316c:	e195      	b.n	800349a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316e:	bf00      	nop
    return;
 8003170:	e193      	b.n	800349a <HAL_UART_IRQHandler+0x5be>
 8003172:	bf00      	nop
 8003174:	04000120 	.word	0x04000120
 8003178:	08004019 	.word	0x08004019

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	2b01      	cmp	r3, #1
 8003182:	f040 814e 	bne.w	8003422 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8147 	beq.w	8003422 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8140 	beq.w	8003422 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2210      	movs	r2, #16
 80031a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	f040 80b8 	bne.w	800332a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8167 	beq.w	800349e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031da:	429a      	cmp	r2, r3
 80031dc:	f080 815f 	bcs.w	800349e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f040 8086 	bne.w	8003308 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800322a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003232:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800323e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1da      	bne.n	80031fc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3308      	adds	r3, #8
 800324c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3308      	adds	r3, #8
 8003266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800326a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800326e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003270:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003272:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800327c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e1      	bne.n	8003246 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3308      	adds	r3, #8
 8003288:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800328c:	e853 3f00 	ldrex	r3, [r3]
 8003290:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3308      	adds	r3, #8
 80032a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e3      	bne.n	8003282 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d8:	f023 0310 	bic.w	r3, r3, #16
 80032dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80032ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e4      	bne.n	80032c8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd ff4d 	bl	80011a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800331a:	b29b      	uxth	r3, r3
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	b29b      	uxth	r3, r3
 8003320:	4619      	mov	r1, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8d8 	bl	80034d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003328:	e0b9      	b.n	800349e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003336:	b29b      	uxth	r3, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80ab 	beq.w	80034a2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800334c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80a6 	beq.w	80034a2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003366:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800336a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003378:	647b      	str	r3, [r7, #68]	; 0x44
 800337a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800337e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e4      	bne.n	8003356 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3308      	adds	r3, #8
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	623b      	str	r3, [r7, #32]
   return(result);
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3308      	adds	r3, #8
 80033ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033b0:	633a      	str	r2, [r7, #48]	; 0x30
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e3      	bne.n	800338c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f023 0310 	bic.w	r3, r3, #16
 80033ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	69b9      	ldr	r1, [r7, #24]
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	617b      	str	r3, [r7, #20]
   return(result);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e4      	bne.n	80033d8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2202      	movs	r2, #2
 8003412:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f85c 	bl	80034d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003420:	e03f      	b.n	80034a2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <HAL_UART_IRQHandler+0x570>
 800342e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003442:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 ffe3 	bl	8004410 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800344a:	e02d      	b.n	80034a8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800344c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00e      	beq.n	8003476 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01c      	beq.n	80034a6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
    }
    return;
 8003474:	e017      	b.n	80034a6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d012      	beq.n	80034a8 <HAL_UART_IRQHandler+0x5cc>
 8003482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00c      	beq.n	80034a8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fdd8 	bl	8004044 <UART_EndTransmit_IT>
    return;
 8003494:	e008      	b.n	80034a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003496:	bf00      	nop
 8003498:	e006      	b.n	80034a8 <HAL_UART_IRQHandler+0x5cc>
    return;
 800349a:	bf00      	nop
 800349c:	e004      	b.n	80034a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800349e:	bf00      	nop
 80034a0:	e002      	b.n	80034a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80034a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80034a8:	37e8      	adds	r7, #232	; 0xe8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop

080034b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f4:	b08a      	sub	sp, #40	; 0x28
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	431a      	orrs	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	431a      	orrs	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	4313      	orrs	r3, r2
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4ba4      	ldr	r3, [pc, #656]	; (80037b0 <UART_SetConfig+0x2c0>)
 8003520:	4013      	ands	r3, r2
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003528:	430b      	orrs	r3, r1
 800352a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a99      	ldr	r2, [pc, #612]	; (80037b4 <UART_SetConfig+0x2c4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003558:	4313      	orrs	r3, r2
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a90      	ldr	r2, [pc, #576]	; (80037b8 <UART_SetConfig+0x2c8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d126      	bne.n	80035c8 <UART_SetConfig+0xd8>
 800357a:	4b90      	ldr	r3, [pc, #576]	; (80037bc <UART_SetConfig+0x2cc>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	2b03      	cmp	r3, #3
 8003586:	d81b      	bhi.n	80035c0 <UART_SetConfig+0xd0>
 8003588:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <UART_SetConfig+0xa0>)
 800358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358e:	bf00      	nop
 8003590:	080035a1 	.word	0x080035a1
 8003594:	080035b1 	.word	0x080035b1
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035b9 	.word	0x080035b9
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a6:	e116      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80035a8:	2302      	movs	r3, #2
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ae:	e112      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80035b0:	2304      	movs	r3, #4
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b6:	e10e      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80035b8:	2308      	movs	r3, #8
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035be:	e10a      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80035c0:	2310      	movs	r3, #16
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c6:	e106      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a7c      	ldr	r2, [pc, #496]	; (80037c0 <UART_SetConfig+0x2d0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d138      	bne.n	8003644 <UART_SetConfig+0x154>
 80035d2:	4b7a      	ldr	r3, [pc, #488]	; (80037bc <UART_SetConfig+0x2cc>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d82d      	bhi.n	800363c <UART_SetConfig+0x14c>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <UART_SetConfig+0xf8>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	0800361d 	.word	0x0800361d
 80035ec:	0800363d 	.word	0x0800363d
 80035f0:	0800363d 	.word	0x0800363d
 80035f4:	0800363d 	.word	0x0800363d
 80035f8:	0800362d 	.word	0x0800362d
 80035fc:	0800363d 	.word	0x0800363d
 8003600:	0800363d 	.word	0x0800363d
 8003604:	0800363d 	.word	0x0800363d
 8003608:	08003625 	.word	0x08003625
 800360c:	0800363d 	.word	0x0800363d
 8003610:	0800363d 	.word	0x0800363d
 8003614:	0800363d 	.word	0x0800363d
 8003618:	08003635 	.word	0x08003635
 800361c:	2300      	movs	r3, #0
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003622:	e0d8      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003624:	2302      	movs	r3, #2
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	e0d4      	b.n	80037d6 <UART_SetConfig+0x2e6>
 800362c:	2304      	movs	r3, #4
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003632:	e0d0      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003634:	2308      	movs	r3, #8
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363a:	e0cc      	b.n	80037d6 <UART_SetConfig+0x2e6>
 800363c:	2310      	movs	r3, #16
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003642:	e0c8      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a5e      	ldr	r2, [pc, #376]	; (80037c4 <UART_SetConfig+0x2d4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d125      	bne.n	800369a <UART_SetConfig+0x1aa>
 800364e:	4b5b      	ldr	r3, [pc, #364]	; (80037bc <UART_SetConfig+0x2cc>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003658:	2b30      	cmp	r3, #48	; 0x30
 800365a:	d016      	beq.n	800368a <UART_SetConfig+0x19a>
 800365c:	2b30      	cmp	r3, #48	; 0x30
 800365e:	d818      	bhi.n	8003692 <UART_SetConfig+0x1a2>
 8003660:	2b20      	cmp	r3, #32
 8003662:	d00a      	beq.n	800367a <UART_SetConfig+0x18a>
 8003664:	2b20      	cmp	r3, #32
 8003666:	d814      	bhi.n	8003692 <UART_SetConfig+0x1a2>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <UART_SetConfig+0x182>
 800366c:	2b10      	cmp	r3, #16
 800366e:	d008      	beq.n	8003682 <UART_SetConfig+0x192>
 8003670:	e00f      	b.n	8003692 <UART_SetConfig+0x1a2>
 8003672:	2300      	movs	r3, #0
 8003674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003678:	e0ad      	b.n	80037d6 <UART_SetConfig+0x2e6>
 800367a:	2302      	movs	r3, #2
 800367c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003680:	e0a9      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003682:	2304      	movs	r3, #4
 8003684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003688:	e0a5      	b.n	80037d6 <UART_SetConfig+0x2e6>
 800368a:	2308      	movs	r3, #8
 800368c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003690:	e0a1      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003692:	2310      	movs	r3, #16
 8003694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003698:	e09d      	b.n	80037d6 <UART_SetConfig+0x2e6>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a4a      	ldr	r2, [pc, #296]	; (80037c8 <UART_SetConfig+0x2d8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d125      	bne.n	80036f0 <UART_SetConfig+0x200>
 80036a4:	4b45      	ldr	r3, [pc, #276]	; (80037bc <UART_SetConfig+0x2cc>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036ae:	2bc0      	cmp	r3, #192	; 0xc0
 80036b0:	d016      	beq.n	80036e0 <UART_SetConfig+0x1f0>
 80036b2:	2bc0      	cmp	r3, #192	; 0xc0
 80036b4:	d818      	bhi.n	80036e8 <UART_SetConfig+0x1f8>
 80036b6:	2b80      	cmp	r3, #128	; 0x80
 80036b8:	d00a      	beq.n	80036d0 <UART_SetConfig+0x1e0>
 80036ba:	2b80      	cmp	r3, #128	; 0x80
 80036bc:	d814      	bhi.n	80036e8 <UART_SetConfig+0x1f8>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <UART_SetConfig+0x1d8>
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d008      	beq.n	80036d8 <UART_SetConfig+0x1e8>
 80036c6:	e00f      	b.n	80036e8 <UART_SetConfig+0x1f8>
 80036c8:	2300      	movs	r3, #0
 80036ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ce:	e082      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80036d0:	2302      	movs	r3, #2
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d6:	e07e      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80036d8:	2304      	movs	r3, #4
 80036da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036de:	e07a      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80036e0:	2308      	movs	r3, #8
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e6:	e076      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80036e8:	2310      	movs	r3, #16
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ee:	e072      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a35      	ldr	r2, [pc, #212]	; (80037cc <UART_SetConfig+0x2dc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d12a      	bne.n	8003750 <UART_SetConfig+0x260>
 80036fa:	4b30      	ldr	r3, [pc, #192]	; (80037bc <UART_SetConfig+0x2cc>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003708:	d01a      	beq.n	8003740 <UART_SetConfig+0x250>
 800370a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800370e:	d81b      	bhi.n	8003748 <UART_SetConfig+0x258>
 8003710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003714:	d00c      	beq.n	8003730 <UART_SetConfig+0x240>
 8003716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371a:	d815      	bhi.n	8003748 <UART_SetConfig+0x258>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <UART_SetConfig+0x238>
 8003720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003724:	d008      	beq.n	8003738 <UART_SetConfig+0x248>
 8003726:	e00f      	b.n	8003748 <UART_SetConfig+0x258>
 8003728:	2300      	movs	r3, #0
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372e:	e052      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003730:	2302      	movs	r3, #2
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003736:	e04e      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003738:	2304      	movs	r3, #4
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373e:	e04a      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003740:	2308      	movs	r3, #8
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003746:	e046      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003748:	2310      	movs	r3, #16
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374e:	e042      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <UART_SetConfig+0x2c4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d13a      	bne.n	80037d0 <UART_SetConfig+0x2e0>
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <UART_SetConfig+0x2cc>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003768:	d01a      	beq.n	80037a0 <UART_SetConfig+0x2b0>
 800376a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800376e:	d81b      	bhi.n	80037a8 <UART_SetConfig+0x2b8>
 8003770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003774:	d00c      	beq.n	8003790 <UART_SetConfig+0x2a0>
 8003776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377a:	d815      	bhi.n	80037a8 <UART_SetConfig+0x2b8>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <UART_SetConfig+0x298>
 8003780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003784:	d008      	beq.n	8003798 <UART_SetConfig+0x2a8>
 8003786:	e00f      	b.n	80037a8 <UART_SetConfig+0x2b8>
 8003788:	2300      	movs	r3, #0
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e022      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003790:	2302      	movs	r3, #2
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003796:	e01e      	b.n	80037d6 <UART_SetConfig+0x2e6>
 8003798:	2304      	movs	r3, #4
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379e:	e01a      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80037a0:	2308      	movs	r3, #8
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	e016      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80037a8:	2310      	movs	r3, #16
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e012      	b.n	80037d6 <UART_SetConfig+0x2e6>
 80037b0:	efff69f3 	.word	0xefff69f3
 80037b4:	40008000 	.word	0x40008000
 80037b8:	40013800 	.word	0x40013800
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40004400 	.word	0x40004400
 80037c4:	40004800 	.word	0x40004800
 80037c8:	40004c00 	.word	0x40004c00
 80037cc:	40005000 	.word	0x40005000
 80037d0:	2310      	movs	r3, #16
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a9f      	ldr	r2, [pc, #636]	; (8003a58 <UART_SetConfig+0x568>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d17a      	bne.n	80038d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d824      	bhi.n	8003832 <UART_SetConfig+0x342>
 80037e8:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <UART_SetConfig+0x300>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003815 	.word	0x08003815
 80037f4:	08003833 	.word	0x08003833
 80037f8:	0800381d 	.word	0x0800381d
 80037fc:	08003833 	.word	0x08003833
 8003800:	08003823 	.word	0x08003823
 8003804:	08003833 	.word	0x08003833
 8003808:	08003833 	.word	0x08003833
 800380c:	08003833 	.word	0x08003833
 8003810:	0800382b 	.word	0x0800382b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003814:	f7fe fcf6 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8003818:	61f8      	str	r0, [r7, #28]
        break;
 800381a:	e010      	b.n	800383e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800381c:	4b8f      	ldr	r3, [pc, #572]	; (8003a5c <UART_SetConfig+0x56c>)
 800381e:	61fb      	str	r3, [r7, #28]
        break;
 8003820:	e00d      	b.n	800383e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003822:	f7fe fc57 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8003826:	61f8      	str	r0, [r7, #28]
        break;
 8003828:	e009      	b.n	800383e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800382a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800382e:	61fb      	str	r3, [r7, #28]
        break;
 8003830:	e005      	b.n	800383e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800383c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80fb 	beq.w	8003a3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	4413      	add	r3, r2
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	429a      	cmp	r2, r3
 8003854:	d305      	bcc.n	8003862 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	429a      	cmp	r2, r3
 8003860:	d903      	bls.n	800386a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003868:	e0e8      	b.n	8003a3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	2200      	movs	r2, #0
 800386e:	461c      	mov	r4, r3
 8003870:	4615      	mov	r5, r2
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	022b      	lsls	r3, r5, #8
 800387c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003880:	0222      	lsls	r2, r4, #8
 8003882:	68f9      	ldr	r1, [r7, #12]
 8003884:	6849      	ldr	r1, [r1, #4]
 8003886:	0849      	lsrs	r1, r1, #1
 8003888:	2000      	movs	r0, #0
 800388a:	4688      	mov	r8, r1
 800388c:	4681      	mov	r9, r0
 800388e:	eb12 0a08 	adds.w	sl, r2, r8
 8003892:	eb43 0b09 	adc.w	fp, r3, r9
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038a4:	4650      	mov	r0, sl
 80038a6:	4659      	mov	r1, fp
 80038a8:	f7fc fce2 	bl	8000270 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4613      	mov	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ba:	d308      	bcc.n	80038ce <UART_SetConfig+0x3de>
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c2:	d204      	bcs.n	80038ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	60da      	str	r2, [r3, #12]
 80038cc:	e0b6      	b.n	8003a3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038d4:	e0b2      	b.n	8003a3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038de:	d15e      	bne.n	800399e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d828      	bhi.n	800393a <UART_SetConfig+0x44a>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <UART_SetConfig+0x400>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003915 	.word	0x08003915
 80038f4:	0800391d 	.word	0x0800391d
 80038f8:	08003925 	.word	0x08003925
 80038fc:	0800393b 	.word	0x0800393b
 8003900:	0800392b 	.word	0x0800392b
 8003904:	0800393b 	.word	0x0800393b
 8003908:	0800393b 	.word	0x0800393b
 800390c:	0800393b 	.word	0x0800393b
 8003910:	08003933 	.word	0x08003933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003914:	f7fe fc76 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8003918:	61f8      	str	r0, [r7, #28]
        break;
 800391a:	e014      	b.n	8003946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800391c:	f7fe fc88 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 8003920:	61f8      	str	r0, [r7, #28]
        break;
 8003922:	e010      	b.n	8003946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003924:	4b4d      	ldr	r3, [pc, #308]	; (8003a5c <UART_SetConfig+0x56c>)
 8003926:	61fb      	str	r3, [r7, #28]
        break;
 8003928:	e00d      	b.n	8003946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392a:	f7fe fbd3 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800392e:	61f8      	str	r0, [r7, #28]
        break;
 8003930:	e009      	b.n	8003946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003936:	61fb      	str	r3, [r7, #28]
        break;
 8003938:	e005      	b.n	8003946 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003944:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d077      	beq.n	8003a3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005a      	lsls	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	441a      	add	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b0f      	cmp	r3, #15
 8003966:	d916      	bls.n	8003996 <UART_SetConfig+0x4a6>
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396e:	d212      	bcs.n	8003996 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	b29b      	uxth	r3, r3
 8003974:	f023 030f 	bic.w	r3, r3, #15
 8003978:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	b29b      	uxth	r3, r3
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	b29a      	uxth	r2, r3
 8003986:	8afb      	ldrh	r3, [r7, #22]
 8003988:	4313      	orrs	r3, r2
 800398a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	8afa      	ldrh	r2, [r7, #22]
 8003992:	60da      	str	r2, [r3, #12]
 8003994:	e052      	b.n	8003a3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800399c:	e04e      	b.n	8003a3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800399e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d827      	bhi.n	80039f6 <UART_SetConfig+0x506>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <UART_SetConfig+0x4bc>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039d1 	.word	0x080039d1
 80039b0:	080039d9 	.word	0x080039d9
 80039b4:	080039e1 	.word	0x080039e1
 80039b8:	080039f7 	.word	0x080039f7
 80039bc:	080039e7 	.word	0x080039e7
 80039c0:	080039f7 	.word	0x080039f7
 80039c4:	080039f7 	.word	0x080039f7
 80039c8:	080039f7 	.word	0x080039f7
 80039cc:	080039ef 	.word	0x080039ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d0:	f7fe fc18 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 80039d4:	61f8      	str	r0, [r7, #28]
        break;
 80039d6:	e014      	b.n	8003a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d8:	f7fe fc2a 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 80039dc:	61f8      	str	r0, [r7, #28]
        break;
 80039de:	e010      	b.n	8003a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e0:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <UART_SetConfig+0x56c>)
 80039e2:	61fb      	str	r3, [r7, #28]
        break;
 80039e4:	e00d      	b.n	8003a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e6:	f7fe fb75 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 80039ea:	61f8      	str	r0, [r7, #28]
        break;
 80039ec:	e009      	b.n	8003a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f2:	61fb      	str	r3, [r7, #28]
        break;
 80039f4:	e005      	b.n	8003a02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a00:	bf00      	nop
    }

    if (pclk != 0U)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d019      	beq.n	8003a3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	085a      	lsrs	r2, r3, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	441a      	add	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b0f      	cmp	r3, #15
 8003a20:	d909      	bls.n	8003a36 <UART_SetConfig+0x546>
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a28:	d205      	bcs.n	8003a36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60da      	str	r2, [r3, #12]
 8003a34:	e002      	b.n	8003a3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3728      	adds	r7, #40	; 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a56:	bf00      	nop
 8003a58:	40008000 	.word	0x40008000
 8003a5c:	00f42400 	.word	0x00f42400

08003a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b5e:	d10a      	bne.n	8003b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b098      	sub	sp, #96	; 0x60
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bb4:	f7fd f9b4 	bl	8000f20 <HAL_GetTick>
 8003bb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d12e      	bne.n	8003c26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f88c 	bl	8003cf4 <UART_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d021      	beq.n	8003c26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf6:	653b      	str	r3, [r7, #80]	; 0x50
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c00:	647b      	str	r3, [r7, #68]	; 0x44
 8003c02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e6      	bne.n	8003be2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e062      	b.n	8003cec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d149      	bne.n	8003cc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f856 	bl	8003cf4 <UART_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d03c      	beq.n	8003cc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e6      	bne.n	8003c4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3308      	adds	r3, #8
 8003c86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ca0:	61fa      	str	r2, [r7, #28]
 8003ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	69b9      	ldr	r1, [r7, #24]
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	617b      	str	r3, [r7, #20]
   return(result);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e5      	bne.n	8003c80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e011      	b.n	8003cec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3758      	adds	r7, #88	; 0x58
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d04:	e049      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d045      	beq.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0e:	f7fd f907 	bl	8000f20 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d302      	bcc.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e048      	b.n	8003dba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d031      	beq.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d110      	bne.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f8ff 	bl	8003f50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2208      	movs	r2, #8
 8003d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e029      	b.n	8003dba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d74:	d111      	bne.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f8e5 	bl	8003f50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e00f      	b.n	8003dba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	bf0c      	ite	eq
 8003daa:	2301      	moveq	r3, #1
 8003dac:	2300      	movne	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d0a6      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b097      	sub	sp, #92	; 0x5c
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	88fa      	ldrh	r2, [r7, #6]
 8003ddc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d10e      	bne.n	8003e16 <UART_Start_Receive_IT+0x52>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <UART_Start_Receive_IT+0x48>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e0a:	e02d      	b.n	8003e68 <UART_Start_Receive_IT+0xa4>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	22ff      	movs	r2, #255	; 0xff
 8003e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e14:	e028      	b.n	8003e68 <UART_Start_Receive_IT+0xa4>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10d      	bne.n	8003e3a <UART_Start_Receive_IT+0x76>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d104      	bne.n	8003e30 <UART_Start_Receive_IT+0x6c>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	22ff      	movs	r2, #255	; 0xff
 8003e2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e2e:	e01b      	b.n	8003e68 <UART_Start_Receive_IT+0xa4>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	227f      	movs	r2, #127	; 0x7f
 8003e34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e38:	e016      	b.n	8003e68 <UART_Start_Receive_IT+0xa4>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e42:	d10d      	bne.n	8003e60 <UART_Start_Receive_IT+0x9c>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <UART_Start_Receive_IT+0x92>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	227f      	movs	r2, #127	; 0x7f
 8003e50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e54:	e008      	b.n	8003e68 <UART_Start_Receive_IT+0xa4>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	223f      	movs	r2, #63	; 0x3f
 8003e5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e5e:	e003      	b.n	8003e68 <UART_Start_Receive_IT+0xa4>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2222      	movs	r2, #34	; 0x22
 8003e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e98:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e5      	bne.n	8003e78 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb4:	d107      	bne.n	8003ec6 <UART_Start_Receive_IT+0x102>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a21      	ldr	r2, [pc, #132]	; (8003f48 <UART_Start_Receive_IT+0x184>)
 8003ec2:	669a      	str	r2, [r3, #104]	; 0x68
 8003ec4:	e002      	b.n	8003ecc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a20      	ldr	r2, [pc, #128]	; (8003f4c <UART_Start_Receive_IT+0x188>)
 8003eca:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d019      	beq.n	8003f08 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e6      	bne.n	8003ed4 <UART_Start_Receive_IT+0x110>
 8003f06:	e018      	b.n	8003f3a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	613b      	str	r3, [r7, #16]
   return(result);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f043 0320 	orr.w	r3, r3, #32
 8003f1c:	653b      	str	r3, [r7, #80]	; 0x50
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	69f9      	ldr	r1, [r7, #28]
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e6      	bne.n	8003f08 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	375c      	adds	r7, #92	; 0x5c
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	08004255 	.word	0x08004255
 8003f4c:	08004099 	.word	0x08004099

08003f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b095      	sub	sp, #84	; 0x54
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f76:	643b      	str	r3, [r7, #64]	; 0x40
 8003f78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e6      	bne.n	8003f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e5      	bne.n	8003f8a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d118      	bne.n	8003ff8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f023 0310 	bic.w	r3, r3, #16
 8003fda:	647b      	str	r3, [r7, #68]	; 0x44
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6979      	ldr	r1, [r7, #20]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e6      	bne.n	8003fc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800400c:	bf00      	nop
 800400e:	3754      	adds	r7, #84	; 0x54
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff fa44 	bl	80034c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	60bb      	str	r3, [r7, #8]
   return(result);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6979      	ldr	r1, [r7, #20]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	613b      	str	r3, [r7, #16]
   return(result);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e6      	bne.n	800404c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff fa10 	bl	80034b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004090:	bf00      	nop
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b09c      	sub	sp, #112	; 0x70
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b0:	2b22      	cmp	r3, #34	; 0x22
 80040b2:	f040 80be 	bne.w	8004232 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80040c4:	b2d9      	uxtb	r1, r3
 80040c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	400a      	ands	r2, r1
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f040 80a3 	bne.w	8004246 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800410e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004114:	66bb      	str	r3, [r7, #104]	; 0x68
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800411e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004120:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004124:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800412c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e6      	bne.n	8004100 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3308      	adds	r3, #8
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	667b      	str	r3, [r7, #100]	; 0x64
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3308      	adds	r3, #8
 8004150:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004152:	647a      	str	r2, [r7, #68]	; 0x44
 8004154:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a34      	ldr	r2, [pc, #208]	; (8004250 <UART_RxISR_8BIT+0x1b8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d01f      	beq.n	80041c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d018      	beq.n	80041c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	623b      	str	r3, [r7, #32]
   return(result);
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041a6:	663b      	str	r3, [r7, #96]	; 0x60
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041b0:	633b      	str	r3, [r7, #48]	; 0x30
 80041b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e6      	bne.n	8004192 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d12e      	bne.n	800422a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	60fb      	str	r3, [r7, #12]
   return(result);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0310 	bic.w	r3, r3, #16
 80041e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	69b9      	ldr	r1, [r7, #24]
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	617b      	str	r3, [r7, #20]
   return(result);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b10      	cmp	r3, #16
 8004210:	d103      	bne.n	800421a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2210      	movs	r2, #16
 8004218:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff f958 	bl	80034d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004228:	e00d      	b.n	8004246 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fc f99e 	bl	800056c <HAL_UART_RxCpltCallback>
}
 8004230:	e009      	b.n	8004246 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	8b1b      	ldrh	r3, [r3, #24]
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0208 	orr.w	r2, r2, #8
 8004242:	b292      	uxth	r2, r2
 8004244:	831a      	strh	r2, [r3, #24]
}
 8004246:	bf00      	nop
 8004248:	3770      	adds	r7, #112	; 0x70
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40008000 	.word	0x40008000

08004254 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b09c      	sub	sp, #112	; 0x70
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004262:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800426c:	2b22      	cmp	r3, #34	; 0x22
 800426e:	f040 80be 	bne.w	80043ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004278:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004282:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004286:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800428a:	4013      	ands	r3, r2
 800428c:	b29a      	uxth	r2, r3
 800428e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004290:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	1c9a      	adds	r2, r3, #2
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f040 80a3 	bne.w	8004402 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80042ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042d0:	667b      	str	r3, [r7, #100]	; 0x64
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042da:	657b      	str	r3, [r7, #84]	; 0x54
 80042dc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80042e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e6      	bne.n	80042bc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3308      	adds	r3, #8
 80042f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	663b      	str	r3, [r7, #96]	; 0x60
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3308      	adds	r3, #8
 800430c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800430e:	643a      	str	r2, [r7, #64]	; 0x40
 8004310:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004314:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e5      	bne.n	80042ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a34      	ldr	r2, [pc, #208]	; (800440c <UART_RxISR_16BIT+0x1b8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01f      	beq.n	8004380 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d018      	beq.n	8004380 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	61fb      	str	r3, [r7, #28]
   return(result);
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e6      	bne.n	800434e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004384:	2b01      	cmp	r3, #1
 8004386:	d12e      	bne.n	80043e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	60bb      	str	r3, [r7, #8]
   return(result);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f023 0310 	bic.w	r3, r3, #16
 80043a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6979      	ldr	r1, [r7, #20]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e6      	bne.n	800438e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d103      	bne.n	80043d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2210      	movs	r2, #16
 80043d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043dc:	4619      	mov	r1, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff f87a 	bl	80034d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043e4:	e00d      	b.n	8004402 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc f8c0 	bl	800056c <HAL_UART_RxCpltCallback>
}
 80043ec:	e009      	b.n	8004402 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	8b1b      	ldrh	r3, [r3, #24]
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0208 	orr.w	r2, r2, #8
 80043fe:	b292      	uxth	r2, r2
 8004400:	831a      	strh	r2, [r3, #24]
}
 8004402:	bf00      	nop
 8004404:	3770      	adds	r7, #112	; 0x70
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40008000 	.word	0x40008000

08004410 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <std>:
 8004424:	2300      	movs	r3, #0
 8004426:	b510      	push	{r4, lr}
 8004428:	4604      	mov	r4, r0
 800442a:	e9c0 3300 	strd	r3, r3, [r0]
 800442e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004432:	6083      	str	r3, [r0, #8]
 8004434:	8181      	strh	r1, [r0, #12]
 8004436:	6643      	str	r3, [r0, #100]	; 0x64
 8004438:	81c2      	strh	r2, [r0, #14]
 800443a:	6183      	str	r3, [r0, #24]
 800443c:	4619      	mov	r1, r3
 800443e:	2208      	movs	r2, #8
 8004440:	305c      	adds	r0, #92	; 0x5c
 8004442:	f000 f8f4 	bl	800462e <memset>
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <std+0x38>)
 8004448:	6263      	str	r3, [r4, #36]	; 0x24
 800444a:	4b05      	ldr	r3, [pc, #20]	; (8004460 <std+0x3c>)
 800444c:	62a3      	str	r3, [r4, #40]	; 0x28
 800444e:	4b05      	ldr	r3, [pc, #20]	; (8004464 <std+0x40>)
 8004450:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <std+0x44>)
 8004454:	6224      	str	r4, [r4, #32]
 8004456:	6323      	str	r3, [r4, #48]	; 0x30
 8004458:	bd10      	pop	{r4, pc}
 800445a:	bf00      	nop
 800445c:	080045a9 	.word	0x080045a9
 8004460:	080045cb 	.word	0x080045cb
 8004464:	08004603 	.word	0x08004603
 8004468:	08004627 	.word	0x08004627

0800446c <stdio_exit_handler>:
 800446c:	4a02      	ldr	r2, [pc, #8]	; (8004478 <stdio_exit_handler+0xc>)
 800446e:	4903      	ldr	r1, [pc, #12]	; (800447c <stdio_exit_handler+0x10>)
 8004470:	4803      	ldr	r0, [pc, #12]	; (8004480 <stdio_exit_handler+0x14>)
 8004472:	f000 b869 	b.w	8004548 <_fwalk_sglue>
 8004476:	bf00      	nop
 8004478:	2000000c 	.word	0x2000000c
 800447c:	08004fc9 	.word	0x08004fc9
 8004480:	20000018 	.word	0x20000018

08004484 <cleanup_stdio>:
 8004484:	6841      	ldr	r1, [r0, #4]
 8004486:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <cleanup_stdio+0x34>)
 8004488:	4299      	cmp	r1, r3
 800448a:	b510      	push	{r4, lr}
 800448c:	4604      	mov	r4, r0
 800448e:	d001      	beq.n	8004494 <cleanup_stdio+0x10>
 8004490:	f000 fd9a 	bl	8004fc8 <_fflush_r>
 8004494:	68a1      	ldr	r1, [r4, #8]
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <cleanup_stdio+0x38>)
 8004498:	4299      	cmp	r1, r3
 800449a:	d002      	beq.n	80044a2 <cleanup_stdio+0x1e>
 800449c:	4620      	mov	r0, r4
 800449e:	f000 fd93 	bl	8004fc8 <_fflush_r>
 80044a2:	68e1      	ldr	r1, [r4, #12]
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <cleanup_stdio+0x3c>)
 80044a6:	4299      	cmp	r1, r3
 80044a8:	d004      	beq.n	80044b4 <cleanup_stdio+0x30>
 80044aa:	4620      	mov	r0, r4
 80044ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b0:	f000 bd8a 	b.w	8004fc8 <_fflush_r>
 80044b4:	bd10      	pop	{r4, pc}
 80044b6:	bf00      	nop
 80044b8:	20000134 	.word	0x20000134
 80044bc:	2000019c 	.word	0x2000019c
 80044c0:	20000204 	.word	0x20000204

080044c4 <global_stdio_init.part.0>:
 80044c4:	b510      	push	{r4, lr}
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <global_stdio_init.part.0+0x30>)
 80044c8:	4c0b      	ldr	r4, [pc, #44]	; (80044f8 <global_stdio_init.part.0+0x34>)
 80044ca:	4a0c      	ldr	r2, [pc, #48]	; (80044fc <global_stdio_init.part.0+0x38>)
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	4620      	mov	r0, r4
 80044d0:	2200      	movs	r2, #0
 80044d2:	2104      	movs	r1, #4
 80044d4:	f7ff ffa6 	bl	8004424 <std>
 80044d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80044dc:	2201      	movs	r2, #1
 80044de:	2109      	movs	r1, #9
 80044e0:	f7ff ffa0 	bl	8004424 <std>
 80044e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80044e8:	2202      	movs	r2, #2
 80044ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ee:	2112      	movs	r1, #18
 80044f0:	f7ff bf98 	b.w	8004424 <std>
 80044f4:	2000026c 	.word	0x2000026c
 80044f8:	20000134 	.word	0x20000134
 80044fc:	0800446d 	.word	0x0800446d

08004500 <__sfp_lock_acquire>:
 8004500:	4801      	ldr	r0, [pc, #4]	; (8004508 <__sfp_lock_acquire+0x8>)
 8004502:	f000 b90d 	b.w	8004720 <__retarget_lock_acquire_recursive>
 8004506:	bf00      	nop
 8004508:	20000275 	.word	0x20000275

0800450c <__sfp_lock_release>:
 800450c:	4801      	ldr	r0, [pc, #4]	; (8004514 <__sfp_lock_release+0x8>)
 800450e:	f000 b908 	b.w	8004722 <__retarget_lock_release_recursive>
 8004512:	bf00      	nop
 8004514:	20000275 	.word	0x20000275

08004518 <__sinit>:
 8004518:	b510      	push	{r4, lr}
 800451a:	4604      	mov	r4, r0
 800451c:	f7ff fff0 	bl	8004500 <__sfp_lock_acquire>
 8004520:	6a23      	ldr	r3, [r4, #32]
 8004522:	b11b      	cbz	r3, 800452c <__sinit+0x14>
 8004524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004528:	f7ff bff0 	b.w	800450c <__sfp_lock_release>
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <__sinit+0x28>)
 800452e:	6223      	str	r3, [r4, #32]
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <__sinit+0x2c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f5      	bne.n	8004524 <__sinit+0xc>
 8004538:	f7ff ffc4 	bl	80044c4 <global_stdio_init.part.0>
 800453c:	e7f2      	b.n	8004524 <__sinit+0xc>
 800453e:	bf00      	nop
 8004540:	08004485 	.word	0x08004485
 8004544:	2000026c 	.word	0x2000026c

08004548 <_fwalk_sglue>:
 8004548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800454c:	4607      	mov	r7, r0
 800454e:	4688      	mov	r8, r1
 8004550:	4614      	mov	r4, r2
 8004552:	2600      	movs	r6, #0
 8004554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004558:	f1b9 0901 	subs.w	r9, r9, #1
 800455c:	d505      	bpl.n	800456a <_fwalk_sglue+0x22>
 800455e:	6824      	ldr	r4, [r4, #0]
 8004560:	2c00      	cmp	r4, #0
 8004562:	d1f7      	bne.n	8004554 <_fwalk_sglue+0xc>
 8004564:	4630      	mov	r0, r6
 8004566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456a:	89ab      	ldrh	r3, [r5, #12]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d907      	bls.n	8004580 <_fwalk_sglue+0x38>
 8004570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004574:	3301      	adds	r3, #1
 8004576:	d003      	beq.n	8004580 <_fwalk_sglue+0x38>
 8004578:	4629      	mov	r1, r5
 800457a:	4638      	mov	r0, r7
 800457c:	47c0      	blx	r8
 800457e:	4306      	orrs	r6, r0
 8004580:	3568      	adds	r5, #104	; 0x68
 8004582:	e7e9      	b.n	8004558 <_fwalk_sglue+0x10>

08004584 <iprintf>:
 8004584:	b40f      	push	{r0, r1, r2, r3}
 8004586:	b507      	push	{r0, r1, r2, lr}
 8004588:	4906      	ldr	r1, [pc, #24]	; (80045a4 <iprintf+0x20>)
 800458a:	ab04      	add	r3, sp, #16
 800458c:	6808      	ldr	r0, [r1, #0]
 800458e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004592:	6881      	ldr	r1, [r0, #8]
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	f000 f9e7 	bl	8004968 <_vfiprintf_r>
 800459a:	b003      	add	sp, #12
 800459c:	f85d eb04 	ldr.w	lr, [sp], #4
 80045a0:	b004      	add	sp, #16
 80045a2:	4770      	bx	lr
 80045a4:	20000064 	.word	0x20000064

080045a8 <__sread>:
 80045a8:	b510      	push	{r4, lr}
 80045aa:	460c      	mov	r4, r1
 80045ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b0:	f000 f868 	bl	8004684 <_read_r>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	bfab      	itete	ge
 80045b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045ba:	89a3      	ldrhlt	r3, [r4, #12]
 80045bc:	181b      	addge	r3, r3, r0
 80045be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045c2:	bfac      	ite	ge
 80045c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80045c6:	81a3      	strhlt	r3, [r4, #12]
 80045c8:	bd10      	pop	{r4, pc}

080045ca <__swrite>:
 80045ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ce:	461f      	mov	r7, r3
 80045d0:	898b      	ldrh	r3, [r1, #12]
 80045d2:	05db      	lsls	r3, r3, #23
 80045d4:	4605      	mov	r5, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	4616      	mov	r6, r2
 80045da:	d505      	bpl.n	80045e8 <__swrite+0x1e>
 80045dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e0:	2302      	movs	r3, #2
 80045e2:	2200      	movs	r2, #0
 80045e4:	f000 f83c 	bl	8004660 <_lseek_r>
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f2:	81a3      	strh	r3, [r4, #12]
 80045f4:	4632      	mov	r2, r6
 80045f6:	463b      	mov	r3, r7
 80045f8:	4628      	mov	r0, r5
 80045fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045fe:	f000 b853 	b.w	80046a8 <_write_r>

08004602 <__sseek>:
 8004602:	b510      	push	{r4, lr}
 8004604:	460c      	mov	r4, r1
 8004606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460a:	f000 f829 	bl	8004660 <_lseek_r>
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	bf15      	itete	ne
 8004614:	6560      	strne	r0, [r4, #84]	; 0x54
 8004616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800461a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800461e:	81a3      	strheq	r3, [r4, #12]
 8004620:	bf18      	it	ne
 8004622:	81a3      	strhne	r3, [r4, #12]
 8004624:	bd10      	pop	{r4, pc}

08004626 <__sclose>:
 8004626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462a:	f000 b809 	b.w	8004640 <_close_r>

0800462e <memset>:
 800462e:	4402      	add	r2, r0
 8004630:	4603      	mov	r3, r0
 8004632:	4293      	cmp	r3, r2
 8004634:	d100      	bne.n	8004638 <memset+0xa>
 8004636:	4770      	bx	lr
 8004638:	f803 1b01 	strb.w	r1, [r3], #1
 800463c:	e7f9      	b.n	8004632 <memset+0x4>
	...

08004640 <_close_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4d06      	ldr	r5, [pc, #24]	; (800465c <_close_r+0x1c>)
 8004644:	2300      	movs	r3, #0
 8004646:	4604      	mov	r4, r0
 8004648:	4608      	mov	r0, r1
 800464a:	602b      	str	r3, [r5, #0]
 800464c:	f7fc fb51 	bl	8000cf2 <_close>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d102      	bne.n	800465a <_close_r+0x1a>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	b103      	cbz	r3, 800465a <_close_r+0x1a>
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	20000270 	.word	0x20000270

08004660 <_lseek_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4d07      	ldr	r5, [pc, #28]	; (8004680 <_lseek_r+0x20>)
 8004664:	4604      	mov	r4, r0
 8004666:	4608      	mov	r0, r1
 8004668:	4611      	mov	r1, r2
 800466a:	2200      	movs	r2, #0
 800466c:	602a      	str	r2, [r5, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	f7fc fb66 	bl	8000d40 <_lseek>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_lseek_r+0x1e>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_lseek_r+0x1e>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	20000270 	.word	0x20000270

08004684 <_read_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d07      	ldr	r5, [pc, #28]	; (80046a4 <_read_r+0x20>)
 8004688:	4604      	mov	r4, r0
 800468a:	4608      	mov	r0, r1
 800468c:	4611      	mov	r1, r2
 800468e:	2200      	movs	r2, #0
 8004690:	602a      	str	r2, [r5, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f7fc fb10 	bl	8000cb8 <_read>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_read_r+0x1e>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_read_r+0x1e>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	20000270 	.word	0x20000270

080046a8 <_write_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d07      	ldr	r5, [pc, #28]	; (80046c8 <_write_r+0x20>)
 80046ac:	4604      	mov	r4, r0
 80046ae:	4608      	mov	r0, r1
 80046b0:	4611      	mov	r1, r2
 80046b2:	2200      	movs	r2, #0
 80046b4:	602a      	str	r2, [r5, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f7fb ff72 	bl	80005a0 <_write>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d102      	bne.n	80046c6 <_write_r+0x1e>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	b103      	cbz	r3, 80046c6 <_write_r+0x1e>
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	20000270 	.word	0x20000270

080046cc <__errno>:
 80046cc:	4b01      	ldr	r3, [pc, #4]	; (80046d4 <__errno+0x8>)
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000064 	.word	0x20000064

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	4d0d      	ldr	r5, [pc, #52]	; (8004710 <__libc_init_array+0x38>)
 80046dc:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <__libc_init_array+0x3c>)
 80046de:	1b64      	subs	r4, r4, r5
 80046e0:	10a4      	asrs	r4, r4, #2
 80046e2:	2600      	movs	r6, #0
 80046e4:	42a6      	cmp	r6, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	4d0b      	ldr	r5, [pc, #44]	; (8004718 <__libc_init_array+0x40>)
 80046ea:	4c0c      	ldr	r4, [pc, #48]	; (800471c <__libc_init_array+0x44>)
 80046ec:	f000 fdbe 	bl	800526c <_init>
 80046f0:	1b64      	subs	r4, r4, r5
 80046f2:	10a4      	asrs	r4, r4, #2
 80046f4:	2600      	movs	r6, #0
 80046f6:	42a6      	cmp	r6, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004700:	4798      	blx	r3
 8004702:	3601      	adds	r6, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	f855 3b04 	ldr.w	r3, [r5], #4
 800470a:	4798      	blx	r3
 800470c:	3601      	adds	r6, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	08005328 	.word	0x08005328
 8004714:	08005328 	.word	0x08005328
 8004718:	08005328 	.word	0x08005328
 800471c:	0800532c 	.word	0x0800532c

08004720 <__retarget_lock_acquire_recursive>:
 8004720:	4770      	bx	lr

08004722 <__retarget_lock_release_recursive>:
 8004722:	4770      	bx	lr

08004724 <_free_r>:
 8004724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004726:	2900      	cmp	r1, #0
 8004728:	d044      	beq.n	80047b4 <_free_r+0x90>
 800472a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800472e:	9001      	str	r0, [sp, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f1a1 0404 	sub.w	r4, r1, #4
 8004736:	bfb8      	it	lt
 8004738:	18e4      	addlt	r4, r4, r3
 800473a:	f000 f8df 	bl	80048fc <__malloc_lock>
 800473e:	4a1e      	ldr	r2, [pc, #120]	; (80047b8 <_free_r+0x94>)
 8004740:	9801      	ldr	r0, [sp, #4]
 8004742:	6813      	ldr	r3, [r2, #0]
 8004744:	b933      	cbnz	r3, 8004754 <_free_r+0x30>
 8004746:	6063      	str	r3, [r4, #4]
 8004748:	6014      	str	r4, [r2, #0]
 800474a:	b003      	add	sp, #12
 800474c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004750:	f000 b8da 	b.w	8004908 <__malloc_unlock>
 8004754:	42a3      	cmp	r3, r4
 8004756:	d908      	bls.n	800476a <_free_r+0x46>
 8004758:	6825      	ldr	r5, [r4, #0]
 800475a:	1961      	adds	r1, r4, r5
 800475c:	428b      	cmp	r3, r1
 800475e:	bf01      	itttt	eq
 8004760:	6819      	ldreq	r1, [r3, #0]
 8004762:	685b      	ldreq	r3, [r3, #4]
 8004764:	1949      	addeq	r1, r1, r5
 8004766:	6021      	streq	r1, [r4, #0]
 8004768:	e7ed      	b.n	8004746 <_free_r+0x22>
 800476a:	461a      	mov	r2, r3
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	b10b      	cbz	r3, 8004774 <_free_r+0x50>
 8004770:	42a3      	cmp	r3, r4
 8004772:	d9fa      	bls.n	800476a <_free_r+0x46>
 8004774:	6811      	ldr	r1, [r2, #0]
 8004776:	1855      	adds	r5, r2, r1
 8004778:	42a5      	cmp	r5, r4
 800477a:	d10b      	bne.n	8004794 <_free_r+0x70>
 800477c:	6824      	ldr	r4, [r4, #0]
 800477e:	4421      	add	r1, r4
 8004780:	1854      	adds	r4, r2, r1
 8004782:	42a3      	cmp	r3, r4
 8004784:	6011      	str	r1, [r2, #0]
 8004786:	d1e0      	bne.n	800474a <_free_r+0x26>
 8004788:	681c      	ldr	r4, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	6053      	str	r3, [r2, #4]
 800478e:	440c      	add	r4, r1
 8004790:	6014      	str	r4, [r2, #0]
 8004792:	e7da      	b.n	800474a <_free_r+0x26>
 8004794:	d902      	bls.n	800479c <_free_r+0x78>
 8004796:	230c      	movs	r3, #12
 8004798:	6003      	str	r3, [r0, #0]
 800479a:	e7d6      	b.n	800474a <_free_r+0x26>
 800479c:	6825      	ldr	r5, [r4, #0]
 800479e:	1961      	adds	r1, r4, r5
 80047a0:	428b      	cmp	r3, r1
 80047a2:	bf04      	itt	eq
 80047a4:	6819      	ldreq	r1, [r3, #0]
 80047a6:	685b      	ldreq	r3, [r3, #4]
 80047a8:	6063      	str	r3, [r4, #4]
 80047aa:	bf04      	itt	eq
 80047ac:	1949      	addeq	r1, r1, r5
 80047ae:	6021      	streq	r1, [r4, #0]
 80047b0:	6054      	str	r4, [r2, #4]
 80047b2:	e7ca      	b.n	800474a <_free_r+0x26>
 80047b4:	b003      	add	sp, #12
 80047b6:	bd30      	pop	{r4, r5, pc}
 80047b8:	20000278 	.word	0x20000278

080047bc <sbrk_aligned>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	4e0e      	ldr	r6, [pc, #56]	; (80047f8 <sbrk_aligned+0x3c>)
 80047c0:	460c      	mov	r4, r1
 80047c2:	6831      	ldr	r1, [r6, #0]
 80047c4:	4605      	mov	r5, r0
 80047c6:	b911      	cbnz	r1, 80047ce <sbrk_aligned+0x12>
 80047c8:	f000 fcbc 	bl	8005144 <_sbrk_r>
 80047cc:	6030      	str	r0, [r6, #0]
 80047ce:	4621      	mov	r1, r4
 80047d0:	4628      	mov	r0, r5
 80047d2:	f000 fcb7 	bl	8005144 <_sbrk_r>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	d00a      	beq.n	80047f0 <sbrk_aligned+0x34>
 80047da:	1cc4      	adds	r4, r0, #3
 80047dc:	f024 0403 	bic.w	r4, r4, #3
 80047e0:	42a0      	cmp	r0, r4
 80047e2:	d007      	beq.n	80047f4 <sbrk_aligned+0x38>
 80047e4:	1a21      	subs	r1, r4, r0
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 fcac 	bl	8005144 <_sbrk_r>
 80047ec:	3001      	adds	r0, #1
 80047ee:	d101      	bne.n	80047f4 <sbrk_aligned+0x38>
 80047f0:	f04f 34ff 	mov.w	r4, #4294967295
 80047f4:	4620      	mov	r0, r4
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	2000027c 	.word	0x2000027c

080047fc <_malloc_r>:
 80047fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004800:	1ccd      	adds	r5, r1, #3
 8004802:	f025 0503 	bic.w	r5, r5, #3
 8004806:	3508      	adds	r5, #8
 8004808:	2d0c      	cmp	r5, #12
 800480a:	bf38      	it	cc
 800480c:	250c      	movcc	r5, #12
 800480e:	2d00      	cmp	r5, #0
 8004810:	4607      	mov	r7, r0
 8004812:	db01      	blt.n	8004818 <_malloc_r+0x1c>
 8004814:	42a9      	cmp	r1, r5
 8004816:	d905      	bls.n	8004824 <_malloc_r+0x28>
 8004818:	230c      	movs	r3, #12
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	2600      	movs	r6, #0
 800481e:	4630      	mov	r0, r6
 8004820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004824:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80048f8 <_malloc_r+0xfc>
 8004828:	f000 f868 	bl	80048fc <__malloc_lock>
 800482c:	f8d8 3000 	ldr.w	r3, [r8]
 8004830:	461c      	mov	r4, r3
 8004832:	bb5c      	cbnz	r4, 800488c <_malloc_r+0x90>
 8004834:	4629      	mov	r1, r5
 8004836:	4638      	mov	r0, r7
 8004838:	f7ff ffc0 	bl	80047bc <sbrk_aligned>
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	4604      	mov	r4, r0
 8004840:	d155      	bne.n	80048ee <_malloc_r+0xf2>
 8004842:	f8d8 4000 	ldr.w	r4, [r8]
 8004846:	4626      	mov	r6, r4
 8004848:	2e00      	cmp	r6, #0
 800484a:	d145      	bne.n	80048d8 <_malloc_r+0xdc>
 800484c:	2c00      	cmp	r4, #0
 800484e:	d048      	beq.n	80048e2 <_malloc_r+0xe6>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	4631      	mov	r1, r6
 8004854:	4638      	mov	r0, r7
 8004856:	eb04 0903 	add.w	r9, r4, r3
 800485a:	f000 fc73 	bl	8005144 <_sbrk_r>
 800485e:	4581      	cmp	r9, r0
 8004860:	d13f      	bne.n	80048e2 <_malloc_r+0xe6>
 8004862:	6821      	ldr	r1, [r4, #0]
 8004864:	1a6d      	subs	r5, r5, r1
 8004866:	4629      	mov	r1, r5
 8004868:	4638      	mov	r0, r7
 800486a:	f7ff ffa7 	bl	80047bc <sbrk_aligned>
 800486e:	3001      	adds	r0, #1
 8004870:	d037      	beq.n	80048e2 <_malloc_r+0xe6>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	442b      	add	r3, r5
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	f8d8 3000 	ldr.w	r3, [r8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d038      	beq.n	80048f2 <_malloc_r+0xf6>
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	42a2      	cmp	r2, r4
 8004884:	d12b      	bne.n	80048de <_malloc_r+0xe2>
 8004886:	2200      	movs	r2, #0
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	e00f      	b.n	80048ac <_malloc_r+0xb0>
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	1b52      	subs	r2, r2, r5
 8004890:	d41f      	bmi.n	80048d2 <_malloc_r+0xd6>
 8004892:	2a0b      	cmp	r2, #11
 8004894:	d917      	bls.n	80048c6 <_malloc_r+0xca>
 8004896:	1961      	adds	r1, r4, r5
 8004898:	42a3      	cmp	r3, r4
 800489a:	6025      	str	r5, [r4, #0]
 800489c:	bf18      	it	ne
 800489e:	6059      	strne	r1, [r3, #4]
 80048a0:	6863      	ldr	r3, [r4, #4]
 80048a2:	bf08      	it	eq
 80048a4:	f8c8 1000 	streq.w	r1, [r8]
 80048a8:	5162      	str	r2, [r4, r5]
 80048aa:	604b      	str	r3, [r1, #4]
 80048ac:	4638      	mov	r0, r7
 80048ae:	f104 060b 	add.w	r6, r4, #11
 80048b2:	f000 f829 	bl	8004908 <__malloc_unlock>
 80048b6:	f026 0607 	bic.w	r6, r6, #7
 80048ba:	1d23      	adds	r3, r4, #4
 80048bc:	1af2      	subs	r2, r6, r3
 80048be:	d0ae      	beq.n	800481e <_malloc_r+0x22>
 80048c0:	1b9b      	subs	r3, r3, r6
 80048c2:	50a3      	str	r3, [r4, r2]
 80048c4:	e7ab      	b.n	800481e <_malloc_r+0x22>
 80048c6:	42a3      	cmp	r3, r4
 80048c8:	6862      	ldr	r2, [r4, #4]
 80048ca:	d1dd      	bne.n	8004888 <_malloc_r+0x8c>
 80048cc:	f8c8 2000 	str.w	r2, [r8]
 80048d0:	e7ec      	b.n	80048ac <_malloc_r+0xb0>
 80048d2:	4623      	mov	r3, r4
 80048d4:	6864      	ldr	r4, [r4, #4]
 80048d6:	e7ac      	b.n	8004832 <_malloc_r+0x36>
 80048d8:	4634      	mov	r4, r6
 80048da:	6876      	ldr	r6, [r6, #4]
 80048dc:	e7b4      	b.n	8004848 <_malloc_r+0x4c>
 80048de:	4613      	mov	r3, r2
 80048e0:	e7cc      	b.n	800487c <_malloc_r+0x80>
 80048e2:	230c      	movs	r3, #12
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	4638      	mov	r0, r7
 80048e8:	f000 f80e 	bl	8004908 <__malloc_unlock>
 80048ec:	e797      	b.n	800481e <_malloc_r+0x22>
 80048ee:	6025      	str	r5, [r4, #0]
 80048f0:	e7dc      	b.n	80048ac <_malloc_r+0xb0>
 80048f2:	605b      	str	r3, [r3, #4]
 80048f4:	deff      	udf	#255	; 0xff
 80048f6:	bf00      	nop
 80048f8:	20000278 	.word	0x20000278

080048fc <__malloc_lock>:
 80048fc:	4801      	ldr	r0, [pc, #4]	; (8004904 <__malloc_lock+0x8>)
 80048fe:	f7ff bf0f 	b.w	8004720 <__retarget_lock_acquire_recursive>
 8004902:	bf00      	nop
 8004904:	20000274 	.word	0x20000274

08004908 <__malloc_unlock>:
 8004908:	4801      	ldr	r0, [pc, #4]	; (8004910 <__malloc_unlock+0x8>)
 800490a:	f7ff bf0a 	b.w	8004722 <__retarget_lock_release_recursive>
 800490e:	bf00      	nop
 8004910:	20000274 	.word	0x20000274

08004914 <__sfputc_r>:
 8004914:	6893      	ldr	r3, [r2, #8]
 8004916:	3b01      	subs	r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	b410      	push	{r4}
 800491c:	6093      	str	r3, [r2, #8]
 800491e:	da08      	bge.n	8004932 <__sfputc_r+0x1e>
 8004920:	6994      	ldr	r4, [r2, #24]
 8004922:	42a3      	cmp	r3, r4
 8004924:	db01      	blt.n	800492a <__sfputc_r+0x16>
 8004926:	290a      	cmp	r1, #10
 8004928:	d103      	bne.n	8004932 <__sfputc_r+0x1e>
 800492a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800492e:	f000 bb73 	b.w	8005018 <__swbuf_r>
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	1c58      	adds	r0, r3, #1
 8004936:	6010      	str	r0, [r2, #0]
 8004938:	7019      	strb	r1, [r3, #0]
 800493a:	4608      	mov	r0, r1
 800493c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004940:	4770      	bx	lr

08004942 <__sfputs_r>:
 8004942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004944:	4606      	mov	r6, r0
 8004946:	460f      	mov	r7, r1
 8004948:	4614      	mov	r4, r2
 800494a:	18d5      	adds	r5, r2, r3
 800494c:	42ac      	cmp	r4, r5
 800494e:	d101      	bne.n	8004954 <__sfputs_r+0x12>
 8004950:	2000      	movs	r0, #0
 8004952:	e007      	b.n	8004964 <__sfputs_r+0x22>
 8004954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004958:	463a      	mov	r2, r7
 800495a:	4630      	mov	r0, r6
 800495c:	f7ff ffda 	bl	8004914 <__sfputc_r>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	d1f3      	bne.n	800494c <__sfputs_r+0xa>
 8004964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004968 <_vfiprintf_r>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	460d      	mov	r5, r1
 800496e:	b09d      	sub	sp, #116	; 0x74
 8004970:	4614      	mov	r4, r2
 8004972:	4698      	mov	r8, r3
 8004974:	4606      	mov	r6, r0
 8004976:	b118      	cbz	r0, 8004980 <_vfiprintf_r+0x18>
 8004978:	6a03      	ldr	r3, [r0, #32]
 800497a:	b90b      	cbnz	r3, 8004980 <_vfiprintf_r+0x18>
 800497c:	f7ff fdcc 	bl	8004518 <__sinit>
 8004980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004982:	07d9      	lsls	r1, r3, #31
 8004984:	d405      	bmi.n	8004992 <_vfiprintf_r+0x2a>
 8004986:	89ab      	ldrh	r3, [r5, #12]
 8004988:	059a      	lsls	r2, r3, #22
 800498a:	d402      	bmi.n	8004992 <_vfiprintf_r+0x2a>
 800498c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800498e:	f7ff fec7 	bl	8004720 <__retarget_lock_acquire_recursive>
 8004992:	89ab      	ldrh	r3, [r5, #12]
 8004994:	071b      	lsls	r3, r3, #28
 8004996:	d501      	bpl.n	800499c <_vfiprintf_r+0x34>
 8004998:	692b      	ldr	r3, [r5, #16]
 800499a:	b99b      	cbnz	r3, 80049c4 <_vfiprintf_r+0x5c>
 800499c:	4629      	mov	r1, r5
 800499e:	4630      	mov	r0, r6
 80049a0:	f000 fb78 	bl	8005094 <__swsetup_r>
 80049a4:	b170      	cbz	r0, 80049c4 <_vfiprintf_r+0x5c>
 80049a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049a8:	07dc      	lsls	r4, r3, #31
 80049aa:	d504      	bpl.n	80049b6 <_vfiprintf_r+0x4e>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	b01d      	add	sp, #116	; 0x74
 80049b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b6:	89ab      	ldrh	r3, [r5, #12]
 80049b8:	0598      	lsls	r0, r3, #22
 80049ba:	d4f7      	bmi.n	80049ac <_vfiprintf_r+0x44>
 80049bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049be:	f7ff feb0 	bl	8004722 <__retarget_lock_release_recursive>
 80049c2:	e7f3      	b.n	80049ac <_vfiprintf_r+0x44>
 80049c4:	2300      	movs	r3, #0
 80049c6:	9309      	str	r3, [sp, #36]	; 0x24
 80049c8:	2320      	movs	r3, #32
 80049ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80049d2:	2330      	movs	r3, #48	; 0x30
 80049d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004b88 <_vfiprintf_r+0x220>
 80049d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049dc:	f04f 0901 	mov.w	r9, #1
 80049e0:	4623      	mov	r3, r4
 80049e2:	469a      	mov	sl, r3
 80049e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049e8:	b10a      	cbz	r2, 80049ee <_vfiprintf_r+0x86>
 80049ea:	2a25      	cmp	r2, #37	; 0x25
 80049ec:	d1f9      	bne.n	80049e2 <_vfiprintf_r+0x7a>
 80049ee:	ebba 0b04 	subs.w	fp, sl, r4
 80049f2:	d00b      	beq.n	8004a0c <_vfiprintf_r+0xa4>
 80049f4:	465b      	mov	r3, fp
 80049f6:	4622      	mov	r2, r4
 80049f8:	4629      	mov	r1, r5
 80049fa:	4630      	mov	r0, r6
 80049fc:	f7ff ffa1 	bl	8004942 <__sfputs_r>
 8004a00:	3001      	adds	r0, #1
 8004a02:	f000 80a9 	beq.w	8004b58 <_vfiprintf_r+0x1f0>
 8004a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a08:	445a      	add	r2, fp
 8004a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80a1 	beq.w	8004b58 <_vfiprintf_r+0x1f0>
 8004a16:	2300      	movs	r3, #0
 8004a18:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a20:	f10a 0a01 	add.w	sl, sl, #1
 8004a24:	9304      	str	r3, [sp, #16]
 8004a26:	9307      	str	r3, [sp, #28]
 8004a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8004a2e:	4654      	mov	r4, sl
 8004a30:	2205      	movs	r2, #5
 8004a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a36:	4854      	ldr	r0, [pc, #336]	; (8004b88 <_vfiprintf_r+0x220>)
 8004a38:	f7fb fbca 	bl	80001d0 <memchr>
 8004a3c:	9a04      	ldr	r2, [sp, #16]
 8004a3e:	b9d8      	cbnz	r0, 8004a78 <_vfiprintf_r+0x110>
 8004a40:	06d1      	lsls	r1, r2, #27
 8004a42:	bf44      	itt	mi
 8004a44:	2320      	movmi	r3, #32
 8004a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a4a:	0713      	lsls	r3, r2, #28
 8004a4c:	bf44      	itt	mi
 8004a4e:	232b      	movmi	r3, #43	; 0x2b
 8004a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a54:	f89a 3000 	ldrb.w	r3, [sl]
 8004a58:	2b2a      	cmp	r3, #42	; 0x2a
 8004a5a:	d015      	beq.n	8004a88 <_vfiprintf_r+0x120>
 8004a5c:	9a07      	ldr	r2, [sp, #28]
 8004a5e:	4654      	mov	r4, sl
 8004a60:	2000      	movs	r0, #0
 8004a62:	f04f 0c0a 	mov.w	ip, #10
 8004a66:	4621      	mov	r1, r4
 8004a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a6c:	3b30      	subs	r3, #48	; 0x30
 8004a6e:	2b09      	cmp	r3, #9
 8004a70:	d94d      	bls.n	8004b0e <_vfiprintf_r+0x1a6>
 8004a72:	b1b0      	cbz	r0, 8004aa2 <_vfiprintf_r+0x13a>
 8004a74:	9207      	str	r2, [sp, #28]
 8004a76:	e014      	b.n	8004aa2 <_vfiprintf_r+0x13a>
 8004a78:	eba0 0308 	sub.w	r3, r0, r8
 8004a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a80:	4313      	orrs	r3, r2
 8004a82:	9304      	str	r3, [sp, #16]
 8004a84:	46a2      	mov	sl, r4
 8004a86:	e7d2      	b.n	8004a2e <_vfiprintf_r+0xc6>
 8004a88:	9b03      	ldr	r3, [sp, #12]
 8004a8a:	1d19      	adds	r1, r3, #4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	9103      	str	r1, [sp, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bfbb      	ittet	lt
 8004a94:	425b      	neglt	r3, r3
 8004a96:	f042 0202 	orrlt.w	r2, r2, #2
 8004a9a:	9307      	strge	r3, [sp, #28]
 8004a9c:	9307      	strlt	r3, [sp, #28]
 8004a9e:	bfb8      	it	lt
 8004aa0:	9204      	strlt	r2, [sp, #16]
 8004aa2:	7823      	ldrb	r3, [r4, #0]
 8004aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8004aa6:	d10c      	bne.n	8004ac2 <_vfiprintf_r+0x15a>
 8004aa8:	7863      	ldrb	r3, [r4, #1]
 8004aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8004aac:	d134      	bne.n	8004b18 <_vfiprintf_r+0x1b0>
 8004aae:	9b03      	ldr	r3, [sp, #12]
 8004ab0:	1d1a      	adds	r2, r3, #4
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	9203      	str	r2, [sp, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bfb8      	it	lt
 8004aba:	f04f 33ff 	movlt.w	r3, #4294967295
 8004abe:	3402      	adds	r4, #2
 8004ac0:	9305      	str	r3, [sp, #20]
 8004ac2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004b98 <_vfiprintf_r+0x230>
 8004ac6:	7821      	ldrb	r1, [r4, #0]
 8004ac8:	2203      	movs	r2, #3
 8004aca:	4650      	mov	r0, sl
 8004acc:	f7fb fb80 	bl	80001d0 <memchr>
 8004ad0:	b138      	cbz	r0, 8004ae2 <_vfiprintf_r+0x17a>
 8004ad2:	9b04      	ldr	r3, [sp, #16]
 8004ad4:	eba0 000a 	sub.w	r0, r0, sl
 8004ad8:	2240      	movs	r2, #64	; 0x40
 8004ada:	4082      	lsls	r2, r0
 8004adc:	4313      	orrs	r3, r2
 8004ade:	3401      	adds	r4, #1
 8004ae0:	9304      	str	r3, [sp, #16]
 8004ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae6:	4829      	ldr	r0, [pc, #164]	; (8004b8c <_vfiprintf_r+0x224>)
 8004ae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004aec:	2206      	movs	r2, #6
 8004aee:	f7fb fb6f 	bl	80001d0 <memchr>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d03f      	beq.n	8004b76 <_vfiprintf_r+0x20e>
 8004af6:	4b26      	ldr	r3, [pc, #152]	; (8004b90 <_vfiprintf_r+0x228>)
 8004af8:	bb1b      	cbnz	r3, 8004b42 <_vfiprintf_r+0x1da>
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	3307      	adds	r3, #7
 8004afe:	f023 0307 	bic.w	r3, r3, #7
 8004b02:	3308      	adds	r3, #8
 8004b04:	9303      	str	r3, [sp, #12]
 8004b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b08:	443b      	add	r3, r7
 8004b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b0c:	e768      	b.n	80049e0 <_vfiprintf_r+0x78>
 8004b0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b12:	460c      	mov	r4, r1
 8004b14:	2001      	movs	r0, #1
 8004b16:	e7a6      	b.n	8004a66 <_vfiprintf_r+0xfe>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	3401      	adds	r4, #1
 8004b1c:	9305      	str	r3, [sp, #20]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f04f 0c0a 	mov.w	ip, #10
 8004b24:	4620      	mov	r0, r4
 8004b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b2a:	3a30      	subs	r2, #48	; 0x30
 8004b2c:	2a09      	cmp	r2, #9
 8004b2e:	d903      	bls.n	8004b38 <_vfiprintf_r+0x1d0>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0c6      	beq.n	8004ac2 <_vfiprintf_r+0x15a>
 8004b34:	9105      	str	r1, [sp, #20]
 8004b36:	e7c4      	b.n	8004ac2 <_vfiprintf_r+0x15a>
 8004b38:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e7f0      	b.n	8004b24 <_vfiprintf_r+0x1bc>
 8004b42:	ab03      	add	r3, sp, #12
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	462a      	mov	r2, r5
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <_vfiprintf_r+0x22c>)
 8004b4a:	a904      	add	r1, sp, #16
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f3af 8000 	nop.w
 8004b52:	4607      	mov	r7, r0
 8004b54:	1c78      	adds	r0, r7, #1
 8004b56:	d1d6      	bne.n	8004b06 <_vfiprintf_r+0x19e>
 8004b58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b5a:	07d9      	lsls	r1, r3, #31
 8004b5c:	d405      	bmi.n	8004b6a <_vfiprintf_r+0x202>
 8004b5e:	89ab      	ldrh	r3, [r5, #12]
 8004b60:	059a      	lsls	r2, r3, #22
 8004b62:	d402      	bmi.n	8004b6a <_vfiprintf_r+0x202>
 8004b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b66:	f7ff fddc 	bl	8004722 <__retarget_lock_release_recursive>
 8004b6a:	89ab      	ldrh	r3, [r5, #12]
 8004b6c:	065b      	lsls	r3, r3, #25
 8004b6e:	f53f af1d 	bmi.w	80049ac <_vfiprintf_r+0x44>
 8004b72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b74:	e71c      	b.n	80049b0 <_vfiprintf_r+0x48>
 8004b76:	ab03      	add	r3, sp, #12
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	462a      	mov	r2, r5
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <_vfiprintf_r+0x22c>)
 8004b7e:	a904      	add	r1, sp, #16
 8004b80:	4630      	mov	r0, r6
 8004b82:	f000 f879 	bl	8004c78 <_printf_i>
 8004b86:	e7e4      	b.n	8004b52 <_vfiprintf_r+0x1ea>
 8004b88:	080052ec 	.word	0x080052ec
 8004b8c:	080052f6 	.word	0x080052f6
 8004b90:	00000000 	.word	0x00000000
 8004b94:	08004943 	.word	0x08004943
 8004b98:	080052f2 	.word	0x080052f2

08004b9c <_printf_common>:
 8004b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	4616      	mov	r6, r2
 8004ba2:	4699      	mov	r9, r3
 8004ba4:	688a      	ldr	r2, [r1, #8]
 8004ba6:	690b      	ldr	r3, [r1, #16]
 8004ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bac:	4293      	cmp	r3, r2
 8004bae:	bfb8      	it	lt
 8004bb0:	4613      	movlt	r3, r2
 8004bb2:	6033      	str	r3, [r6, #0]
 8004bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bb8:	4607      	mov	r7, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	b10a      	cbz	r2, 8004bc2 <_printf_common+0x26>
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	6033      	str	r3, [r6, #0]
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	0699      	lsls	r1, r3, #26
 8004bc6:	bf42      	ittt	mi
 8004bc8:	6833      	ldrmi	r3, [r6, #0]
 8004bca:	3302      	addmi	r3, #2
 8004bcc:	6033      	strmi	r3, [r6, #0]
 8004bce:	6825      	ldr	r5, [r4, #0]
 8004bd0:	f015 0506 	ands.w	r5, r5, #6
 8004bd4:	d106      	bne.n	8004be4 <_printf_common+0x48>
 8004bd6:	f104 0a19 	add.w	sl, r4, #25
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	6832      	ldr	r2, [r6, #0]
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	42ab      	cmp	r3, r5
 8004be2:	dc26      	bgt.n	8004c32 <_printf_common+0x96>
 8004be4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004be8:	1e13      	subs	r3, r2, #0
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	bf18      	it	ne
 8004bee:	2301      	movne	r3, #1
 8004bf0:	0692      	lsls	r2, r2, #26
 8004bf2:	d42b      	bmi.n	8004c4c <_printf_common+0xb0>
 8004bf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	47c0      	blx	r8
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d01e      	beq.n	8004c40 <_printf_common+0xa4>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	6922      	ldr	r2, [r4, #16]
 8004c06:	f003 0306 	and.w	r3, r3, #6
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	bf02      	ittt	eq
 8004c0e:	68e5      	ldreq	r5, [r4, #12]
 8004c10:	6833      	ldreq	r3, [r6, #0]
 8004c12:	1aed      	subeq	r5, r5, r3
 8004c14:	68a3      	ldr	r3, [r4, #8]
 8004c16:	bf0c      	ite	eq
 8004c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c1c:	2500      	movne	r5, #0
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	bfc4      	itt	gt
 8004c22:	1a9b      	subgt	r3, r3, r2
 8004c24:	18ed      	addgt	r5, r5, r3
 8004c26:	2600      	movs	r6, #0
 8004c28:	341a      	adds	r4, #26
 8004c2a:	42b5      	cmp	r5, r6
 8004c2c:	d11a      	bne.n	8004c64 <_printf_common+0xc8>
 8004c2e:	2000      	movs	r0, #0
 8004c30:	e008      	b.n	8004c44 <_printf_common+0xa8>
 8004c32:	2301      	movs	r3, #1
 8004c34:	4652      	mov	r2, sl
 8004c36:	4649      	mov	r1, r9
 8004c38:	4638      	mov	r0, r7
 8004c3a:	47c0      	blx	r8
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d103      	bne.n	8004c48 <_printf_common+0xac>
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c48:	3501      	adds	r5, #1
 8004c4a:	e7c6      	b.n	8004bda <_printf_common+0x3e>
 8004c4c:	18e1      	adds	r1, r4, r3
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	2030      	movs	r0, #48	; 0x30
 8004c52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c56:	4422      	add	r2, r4
 8004c58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c60:	3302      	adds	r3, #2
 8004c62:	e7c7      	b.n	8004bf4 <_printf_common+0x58>
 8004c64:	2301      	movs	r3, #1
 8004c66:	4622      	mov	r2, r4
 8004c68:	4649      	mov	r1, r9
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	47c0      	blx	r8
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d0e6      	beq.n	8004c40 <_printf_common+0xa4>
 8004c72:	3601      	adds	r6, #1
 8004c74:	e7d9      	b.n	8004c2a <_printf_common+0x8e>
	...

08004c78 <_printf_i>:
 8004c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	7e0f      	ldrb	r7, [r1, #24]
 8004c7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c80:	2f78      	cmp	r7, #120	; 0x78
 8004c82:	4691      	mov	r9, r2
 8004c84:	4680      	mov	r8, r0
 8004c86:	460c      	mov	r4, r1
 8004c88:	469a      	mov	sl, r3
 8004c8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c8e:	d807      	bhi.n	8004ca0 <_printf_i+0x28>
 8004c90:	2f62      	cmp	r7, #98	; 0x62
 8004c92:	d80a      	bhi.n	8004caa <_printf_i+0x32>
 8004c94:	2f00      	cmp	r7, #0
 8004c96:	f000 80d4 	beq.w	8004e42 <_printf_i+0x1ca>
 8004c9a:	2f58      	cmp	r7, #88	; 0x58
 8004c9c:	f000 80c0 	beq.w	8004e20 <_printf_i+0x1a8>
 8004ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ca8:	e03a      	b.n	8004d20 <_printf_i+0xa8>
 8004caa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cae:	2b15      	cmp	r3, #21
 8004cb0:	d8f6      	bhi.n	8004ca0 <_printf_i+0x28>
 8004cb2:	a101      	add	r1, pc, #4	; (adr r1, 8004cb8 <_printf_i+0x40>)
 8004cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cb8:	08004d11 	.word	0x08004d11
 8004cbc:	08004d25 	.word	0x08004d25
 8004cc0:	08004ca1 	.word	0x08004ca1
 8004cc4:	08004ca1 	.word	0x08004ca1
 8004cc8:	08004ca1 	.word	0x08004ca1
 8004ccc:	08004ca1 	.word	0x08004ca1
 8004cd0:	08004d25 	.word	0x08004d25
 8004cd4:	08004ca1 	.word	0x08004ca1
 8004cd8:	08004ca1 	.word	0x08004ca1
 8004cdc:	08004ca1 	.word	0x08004ca1
 8004ce0:	08004ca1 	.word	0x08004ca1
 8004ce4:	08004e29 	.word	0x08004e29
 8004ce8:	08004d51 	.word	0x08004d51
 8004cec:	08004de3 	.word	0x08004de3
 8004cf0:	08004ca1 	.word	0x08004ca1
 8004cf4:	08004ca1 	.word	0x08004ca1
 8004cf8:	08004e4b 	.word	0x08004e4b
 8004cfc:	08004ca1 	.word	0x08004ca1
 8004d00:	08004d51 	.word	0x08004d51
 8004d04:	08004ca1 	.word	0x08004ca1
 8004d08:	08004ca1 	.word	0x08004ca1
 8004d0c:	08004deb 	.word	0x08004deb
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	1d1a      	adds	r2, r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	602a      	str	r2, [r5, #0]
 8004d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d20:	2301      	movs	r3, #1
 8004d22:	e09f      	b.n	8004e64 <_printf_i+0x1ec>
 8004d24:	6820      	ldr	r0, [r4, #0]
 8004d26:	682b      	ldr	r3, [r5, #0]
 8004d28:	0607      	lsls	r7, r0, #24
 8004d2a:	f103 0104 	add.w	r1, r3, #4
 8004d2e:	6029      	str	r1, [r5, #0]
 8004d30:	d501      	bpl.n	8004d36 <_printf_i+0xbe>
 8004d32:	681e      	ldr	r6, [r3, #0]
 8004d34:	e003      	b.n	8004d3e <_printf_i+0xc6>
 8004d36:	0646      	lsls	r6, r0, #25
 8004d38:	d5fb      	bpl.n	8004d32 <_printf_i+0xba>
 8004d3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d3e:	2e00      	cmp	r6, #0
 8004d40:	da03      	bge.n	8004d4a <_printf_i+0xd2>
 8004d42:	232d      	movs	r3, #45	; 0x2d
 8004d44:	4276      	negs	r6, r6
 8004d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d4a:	485a      	ldr	r0, [pc, #360]	; (8004eb4 <_printf_i+0x23c>)
 8004d4c:	230a      	movs	r3, #10
 8004d4e:	e012      	b.n	8004d76 <_printf_i+0xfe>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	6820      	ldr	r0, [r4, #0]
 8004d54:	1d19      	adds	r1, r3, #4
 8004d56:	6029      	str	r1, [r5, #0]
 8004d58:	0605      	lsls	r5, r0, #24
 8004d5a:	d501      	bpl.n	8004d60 <_printf_i+0xe8>
 8004d5c:	681e      	ldr	r6, [r3, #0]
 8004d5e:	e002      	b.n	8004d66 <_printf_i+0xee>
 8004d60:	0641      	lsls	r1, r0, #25
 8004d62:	d5fb      	bpl.n	8004d5c <_printf_i+0xe4>
 8004d64:	881e      	ldrh	r6, [r3, #0]
 8004d66:	4853      	ldr	r0, [pc, #332]	; (8004eb4 <_printf_i+0x23c>)
 8004d68:	2f6f      	cmp	r7, #111	; 0x6f
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2308      	moveq	r3, #8
 8004d6e:	230a      	movne	r3, #10
 8004d70:	2100      	movs	r1, #0
 8004d72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d76:	6865      	ldr	r5, [r4, #4]
 8004d78:	60a5      	str	r5, [r4, #8]
 8004d7a:	2d00      	cmp	r5, #0
 8004d7c:	bfa2      	ittt	ge
 8004d7e:	6821      	ldrge	r1, [r4, #0]
 8004d80:	f021 0104 	bicge.w	r1, r1, #4
 8004d84:	6021      	strge	r1, [r4, #0]
 8004d86:	b90e      	cbnz	r6, 8004d8c <_printf_i+0x114>
 8004d88:	2d00      	cmp	r5, #0
 8004d8a:	d04b      	beq.n	8004e24 <_printf_i+0x1ac>
 8004d8c:	4615      	mov	r5, r2
 8004d8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d92:	fb03 6711 	mls	r7, r3, r1, r6
 8004d96:	5dc7      	ldrb	r7, [r0, r7]
 8004d98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d9c:	4637      	mov	r7, r6
 8004d9e:	42bb      	cmp	r3, r7
 8004da0:	460e      	mov	r6, r1
 8004da2:	d9f4      	bls.n	8004d8e <_printf_i+0x116>
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d10b      	bne.n	8004dc0 <_printf_i+0x148>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	07de      	lsls	r6, r3, #31
 8004dac:	d508      	bpl.n	8004dc0 <_printf_i+0x148>
 8004dae:	6923      	ldr	r3, [r4, #16]
 8004db0:	6861      	ldr	r1, [r4, #4]
 8004db2:	4299      	cmp	r1, r3
 8004db4:	bfde      	ittt	le
 8004db6:	2330      	movle	r3, #48	; 0x30
 8004db8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dc0:	1b52      	subs	r2, r2, r5
 8004dc2:	6122      	str	r2, [r4, #16]
 8004dc4:	f8cd a000 	str.w	sl, [sp]
 8004dc8:	464b      	mov	r3, r9
 8004dca:	aa03      	add	r2, sp, #12
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4640      	mov	r0, r8
 8004dd0:	f7ff fee4 	bl	8004b9c <_printf_common>
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d14a      	bne.n	8004e6e <_printf_i+0x1f6>
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	b004      	add	sp, #16
 8004dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f043 0320 	orr.w	r3, r3, #32
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	4833      	ldr	r0, [pc, #204]	; (8004eb8 <_printf_i+0x240>)
 8004dec:	2778      	movs	r7, #120	; 0x78
 8004dee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	6829      	ldr	r1, [r5, #0]
 8004df6:	061f      	lsls	r7, r3, #24
 8004df8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dfc:	d402      	bmi.n	8004e04 <_printf_i+0x18c>
 8004dfe:	065f      	lsls	r7, r3, #25
 8004e00:	bf48      	it	mi
 8004e02:	b2b6      	uxthmi	r6, r6
 8004e04:	07df      	lsls	r7, r3, #31
 8004e06:	bf48      	it	mi
 8004e08:	f043 0320 	orrmi.w	r3, r3, #32
 8004e0c:	6029      	str	r1, [r5, #0]
 8004e0e:	bf48      	it	mi
 8004e10:	6023      	strmi	r3, [r4, #0]
 8004e12:	b91e      	cbnz	r6, 8004e1c <_printf_i+0x1a4>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	f023 0320 	bic.w	r3, r3, #32
 8004e1a:	6023      	str	r3, [r4, #0]
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	e7a7      	b.n	8004d70 <_printf_i+0xf8>
 8004e20:	4824      	ldr	r0, [pc, #144]	; (8004eb4 <_printf_i+0x23c>)
 8004e22:	e7e4      	b.n	8004dee <_printf_i+0x176>
 8004e24:	4615      	mov	r5, r2
 8004e26:	e7bd      	b.n	8004da4 <_printf_i+0x12c>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	6826      	ldr	r6, [r4, #0]
 8004e2c:	6961      	ldr	r1, [r4, #20]
 8004e2e:	1d18      	adds	r0, r3, #4
 8004e30:	6028      	str	r0, [r5, #0]
 8004e32:	0635      	lsls	r5, r6, #24
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	d501      	bpl.n	8004e3c <_printf_i+0x1c4>
 8004e38:	6019      	str	r1, [r3, #0]
 8004e3a:	e002      	b.n	8004e42 <_printf_i+0x1ca>
 8004e3c:	0670      	lsls	r0, r6, #25
 8004e3e:	d5fb      	bpl.n	8004e38 <_printf_i+0x1c0>
 8004e40:	8019      	strh	r1, [r3, #0]
 8004e42:	2300      	movs	r3, #0
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	4615      	mov	r5, r2
 8004e48:	e7bc      	b.n	8004dc4 <_printf_i+0x14c>
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	1d1a      	adds	r2, r3, #4
 8004e4e:	602a      	str	r2, [r5, #0]
 8004e50:	681d      	ldr	r5, [r3, #0]
 8004e52:	6862      	ldr	r2, [r4, #4]
 8004e54:	2100      	movs	r1, #0
 8004e56:	4628      	mov	r0, r5
 8004e58:	f7fb f9ba 	bl	80001d0 <memchr>
 8004e5c:	b108      	cbz	r0, 8004e62 <_printf_i+0x1ea>
 8004e5e:	1b40      	subs	r0, r0, r5
 8004e60:	6060      	str	r0, [r4, #4]
 8004e62:	6863      	ldr	r3, [r4, #4]
 8004e64:	6123      	str	r3, [r4, #16]
 8004e66:	2300      	movs	r3, #0
 8004e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e6c:	e7aa      	b.n	8004dc4 <_printf_i+0x14c>
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	462a      	mov	r2, r5
 8004e72:	4649      	mov	r1, r9
 8004e74:	4640      	mov	r0, r8
 8004e76:	47d0      	blx	sl
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d0ad      	beq.n	8004dd8 <_printf_i+0x160>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	079b      	lsls	r3, r3, #30
 8004e80:	d413      	bmi.n	8004eaa <_printf_i+0x232>
 8004e82:	68e0      	ldr	r0, [r4, #12]
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	4298      	cmp	r0, r3
 8004e88:	bfb8      	it	lt
 8004e8a:	4618      	movlt	r0, r3
 8004e8c:	e7a6      	b.n	8004ddc <_printf_i+0x164>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	4632      	mov	r2, r6
 8004e92:	4649      	mov	r1, r9
 8004e94:	4640      	mov	r0, r8
 8004e96:	47d0      	blx	sl
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d09d      	beq.n	8004dd8 <_printf_i+0x160>
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	68e3      	ldr	r3, [r4, #12]
 8004ea0:	9903      	ldr	r1, [sp, #12]
 8004ea2:	1a5b      	subs	r3, r3, r1
 8004ea4:	42ab      	cmp	r3, r5
 8004ea6:	dcf2      	bgt.n	8004e8e <_printf_i+0x216>
 8004ea8:	e7eb      	b.n	8004e82 <_printf_i+0x20a>
 8004eaa:	2500      	movs	r5, #0
 8004eac:	f104 0619 	add.w	r6, r4, #25
 8004eb0:	e7f5      	b.n	8004e9e <_printf_i+0x226>
 8004eb2:	bf00      	nop
 8004eb4:	080052fd 	.word	0x080052fd
 8004eb8:	0800530e 	.word	0x0800530e

08004ebc <__sflush_r>:
 8004ebc:	898a      	ldrh	r2, [r1, #12]
 8004ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec2:	4605      	mov	r5, r0
 8004ec4:	0710      	lsls	r0, r2, #28
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	d458      	bmi.n	8004f7c <__sflush_r+0xc0>
 8004eca:	684b      	ldr	r3, [r1, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dc05      	bgt.n	8004edc <__sflush_r+0x20>
 8004ed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	dc02      	bgt.n	8004edc <__sflush_r+0x20>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ede:	2e00      	cmp	r6, #0
 8004ee0:	d0f9      	beq.n	8004ed6 <__sflush_r+0x1a>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ee8:	682f      	ldr	r7, [r5, #0]
 8004eea:	6a21      	ldr	r1, [r4, #32]
 8004eec:	602b      	str	r3, [r5, #0]
 8004eee:	d032      	beq.n	8004f56 <__sflush_r+0x9a>
 8004ef0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	075a      	lsls	r2, r3, #29
 8004ef6:	d505      	bpl.n	8004f04 <__sflush_r+0x48>
 8004ef8:	6863      	ldr	r3, [r4, #4]
 8004efa:	1ac0      	subs	r0, r0, r3
 8004efc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004efe:	b10b      	cbz	r3, 8004f04 <__sflush_r+0x48>
 8004f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f02:	1ac0      	subs	r0, r0, r3
 8004f04:	2300      	movs	r3, #0
 8004f06:	4602      	mov	r2, r0
 8004f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f0a:	6a21      	ldr	r1, [r4, #32]
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b0      	blx	r6
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	d106      	bne.n	8004f24 <__sflush_r+0x68>
 8004f16:	6829      	ldr	r1, [r5, #0]
 8004f18:	291d      	cmp	r1, #29
 8004f1a:	d82b      	bhi.n	8004f74 <__sflush_r+0xb8>
 8004f1c:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <__sflush_r+0x108>)
 8004f1e:	410a      	asrs	r2, r1
 8004f20:	07d6      	lsls	r6, r2, #31
 8004f22:	d427      	bmi.n	8004f74 <__sflush_r+0xb8>
 8004f24:	2200      	movs	r2, #0
 8004f26:	6062      	str	r2, [r4, #4]
 8004f28:	04d9      	lsls	r1, r3, #19
 8004f2a:	6922      	ldr	r2, [r4, #16]
 8004f2c:	6022      	str	r2, [r4, #0]
 8004f2e:	d504      	bpl.n	8004f3a <__sflush_r+0x7e>
 8004f30:	1c42      	adds	r2, r0, #1
 8004f32:	d101      	bne.n	8004f38 <__sflush_r+0x7c>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b903      	cbnz	r3, 8004f3a <__sflush_r+0x7e>
 8004f38:	6560      	str	r0, [r4, #84]	; 0x54
 8004f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f3c:	602f      	str	r7, [r5, #0]
 8004f3e:	2900      	cmp	r1, #0
 8004f40:	d0c9      	beq.n	8004ed6 <__sflush_r+0x1a>
 8004f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f46:	4299      	cmp	r1, r3
 8004f48:	d002      	beq.n	8004f50 <__sflush_r+0x94>
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f7ff fbea 	bl	8004724 <_free_r>
 8004f50:	2000      	movs	r0, #0
 8004f52:	6360      	str	r0, [r4, #52]	; 0x34
 8004f54:	e7c0      	b.n	8004ed8 <__sflush_r+0x1c>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4628      	mov	r0, r5
 8004f5a:	47b0      	blx	r6
 8004f5c:	1c41      	adds	r1, r0, #1
 8004f5e:	d1c8      	bne.n	8004ef2 <__sflush_r+0x36>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0c5      	beq.n	8004ef2 <__sflush_r+0x36>
 8004f66:	2b1d      	cmp	r3, #29
 8004f68:	d001      	beq.n	8004f6e <__sflush_r+0xb2>
 8004f6a:	2b16      	cmp	r3, #22
 8004f6c:	d101      	bne.n	8004f72 <__sflush_r+0xb6>
 8004f6e:	602f      	str	r7, [r5, #0]
 8004f70:	e7b1      	b.n	8004ed6 <__sflush_r+0x1a>
 8004f72:	89a3      	ldrh	r3, [r4, #12]
 8004f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	e7ad      	b.n	8004ed8 <__sflush_r+0x1c>
 8004f7c:	690f      	ldr	r7, [r1, #16]
 8004f7e:	2f00      	cmp	r7, #0
 8004f80:	d0a9      	beq.n	8004ed6 <__sflush_r+0x1a>
 8004f82:	0793      	lsls	r3, r2, #30
 8004f84:	680e      	ldr	r6, [r1, #0]
 8004f86:	bf08      	it	eq
 8004f88:	694b      	ldreq	r3, [r1, #20]
 8004f8a:	600f      	str	r7, [r1, #0]
 8004f8c:	bf18      	it	ne
 8004f8e:	2300      	movne	r3, #0
 8004f90:	eba6 0807 	sub.w	r8, r6, r7
 8004f94:	608b      	str	r3, [r1, #8]
 8004f96:	f1b8 0f00 	cmp.w	r8, #0
 8004f9a:	dd9c      	ble.n	8004ed6 <__sflush_r+0x1a>
 8004f9c:	6a21      	ldr	r1, [r4, #32]
 8004f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fa0:	4643      	mov	r3, r8
 8004fa2:	463a      	mov	r2, r7
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b0      	blx	r6
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	dc06      	bgt.n	8004fba <__sflush_r+0xfe>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb8:	e78e      	b.n	8004ed8 <__sflush_r+0x1c>
 8004fba:	4407      	add	r7, r0
 8004fbc:	eba8 0800 	sub.w	r8, r8, r0
 8004fc0:	e7e9      	b.n	8004f96 <__sflush_r+0xda>
 8004fc2:	bf00      	nop
 8004fc4:	dfbffffe 	.word	0xdfbffffe

08004fc8 <_fflush_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	690b      	ldr	r3, [r1, #16]
 8004fcc:	4605      	mov	r5, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	b913      	cbnz	r3, 8004fd8 <_fflush_r+0x10>
 8004fd2:	2500      	movs	r5, #0
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	b118      	cbz	r0, 8004fe2 <_fflush_r+0x1a>
 8004fda:	6a03      	ldr	r3, [r0, #32]
 8004fdc:	b90b      	cbnz	r3, 8004fe2 <_fflush_r+0x1a>
 8004fde:	f7ff fa9b 	bl	8004518 <__sinit>
 8004fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f3      	beq.n	8004fd2 <_fflush_r+0xa>
 8004fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fec:	07d0      	lsls	r0, r2, #31
 8004fee:	d404      	bmi.n	8004ffa <_fflush_r+0x32>
 8004ff0:	0599      	lsls	r1, r3, #22
 8004ff2:	d402      	bmi.n	8004ffa <_fflush_r+0x32>
 8004ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ff6:	f7ff fb93 	bl	8004720 <__retarget_lock_acquire_recursive>
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	f7ff ff5d 	bl	8004ebc <__sflush_r>
 8005002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005004:	07da      	lsls	r2, r3, #31
 8005006:	4605      	mov	r5, r0
 8005008:	d4e4      	bmi.n	8004fd4 <_fflush_r+0xc>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	059b      	lsls	r3, r3, #22
 800500e:	d4e1      	bmi.n	8004fd4 <_fflush_r+0xc>
 8005010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005012:	f7ff fb86 	bl	8004722 <__retarget_lock_release_recursive>
 8005016:	e7dd      	b.n	8004fd4 <_fflush_r+0xc>

08005018 <__swbuf_r>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	460e      	mov	r6, r1
 800501c:	4614      	mov	r4, r2
 800501e:	4605      	mov	r5, r0
 8005020:	b118      	cbz	r0, 800502a <__swbuf_r+0x12>
 8005022:	6a03      	ldr	r3, [r0, #32]
 8005024:	b90b      	cbnz	r3, 800502a <__swbuf_r+0x12>
 8005026:	f7ff fa77 	bl	8004518 <__sinit>
 800502a:	69a3      	ldr	r3, [r4, #24]
 800502c:	60a3      	str	r3, [r4, #8]
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	071a      	lsls	r2, r3, #28
 8005032:	d525      	bpl.n	8005080 <__swbuf_r+0x68>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	b31b      	cbz	r3, 8005080 <__swbuf_r+0x68>
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	6922      	ldr	r2, [r4, #16]
 800503c:	1a98      	subs	r0, r3, r2
 800503e:	6963      	ldr	r3, [r4, #20]
 8005040:	b2f6      	uxtb	r6, r6
 8005042:	4283      	cmp	r3, r0
 8005044:	4637      	mov	r7, r6
 8005046:	dc04      	bgt.n	8005052 <__swbuf_r+0x3a>
 8005048:	4621      	mov	r1, r4
 800504a:	4628      	mov	r0, r5
 800504c:	f7ff ffbc 	bl	8004fc8 <_fflush_r>
 8005050:	b9e0      	cbnz	r0, 800508c <__swbuf_r+0x74>
 8005052:	68a3      	ldr	r3, [r4, #8]
 8005054:	3b01      	subs	r3, #1
 8005056:	60a3      	str	r3, [r4, #8]
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	6022      	str	r2, [r4, #0]
 800505e:	701e      	strb	r6, [r3, #0]
 8005060:	6962      	ldr	r2, [r4, #20]
 8005062:	1c43      	adds	r3, r0, #1
 8005064:	429a      	cmp	r2, r3
 8005066:	d004      	beq.n	8005072 <__swbuf_r+0x5a>
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	07db      	lsls	r3, r3, #31
 800506c:	d506      	bpl.n	800507c <__swbuf_r+0x64>
 800506e:	2e0a      	cmp	r6, #10
 8005070:	d104      	bne.n	800507c <__swbuf_r+0x64>
 8005072:	4621      	mov	r1, r4
 8005074:	4628      	mov	r0, r5
 8005076:	f7ff ffa7 	bl	8004fc8 <_fflush_r>
 800507a:	b938      	cbnz	r0, 800508c <__swbuf_r+0x74>
 800507c:	4638      	mov	r0, r7
 800507e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005080:	4621      	mov	r1, r4
 8005082:	4628      	mov	r0, r5
 8005084:	f000 f806 	bl	8005094 <__swsetup_r>
 8005088:	2800      	cmp	r0, #0
 800508a:	d0d5      	beq.n	8005038 <__swbuf_r+0x20>
 800508c:	f04f 37ff 	mov.w	r7, #4294967295
 8005090:	e7f4      	b.n	800507c <__swbuf_r+0x64>
	...

08005094 <__swsetup_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4b2a      	ldr	r3, [pc, #168]	; (8005140 <__swsetup_r+0xac>)
 8005098:	4605      	mov	r5, r0
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	460c      	mov	r4, r1
 800509e:	b118      	cbz	r0, 80050a8 <__swsetup_r+0x14>
 80050a0:	6a03      	ldr	r3, [r0, #32]
 80050a2:	b90b      	cbnz	r3, 80050a8 <__swsetup_r+0x14>
 80050a4:	f7ff fa38 	bl	8004518 <__sinit>
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050ae:	0718      	lsls	r0, r3, #28
 80050b0:	d422      	bmi.n	80050f8 <__swsetup_r+0x64>
 80050b2:	06d9      	lsls	r1, r3, #27
 80050b4:	d407      	bmi.n	80050c6 <__swsetup_r+0x32>
 80050b6:	2309      	movs	r3, #9
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	e034      	b.n	8005130 <__swsetup_r+0x9c>
 80050c6:	0758      	lsls	r0, r3, #29
 80050c8:	d512      	bpl.n	80050f0 <__swsetup_r+0x5c>
 80050ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050cc:	b141      	cbz	r1, 80050e0 <__swsetup_r+0x4c>
 80050ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050d2:	4299      	cmp	r1, r3
 80050d4:	d002      	beq.n	80050dc <__swsetup_r+0x48>
 80050d6:	4628      	mov	r0, r5
 80050d8:	f7ff fb24 	bl	8004724 <_free_r>
 80050dc:	2300      	movs	r3, #0
 80050de:	6363      	str	r3, [r4, #52]	; 0x34
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	2300      	movs	r3, #0
 80050ea:	6063      	str	r3, [r4, #4]
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	f043 0308 	orr.w	r3, r3, #8
 80050f6:	81a3      	strh	r3, [r4, #12]
 80050f8:	6923      	ldr	r3, [r4, #16]
 80050fa:	b94b      	cbnz	r3, 8005110 <__swsetup_r+0x7c>
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005106:	d003      	beq.n	8005110 <__swsetup_r+0x7c>
 8005108:	4621      	mov	r1, r4
 800510a:	4628      	mov	r0, r5
 800510c:	f000 f850 	bl	80051b0 <__smakebuf_r>
 8005110:	89a0      	ldrh	r0, [r4, #12]
 8005112:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005116:	f010 0301 	ands.w	r3, r0, #1
 800511a:	d00a      	beq.n	8005132 <__swsetup_r+0x9e>
 800511c:	2300      	movs	r3, #0
 800511e:	60a3      	str	r3, [r4, #8]
 8005120:	6963      	ldr	r3, [r4, #20]
 8005122:	425b      	negs	r3, r3
 8005124:	61a3      	str	r3, [r4, #24]
 8005126:	6923      	ldr	r3, [r4, #16]
 8005128:	b943      	cbnz	r3, 800513c <__swsetup_r+0xa8>
 800512a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800512e:	d1c4      	bne.n	80050ba <__swsetup_r+0x26>
 8005130:	bd38      	pop	{r3, r4, r5, pc}
 8005132:	0781      	lsls	r1, r0, #30
 8005134:	bf58      	it	pl
 8005136:	6963      	ldrpl	r3, [r4, #20]
 8005138:	60a3      	str	r3, [r4, #8]
 800513a:	e7f4      	b.n	8005126 <__swsetup_r+0x92>
 800513c:	2000      	movs	r0, #0
 800513e:	e7f7      	b.n	8005130 <__swsetup_r+0x9c>
 8005140:	20000064 	.word	0x20000064

08005144 <_sbrk_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4d06      	ldr	r5, [pc, #24]	; (8005160 <_sbrk_r+0x1c>)
 8005148:	2300      	movs	r3, #0
 800514a:	4604      	mov	r4, r0
 800514c:	4608      	mov	r0, r1
 800514e:	602b      	str	r3, [r5, #0]
 8005150:	f7fb fe04 	bl	8000d5c <_sbrk>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d102      	bne.n	800515e <_sbrk_r+0x1a>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	b103      	cbz	r3, 800515e <_sbrk_r+0x1a>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	20000270 	.word	0x20000270

08005164 <__swhatbuf_r>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	460c      	mov	r4, r1
 8005168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516c:	2900      	cmp	r1, #0
 800516e:	b096      	sub	sp, #88	; 0x58
 8005170:	4615      	mov	r5, r2
 8005172:	461e      	mov	r6, r3
 8005174:	da0d      	bge.n	8005192 <__swhatbuf_r+0x2e>
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	f013 0f80 	tst.w	r3, #128	; 0x80
 800517c:	f04f 0100 	mov.w	r1, #0
 8005180:	bf0c      	ite	eq
 8005182:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005186:	2340      	movne	r3, #64	; 0x40
 8005188:	2000      	movs	r0, #0
 800518a:	6031      	str	r1, [r6, #0]
 800518c:	602b      	str	r3, [r5, #0]
 800518e:	b016      	add	sp, #88	; 0x58
 8005190:	bd70      	pop	{r4, r5, r6, pc}
 8005192:	466a      	mov	r2, sp
 8005194:	f000 f848 	bl	8005228 <_fstat_r>
 8005198:	2800      	cmp	r0, #0
 800519a:	dbec      	blt.n	8005176 <__swhatbuf_r+0x12>
 800519c:	9901      	ldr	r1, [sp, #4]
 800519e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80051a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80051a6:	4259      	negs	r1, r3
 80051a8:	4159      	adcs	r1, r3
 80051aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ae:	e7eb      	b.n	8005188 <__swhatbuf_r+0x24>

080051b0 <__smakebuf_r>:
 80051b0:	898b      	ldrh	r3, [r1, #12]
 80051b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051b4:	079d      	lsls	r5, r3, #30
 80051b6:	4606      	mov	r6, r0
 80051b8:	460c      	mov	r4, r1
 80051ba:	d507      	bpl.n	80051cc <__smakebuf_r+0x1c>
 80051bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051c0:	6023      	str	r3, [r4, #0]
 80051c2:	6123      	str	r3, [r4, #16]
 80051c4:	2301      	movs	r3, #1
 80051c6:	6163      	str	r3, [r4, #20]
 80051c8:	b002      	add	sp, #8
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	ab01      	add	r3, sp, #4
 80051ce:	466a      	mov	r2, sp
 80051d0:	f7ff ffc8 	bl	8005164 <__swhatbuf_r>
 80051d4:	9900      	ldr	r1, [sp, #0]
 80051d6:	4605      	mov	r5, r0
 80051d8:	4630      	mov	r0, r6
 80051da:	f7ff fb0f 	bl	80047fc <_malloc_r>
 80051de:	b948      	cbnz	r0, 80051f4 <__smakebuf_r+0x44>
 80051e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051e4:	059a      	lsls	r2, r3, #22
 80051e6:	d4ef      	bmi.n	80051c8 <__smakebuf_r+0x18>
 80051e8:	f023 0303 	bic.w	r3, r3, #3
 80051ec:	f043 0302 	orr.w	r3, r3, #2
 80051f0:	81a3      	strh	r3, [r4, #12]
 80051f2:	e7e3      	b.n	80051bc <__smakebuf_r+0xc>
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	9b00      	ldr	r3, [sp, #0]
 8005200:	6163      	str	r3, [r4, #20]
 8005202:	9b01      	ldr	r3, [sp, #4]
 8005204:	6120      	str	r0, [r4, #16]
 8005206:	b15b      	cbz	r3, 8005220 <__smakebuf_r+0x70>
 8005208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800520c:	4630      	mov	r0, r6
 800520e:	f000 f81d 	bl	800524c <_isatty_r>
 8005212:	b128      	cbz	r0, 8005220 <__smakebuf_r+0x70>
 8005214:	89a3      	ldrh	r3, [r4, #12]
 8005216:	f023 0303 	bic.w	r3, r3, #3
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	81a3      	strh	r3, [r4, #12]
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	431d      	orrs	r5, r3
 8005224:	81a5      	strh	r5, [r4, #12]
 8005226:	e7cf      	b.n	80051c8 <__smakebuf_r+0x18>

08005228 <_fstat_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d07      	ldr	r5, [pc, #28]	; (8005248 <_fstat_r+0x20>)
 800522c:	2300      	movs	r3, #0
 800522e:	4604      	mov	r4, r0
 8005230:	4608      	mov	r0, r1
 8005232:	4611      	mov	r1, r2
 8005234:	602b      	str	r3, [r5, #0]
 8005236:	f7fb fd68 	bl	8000d0a <_fstat>
 800523a:	1c43      	adds	r3, r0, #1
 800523c:	d102      	bne.n	8005244 <_fstat_r+0x1c>
 800523e:	682b      	ldr	r3, [r5, #0]
 8005240:	b103      	cbz	r3, 8005244 <_fstat_r+0x1c>
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	bd38      	pop	{r3, r4, r5, pc}
 8005246:	bf00      	nop
 8005248:	20000270 	.word	0x20000270

0800524c <_isatty_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d06      	ldr	r5, [pc, #24]	; (8005268 <_isatty_r+0x1c>)
 8005250:	2300      	movs	r3, #0
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	f7fb fd67 	bl	8000d2a <_isatty>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_isatty_r+0x1a>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_isatty_r+0x1a>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	20000270 	.word	0x20000270

0800526c <_init>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr

08005278 <_fini>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr
