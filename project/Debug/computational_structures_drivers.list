
computational_structures_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005360  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005598  08005598  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055a0  080055a0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080055a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000006c  08005614  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08005614  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe83  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002502  00000000  00000000  0002ff62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00032468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab2  00000000  00000000  00033248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027408  00000000  00000000  00033cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b72  00000000  00000000  0005b102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecc34  00000000  00000000  0006cc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004030  00000000  00000000  001598a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d4  00000000  00000000  0015d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054d8 	.word	0x080054d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080054d8 	.word	0x080054d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_write+0x28>)
 8000584:	f002 fd00 	bl	8002f88 <HAL_UART_Transmit>
	return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000dc 	.word	0x200000dc

08000598 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)

{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
	key_event=GPIO_Pin;
 80005a2:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	8013      	strh	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	20000000 	.word	0x20000000

080005b8 <keypad_init>:
void keypad_init(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	/* Set the rows high to be detected in the columns by rising interrupt */
	ROW_1_GPIO_Port->BSRR = ROW_1_Pin;
 80005bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005c4:	619a      	str	r2, [r3, #24]
	ROW_2_GPIO_Port->BSRR = ROW_2_Pin;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <keypad_init+0x2c>)
 80005c8:	2208      	movs	r2, #8
 80005ca:	619a      	str	r2, [r3, #24]
	ROW_3_GPIO_Port->BSRR = ROW_3_Pin;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <keypad_init+0x2c>)
 80005ce:	2220      	movs	r2, #32
 80005d0:	619a      	str	r2, [r3, #24]
	ROW_4_GPIO_Port->BSRR = ROW_4_Pin;
 80005d2:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <keypad_init+0x2c>)
 80005d4:	2210      	movs	r2, #16
 80005d6:	619a      	str	r2, [r3, #24]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	48000400 	.word	0x48000400

080005e8 <keypad_handler>:
 * @param  column_to_evaluate: the column where the event happened.
 * @retval 0xFF -> invalid key. [0x00 - 0x0F] -> valid key.
*/

uint8_t keypad_handler(uint16_t column_to_evaluate)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF; // Value to return
 80005f2:	23ff      	movs	r3, #255	; 0xff
 80005f4:	73fb      	strb	r3, [r7, #15]

	/*** Debounce the key press (remove noise in the key) ***/
#define KEY_DEBOUNCE_MS 300 /*!> Minimum time required for since last press */
	static uint32_t last_pressed_tick = 0;
	if (HAL_GetTick() <= (last_pressed_tick + KEY_DEBOUNCE_MS)) {
 80005f6:	f000 fcb1 	bl	8000f5c <HAL_GetTick>
 80005fa:	4602      	mov	r2, r0
 80005fc:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <keypad_handler+0xe8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000604:	429a      	cmp	r2, r3
 8000606:	d801      	bhi.n	800060c <keypad_handler+0x24>
		// less than KEY_DEBOUNCE_MS since last press. Probably noise
		return key_pressed; // return 0xFF
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	e05d      	b.n	80006c8 <keypad_handler+0xe0>
	}
	last_pressed_tick = HAL_GetTick();
 800060c:	f000 fca6 	bl	8000f5c <HAL_GetTick>
 8000610:	4603      	mov	r3, r0
 8000612:	4a2f      	ldr	r2, [pc, #188]	; (80006d0 <keypad_handler+0xe8>)
 8000614:	6013      	str	r3, [r2, #0]

	/*** Check in which column the event happened ***/
	switch (column_to_evaluate) {
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800061c:	d04e      	beq.n	80006bc <keypad_handler+0xd4>
 800061e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000622:	d145      	bne.n	80006b0 <keypad_handler+0xc8>
	case COLUMN_1_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 8000624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062c:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <keypad_handler+0xec>)
 8000630:	2208      	movs	r2, #8
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 8000634:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <keypad_handler+0xec>)
 8000636:	2220      	movs	r2, #32
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <keypad_handler+0xec>)
 800063c:	2210      	movs	r2, #16
 800063e:	629a      	str	r2, [r3, #40]	; 0x28


		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <keypad_handler+0xec>)
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <keypad_handler+0x6a>
			key_pressed = 0x01; // if column 1 is still high -> column 1 + row 1 = key 1
 800064c:	2301      	movs	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
			break;
 8000650:	e037      	b.n	80006c2 <keypad_handler+0xda>

		}
		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 8000652:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <keypad_handler+0xec>)
 800065e:	2208      	movs	r2, #8
 8000660:	619a      	str	r2, [r3, #24]

		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <keypad_handler+0xec>)
 8000664:	691b      	ldr	r3, [r3, #16]
 8000666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800066a:	2b00      	cmp	r3, #0
 800066c:	d002      	beq.n	8000674 <keypad_handler+0x8c>
			key_pressed = 0x04; // if column 1 is still high -> column 1 + row 2 = key 4
 800066e:	2304      	movs	r3, #4
 8000670:	73fb      	strb	r3, [r7, #15]
			break;
 8000672:	e026      	b.n	80006c2 <keypad_handler+0xda>
		}
		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <keypad_handler+0xec>)
 8000676:	2208      	movs	r2, #8
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <keypad_handler+0xec>)
 800067c:	2220      	movs	r2, #32
 800067e:	619a      	str	r2, [r3, #24]

		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <keypad_handler+0xec>)
 8000682:	691b      	ldr	r3, [r3, #16]
 8000684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <keypad_handler+0xaa>
			key_pressed = 0x07; // if column 1 is still high -> column 1 + row 3 = key 7
 800068c:	2307      	movs	r3, #7
 800068e:	73fb      	strb	r3, [r7, #15]
			break;
 8000690:	e017      	b.n	80006c2 <keypad_handler+0xda>

		}
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <keypad_handler+0xec>)
 8000694:	2220      	movs	r2, #32
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <keypad_handler+0xec>)
 800069a:	2210      	movs	r2, #16
 800069c:	619a      	str	r2, [r3, #24]

		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <keypad_handler+0xec>)
 80006a0:	691b      	ldr	r3, [r3, #16]
 80006a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00a      	beq.n	80006c0 <keypad_handler+0xd8>
			key_pressed = 0x0E; // if column 1 is still high -> column 1 + row 4 = key *
 80006aa:	230e      	movs	r3, #14
 80006ac:	73fb      	strb	r3, [r7, #15]
			break;
 80006ae:	e008      	b.n	80006c2 <keypad_handler+0xda>

	/*!\ TODO: Implement other column cases here */

	default:
		/* This should not be reached */
		printf("Unknown column: %x\r\n", column_to_evaluate);
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <keypad_handler+0xf0>)
 80006b6:	f004 f89b 	bl	80047f0 <iprintf>
	  break;
 80006ba:	e002      	b.n	80006c2 <keypad_handler+0xda>
		break;
 80006bc:	bf00      	nop
 80006be:	e000      	b.n	80006c2 <keypad_handler+0xda>
	  break;
 80006c0:	bf00      	nop
	}

	keypad_init(); // set the columns high again
 80006c2:	f7ff ff79 	bl	80005b8 <keypad_init>
	return key_pressed; // invalid: 0xFF, valid:[0x00-0x0F]
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000184 	.word	0x20000184
 80006d4:	48000400 	.word	0x48000400
 80006d8:	080054f0 	.word	0x080054f0

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 fbcb 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e6:	f000 f833 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ea:	f000 f8f3 	bl	80008d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ee:	f000 f8c1 	bl	8000874 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006f2:	f000 f87f 	bl	80007f4 <MX_I2C1_Init>
  keypad_init();
 80006f6:	f7ff ff5f 	bl	80005b8 <keypad_init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 16);
 80006fa:	2210      	movs	r2, #16
 80006fc:	490e      	ldr	r1, [pc, #56]	; (8000738 <main+0x5c>)
 80006fe:	480f      	ldr	r0, [pc, #60]	; (800073c <main+0x60>)
 8000700:	f000 f9a5 	bl	8000a4e <ring_buffer_init>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	490e      	ldr	r1, [pc, #56]	; (8000740 <main+0x64>)
 8000708:	480e      	ldr	r0, [pc, #56]	; (8000744 <main+0x68>)
 800070a:	f002 fcc7 	bl	800309c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (key_event != 0xFF) { // check if there is a event from the EXTi callback
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <main+0x6c>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	2bff      	cmp	r3, #255	; 0xff
 8000714:	d0fb      	beq.n	800070e <main+0x32>
		  uint16_t key_pressed = keypad_handler(key_event); // call the keypad handler
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <main+0x6c>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff64 	bl	80005e8 <keypad_handler>
 8000720:	4603      	mov	r3, r0
 8000722:	80fb      	strh	r3, [r7, #6]
		  printf("Key pressed: %x\r\n", key_pressed); // print the key pressed
 8000724:	88fb      	ldrh	r3, [r7, #6]
 8000726:	4619      	mov	r1, r3
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <main+0x70>)
 800072a:	f004 f861 	bl	80047f0 <iprintf>
		  key_event = 0xFF; // clean the event
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <main+0x6c>)
 8000730:	22ff      	movs	r2, #255	; 0xff
 8000732:	801a      	strh	r2, [r3, #0]
	  if (key_event != 0xFF) { // check if there is a event from the EXTi callback
 8000734:	e7eb      	b.n	800070e <main+0x32>
 8000736:	bf00      	nop
 8000738:	20000164 	.word	0x20000164
 800073c:	20000174 	.word	0x20000174
 8000740:	20000180 	.word	0x20000180
 8000744:	200000dc 	.word	0x200000dc
 8000748:	20000000 	.word	0x20000000
 800074c:	08005508 	.word	0x08005508

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b096      	sub	sp, #88	; 0x58
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2244      	movs	r2, #68	; 0x44
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f004 f89b 	bl	800489a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000772:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000776:	f001 f8a7 	bl	80018c8 <HAL_PWREx_ControlVoltageScaling>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000780:	f000 f960 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800078c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	2310      	movs	r3, #16
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000796:	2302      	movs	r3, #2
 8000798:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800079e:	230a      	movs	r3, #10
 80007a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007a2:	2307      	movs	r3, #7
 80007a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f8de 	bl	8001974 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007be:	f000 f941 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2303      	movs	r3, #3
 80007c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	2104      	movs	r1, #4
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fca6 	bl	800212c <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e6:	f000 f92d 	bl	8000a44 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3758      	adds	r7, #88	; 0x58
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_I2C1_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_I2C1_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_I2C1_Init+0x74>)
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <MX_I2C1_Init+0x7c>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_I2C1_Init+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_I2C1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_I2C1_Init+0x74>)
 8000830:	f000 ff0a 	bl	8001648 <HAL_I2C_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800083a:	f000 f903 	bl	8000a44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <MX_I2C1_Init+0x74>)
 8000842:	f000 ff9c 	bl	800177e <HAL_I2CEx_ConfigAnalogFilter>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 f8fa 	bl	8000a44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_I2C1_Init+0x74>)
 8000854:	f000 ffde 	bl	8001814 <HAL_I2CEx_ConfigDigitalFilter>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 f8f1 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000088 	.word	0x20000088
 800086c:	40005400 	.word	0x40005400
 8000870:	10909cec 	.word	0x10909cec

08000874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_USART2_UART_Init+0x58>)
 800087a:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <MX_USART2_UART_Init+0x5c>)
 800087c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_USART2_UART_Init+0x58>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART2_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART2_UART_Init+0x58>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART2_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART2_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART2_UART_Init+0x58>)
 80008b8:	f002 fb18 	bl	8002eec <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008c2:	f000 f8bf 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000dc 	.word	0x200000dc
 80008d0:	40004400 	.word	0x40004400

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <MX_GPIO_Init+0x164>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a52      	ldr	r2, [pc, #328]	; (8000a38 <MX_GPIO_Init+0x164>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b50      	ldr	r3, [pc, #320]	; (8000a38 <MX_GPIO_Init+0x164>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	4b4d      	ldr	r3, [pc, #308]	; (8000a38 <MX_GPIO_Init+0x164>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a4c      	ldr	r2, [pc, #304]	; (8000a38 <MX_GPIO_Init+0x164>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <MX_GPIO_Init+0x164>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b47      	ldr	r3, [pc, #284]	; (8000a38 <MX_GPIO_Init+0x164>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a46      	ldr	r2, [pc, #280]	; (8000a38 <MX_GPIO_Init+0x164>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <MX_GPIO_Init+0x164>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b41      	ldr	r3, [pc, #260]	; (8000a38 <MX_GPIO_Init+0x164>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a40      	ldr	r2, [pc, #256]	; (8000a38 <MX_GPIO_Init+0x164>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <MX_GPIO_Init+0x164>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROW_1_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 fe48 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2138      	movs	r1, #56	; 0x38
 800095c:	4837      	ldr	r0, [pc, #220]	; (8000a3c <MX_GPIO_Init+0x168>)
 800095e:	f000 fe43 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000968:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4831      	ldr	r0, [pc, #196]	; (8000a40 <MX_GPIO_Init+0x16c>)
 800097a:	f000 fc8b 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ROW_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ROW_1_Pin;
 800097e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f000 fc7b 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_1_Pin */
  GPIO_InitStruct.Pin = COLUMN_1_Pin;
 800099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_1_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4821      	ldr	r0, [pc, #132]	; (8000a3c <MX_GPIO_Init+0x168>)
 80009b6:	f000 fc6d 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_4_Pin */
  GPIO_InitStruct.Pin = COLUMN_4_Pin;
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_4_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	481c      	ldr	r0, [pc, #112]	; (8000a40 <MX_GPIO_Init+0x16c>)
 80009d0:	f000 fc60 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN_2_Pin COLUMN_3_Pin */
  GPIO_InitStruct.Pin = COLUMN_2_Pin|COLUMN_3_Pin;
 80009d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f000 fc51 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 80009f2:	2338      	movs	r3, #56	; 0x38
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_GPIO_Init+0x168>)
 8000a0a:	f000 fc43 	bl	8001294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2017      	movs	r0, #23
 8000a14:	f000 fb89 	bl	800112a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a18:	2017      	movs	r0, #23
 8000a1a:	f000 fba2 	bl	8001162 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2028      	movs	r0, #40	; 0x28
 8000a24:	f000 fb81 	bl	800112a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a28:	2028      	movs	r0, #40	; 0x28
 8000a2a:	f000 fb9a 	bl	8001162 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	; 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000400 	.word	0x48000400
 8000a40:	48000800 	.word	0x48000800

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>

08000a4e <ring_buffer_init>:


/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity){
 8000a4e:	b480      	push	{r7}
 8000a50:	b085      	sub	sp, #20
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	601a      	str	r2, [r3, #0]
	ring_buffer-> capacity = capacity;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	88fa      	ldrh	r2, [r7, #6]
 8000a66:	811a      	strh	r2, [r3, #8]
	ring_buffer->head = 0;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2200      	movs	r2, #0
 8000a72:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2200      	movs	r2, #0
 8000a78:	729a      	strb	r2, [r3, #10]
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x44>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_MspInit+0x44>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x44>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x44>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b0ac      	sub	sp, #176	; 0xb0
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2288      	movs	r2, #136	; 0x88
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 fed2 	bl	800489a <memset>
  if(hi2c->Instance==I2C1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <HAL_I2C_MspInit+0xb0>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d13b      	bne.n	8000b78 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b00:	2340      	movs	r3, #64	; 0x40
 8000b02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fd31 	bl	8002574 <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b18:	f7ff ff94 	bl	8000a44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_I2C_MspInit+0xb4>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b20:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <HAL_I2C_MspInit+0xb4>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_I2C_MspInit+0xb4>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3c:	2312      	movs	r3, #18
 8000b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480b      	ldr	r0, [pc, #44]	; (8000b88 <HAL_I2C_MspInit+0xb8>)
 8000b5c:	f000 fb9a 	bl	8001294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_I2C_MspInit+0xb4>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_I2C_MspInit+0xb4>)
 8000b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_I2C_MspInit+0xb4>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	37b0      	adds	r7, #176	; 0xb0
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40005400 	.word	0x40005400
 8000b84:	40021000 	.word	0x40021000
 8000b88:	48000400 	.word	0x48000400

08000b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0ac      	sub	sp, #176	; 0xb0
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2288      	movs	r2, #136	; 0x88
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 fe74 	bl	800489a <memset>
  if(huart->Instance==USART2)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a25      	ldr	r2, [pc, #148]	; (8000c4c <HAL_UART_MspInit+0xc0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d143      	bne.n	8000c44 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fcd3 	bl	8002574 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bd4:	f7ff ff36 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <HAL_UART_MspInit+0xc4>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bdc:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <HAL_UART_MspInit+0xc4>)
 8000bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be2:	6593      	str	r3, [r2, #88]	; 0x58
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_UART_MspInit+0xc4>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_UART_MspInit+0xc4>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf4:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <HAL_UART_MspInit+0xc4>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_UART_MspInit+0xc4>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c20:	2307      	movs	r3, #7
 8000c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c30:	f000 fb30 	bl	8001294 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2026      	movs	r0, #38	; 0x26
 8000c3a:	f000 fa76 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c3e:	2026      	movs	r0, #38	; 0x26
 8000c40:	f000 fa8f 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c44:	bf00      	nop
 8000c46:	37b0      	adds	r7, #176	; 0xb0
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40021000 	.word	0x40021000

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca0:	f000 f948 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_4_Pin);
 8000cac:	2080      	movs	r0, #128	; 0x80
 8000cae:	f000 fcb3 	bl	8001618 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_2_Pin);
 8000cb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000cb6:	f000 fcaf 	bl	8001618 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_3_Pin);
 8000cba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cbe:	f000 fcab 	bl	8001618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <USART2_IRQHandler+0x10>)
 8000cce:	f002 fa31 	bl	8003134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000dc 	.word	0x200000dc

08000cdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_1_Pin);
 8000ce0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ce4:	f000 fc98 	bl	8001618 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ce8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cec:	f000 fc94 	bl	8001618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e00a      	b.n	8000d1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d06:	f3af 8000 	nop.w
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	b2ca      	uxtb	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dbf0      	blt.n	8000d06 <_read+0x12>
  }

  return len;
 8000d24:	687b      	ldr	r3, [r7, #4]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d56:	605a      	str	r2, [r3, #4]
  return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <_isatty>:

int _isatty(int file)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f003 fdb6 	bl	8004938 <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20018000 	.word	0x20018000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	20000188 	.word	0x20000188
 8000e00:	200002e0 	.word	0x200002e0

08000e04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e2c:	f7ff ffea 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f003 fd75 	bl	8004944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5a:	f7ff fc3f 	bl	80006dc <main>

08000e5e <LoopForever>:

LoopForever:
    b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e6c:	080055a8 	.word	0x080055a8
  ldr r2, =_sbss
 8000e70:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e74:	200002dc 	.word	0x200002dc

08000e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_2_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_Init+0x3c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_Init+0x3c>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e92:	2003      	movs	r0, #3
 8000e94:	f000 f93e 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 f80f 	bl	8000ebc <HAL_InitTick>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	e001      	b.n	8000eae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eaa:	f7ff fded 	bl	8000a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_InitTick+0x6c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d023      	beq.n	8000f18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_InitTick+0x70>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_InitTick+0x6c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f949 	bl	800117e <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10f      	bne.n	8000f12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d809      	bhi.n	8000f0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 f913 	bl	800112a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_InitTick+0x74>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e007      	b.n	8000f1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e004      	b.n	8000f1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e001      	b.n	8000f1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000000c 	.word	0x2000000c
 8000f2c:	20000004 	.word	0x20000004
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2000000c 	.word	0x2000000c
 8000f58:	2000018c 	.word	0x2000018c

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2000018c 	.word	0x2000018c

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff3e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff31 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001196:	b480      	push	{r7}
 8001198:	b085      	sub	sp, #20
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d008      	beq.n	80011c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2204      	movs	r2, #4
 80011b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e022      	b.n	8001206 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 020e 	bic.w	r2, r2, #14
 80011ce:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e4:	f003 021c 	and.w	r2, r3, #28
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d005      	beq.n	8001236 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2204      	movs	r2, #4
 800122e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e029      	b.n	800128a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 020e 	bic.w	r2, r2, #14
 8001244:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0201 	bic.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f003 021c 	and.w	r2, r3, #28
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	2101      	movs	r1, #1
 8001264:	fa01 f202 	lsl.w	r2, r1, r2
 8001268:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	4798      	blx	r3
    }
  }
  return status;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a2:	e17f      	b.n	80015a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2101      	movs	r1, #1
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8171 	beq.w	800159e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d005      	beq.n	80012d4 <HAL_GPIO_Init+0x40>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d130      	bne.n	8001336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800130a:	2201      	movs	r2, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 0201 	and.w	r2, r3, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b03      	cmp	r3, #3
 8001340:	d118      	bne.n	8001374 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001348:	2201      	movs	r2, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	f003 0201 	and.w	r2, r3, #1
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b03      	cmp	r3, #3
 800137e:	d017      	beq.n	80013b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d123      	bne.n	8001404 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	6939      	ldr	r1, [r7, #16]
 8001400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0203 	and.w	r2, r3, #3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80ac 	beq.w	800159e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b5f      	ldr	r3, [pc, #380]	; (80015c4 <HAL_GPIO_Init+0x330>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	4a5e      	ldr	r2, [pc, #376]	; (80015c4 <HAL_GPIO_Init+0x330>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6613      	str	r3, [r2, #96]	; 0x60
 8001452:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <HAL_GPIO_Init+0x330>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800145e:	4a5a      	ldr	r2, [pc, #360]	; (80015c8 <HAL_GPIO_Init+0x334>)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001488:	d025      	beq.n	80014d6 <HAL_GPIO_Init+0x242>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x338>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01f      	beq.n	80014d2 <HAL_GPIO_Init+0x23e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <HAL_GPIO_Init+0x33c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d019      	beq.n	80014ce <HAL_GPIO_Init+0x23a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <HAL_GPIO_Init+0x340>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0x236>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <HAL_GPIO_Init+0x344>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00d      	beq.n	80014c6 <HAL_GPIO_Init+0x232>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4b      	ldr	r2, [pc, #300]	; (80015dc <HAL_GPIO_Init+0x348>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d007      	beq.n	80014c2 <HAL_GPIO_Init+0x22e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4a      	ldr	r2, [pc, #296]	; (80015e0 <HAL_GPIO_Init+0x34c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_GPIO_Init+0x22a>
 80014ba:	2306      	movs	r3, #6
 80014bc:	e00c      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014be:	2307      	movs	r3, #7
 80014c0:	e00a      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014c2:	2305      	movs	r3, #5
 80014c4:	e008      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014d6:	2300      	movs	r3, #0
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	f002 0203 	and.w	r2, r2, #3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014e8:	4937      	ldr	r1, [pc, #220]	; (80015c8 <HAL_GPIO_Init+0x334>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <HAL_GPIO_Init+0x350>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800151a:	4a32      	ldr	r2, [pc, #200]	; (80015e4 <HAL_GPIO_Init+0x350>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001520:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_GPIO_Init+0x350>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001544:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <HAL_GPIO_Init+0x350>)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_GPIO_Init+0x350>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800156e:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <HAL_GPIO_Init+0x350>)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_GPIO_Init+0x350>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <HAL_GPIO_Init+0x350>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f47f ae78 	bne.w	80012a4 <HAL_GPIO_Init+0x10>
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010000 	.word	0x40010000
 80015cc:	48000400 	.word	0x48000400
 80015d0:	48000800 	.word	0x48000800
 80015d4:	48000c00 	.word	0x48000c00
 80015d8:	48001000 	.word	0x48001000
 80015dc:	48001400 	.word	0x48001400
 80015e0:	48001800 	.word	0x48001800
 80015e4:	40010400 	.word	0x40010400

080015e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001604:	e002      	b.n	800160c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ffae 	bl	8000598 <HAL_GPIO_EXTI_Callback>
  }
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40010400 	.word	0x40010400

08001648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e08d      	b.n	8001776 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d106      	bne.n	8001674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fa2e 	bl	8000ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2224      	movs	r2, #36	; 0x24
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001698:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e006      	b.n	80016d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d108      	bne.n	80016ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	e007      	b.n	80016fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800171c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69d9      	ldr	r1, [r3, #28]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1a      	ldr	r2, [r3, #32]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2220      	movs	r2, #32
 8001762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b20      	cmp	r3, #32
 8001792:	d138      	bne.n	8001806 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800179e:	2302      	movs	r3, #2
 80017a0:	e032      	b.n	8001808 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2224      	movs	r2, #36	; 0x24
 80017ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0201 	bic.w	r2, r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0201 	orr.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001806:	2302      	movs	r3, #2
  }
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b20      	cmp	r3, #32
 8001828:	d139      	bne.n	800189e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001834:	2302      	movs	r3, #2
 8001836:	e033      	b.n	80018a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2224      	movs	r2, #36	; 0x24
 8001844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001866:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800189e:	2302      	movs	r3, #2
  }
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40007000 	.word	0x40007000

080018c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d6:	d130      	bne.n	800193a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e4:	d038      	beq.n	8001958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ee:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2232      	movs	r2, #50	; 0x32
 80018fc:	fb02 f303 	mul.w	r3, r2, r3
 8001900:	4a1b      	ldr	r2, [pc, #108]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0c9b      	lsrs	r3, r3, #18
 8001908:	3301      	adds	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800190c:	e002      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3b01      	subs	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001920:	d102      	bne.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f2      	bne.n	800190e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001934:	d110      	bne.n	8001958 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e00f      	b.n	800195a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001946:	d007      	beq.n	8001958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001950:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40007000 	.word	0x40007000
 800196c:	20000004 	.word	0x20000004
 8001970:	431bde83 	.word	0x431bde83

08001974 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e3ca      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001986:	4b97      	ldr	r3, [pc, #604]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001990:	4b94      	ldr	r3, [pc, #592]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80e4 	beq.w	8001b70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_RCC_OscConfig+0x4a>
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	f040 808b 	bne.w	8001acc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	f040 8087 	bne.w	8001acc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019be:	4b89      	ldr	r3, [pc, #548]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_RCC_OscConfig+0x62>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e3a2      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1a      	ldr	r2, [r3, #32]
 80019da:	4b82      	ldr	r3, [pc, #520]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <HAL_RCC_OscConfig+0x7c>
 80019e6:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ee:	e005      	b.n	80019fc <HAL_RCC_OscConfig+0x88>
 80019f0:	4b7c      	ldr	r3, [pc, #496]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 80019f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d223      	bcs.n	8001a48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fd55 	bl	80024b4 <RCC_SetFlashLatencyFromMSIRange>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e383      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a14:	4b73      	ldr	r3, [pc, #460]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a72      	ldr	r2, [pc, #456]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	f043 0308 	orr.w	r3, r3, #8
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	496d      	ldr	r1, [pc, #436]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a32:	4b6c      	ldr	r3, [pc, #432]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	4968      	ldr	r1, [pc, #416]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
 8001a46:	e025      	b.n	8001a94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a48:	4b66      	ldr	r3, [pc, #408]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a65      	ldr	r2, [pc, #404]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	f043 0308 	orr.w	r3, r3, #8
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4960      	ldr	r1, [pc, #384]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	495b      	ldr	r1, [pc, #364]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d109      	bne.n	8001a94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fd15 	bl	80024b4 <RCC_SetFlashLatencyFromMSIRange>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e343      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a94:	f000 fc4a 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b52      	ldr	r3, [pc, #328]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	4950      	ldr	r1, [pc, #320]	; (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab0:	4a4e      	ldr	r2, [pc, #312]	; (8001bec <HAL_RCC_OscConfig+0x278>)
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ab4:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f9ff 	bl	8000ebc <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d052      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	e327      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d032      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a42      	ldr	r2, [pc, #264]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fa3c 	bl	8000f5c <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fa38 	bl	8000f5c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e310      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001afa:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a36      	ldr	r2, [pc, #216]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	f043 0308 	orr.w	r3, r3, #8
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4931      	ldr	r1, [pc, #196]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b24:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	492c      	ldr	r1, [pc, #176]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
 8001b38:	e01a      	b.n	8001b70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fa09 	bl	8000f5c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b4e:	f7ff fa05 	bl	8000f5c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e2dd      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b60:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x1da>
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d074      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x21a>
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d10e      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d064      	beq.n	8001c64 <HAL_RCC_OscConfig+0x2f0>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d160      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e2ba      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x24a>
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e026      	b.n	8001c0c <HAL_RCC_OscConfig+0x298>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc6:	d115      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x280>
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a02      	ldr	r2, [pc, #8]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e014      	b.n	8001c0c <HAL_RCC_OscConfig+0x298>
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	0800551c 	.word	0x0800551c
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	4ba0      	ldr	r3, [pc, #640]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a9f      	ldr	r2, [pc, #636]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b9d      	ldr	r3, [pc, #628]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a9c      	ldr	r2, [pc, #624]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f9a2 	bl	8000f5c <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff f99e 	bl	8000f5c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e276      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2e:	4b92      	ldr	r3, [pc, #584]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x2a8>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f98e 	bl	8000f5c <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff f98a 	bl	8000f5c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e262      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c56:	4b88      	ldr	r3, [pc, #544]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x2d0>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d060      	beq.n	8001d34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x310>
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d119      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d116      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c84:	4b7c      	ldr	r3, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_OscConfig+0x328>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e23f      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b76      	ldr	r3, [pc, #472]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	4973      	ldr	r1, [pc, #460]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb0:	e040      	b.n	8001d34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d023      	beq.n	8001d02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cba:	4b6f      	ldr	r3, [pc, #444]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a6e      	ldr	r2, [pc, #440]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f949 	bl	8000f5c <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff f945 	bl	8000f5c <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e21d      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce0:	4b65      	ldr	r3, [pc, #404]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b62      	ldr	r3, [pc, #392]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	495f      	ldr	r1, [pc, #380]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
 8001d00:	e018      	b.n	8001d34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d02:	4b5d      	ldr	r3, [pc, #372]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a5c      	ldr	r2, [pc, #368]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f925 	bl	8000f5c <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff f921 	bl	8000f5c <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1f9      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d28:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d03c      	beq.n	8001dba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d48:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4e:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff f900 	bl	8000f5c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff f8fc 	bl	8000f5c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e1d4      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ef      	beq.n	8001d60 <HAL_RCC_OscConfig+0x3ec>
 8001d80:	e01b      	b.n	8001dba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d82:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d88:	4a3b      	ldr	r2, [pc, #236]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d92:	f7ff f8e3 	bl	8000f5c <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7ff f8df 	bl	8000f5c <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e1b7      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dac:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ef      	bne.n	8001d9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80a6 	beq.w	8001f14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de2:	6593      	str	r3, [r2, #88]	; 0x58
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df0:	2301      	movs	r3, #1
 8001df2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <HAL_RCC_OscConfig+0x508>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d118      	bne.n	8001e32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_RCC_OscConfig+0x508>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x508>)
 8001e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0c:	f7ff f8a6 	bl	8000f5c <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e14:	f7ff f8a2 	bl	8000f5c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e17a      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_RCC_OscConfig+0x508>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d108      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4d8>
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e4a:	e029      	b.n	8001ea0 <HAL_RCC_OscConfig+0x52c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d115      	bne.n	8001e80 <HAL_RCC_OscConfig+0x50c>
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e74:	e014      	b.n	8001ea0 <HAL_RCC_OscConfig+0x52c>
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	4b9c      	ldr	r3, [pc, #624]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	4a9b      	ldr	r2, [pc, #620]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e90:	4b98      	ldr	r3, [pc, #608]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	4a97      	ldr	r2, [pc, #604]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d016      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff f858 	bl	8000f5c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7ff f854 	bl	8000f5c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e12a      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec6:	4b8b      	ldr	r3, [pc, #556]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ed      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x53c>
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7ff f841 	bl	8000f5c <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff f83d 	bl	8000f5c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e113      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef4:	4b7f      	ldr	r3, [pc, #508]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ed      	bne.n	8001ede <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f02:	7ffb      	ldrb	r3, [r7, #31]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b7a      	ldr	r3, [pc, #488]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	4a79      	ldr	r2, [pc, #484]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80fe 	beq.w	800211a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	f040 80d0 	bne.w	80020c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f28:	4b72      	ldr	r3, [pc, #456]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d130      	bne.n	8001f9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	3b01      	subs	r3, #1
 8001f48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d127      	bne.n	8001f9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d11f      	bne.n	8001f9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f68:	2a07      	cmp	r2, #7
 8001f6a:	bf14      	ite	ne
 8001f6c:	2201      	movne	r2, #1
 8001f6e:	2200      	moveq	r2, #0
 8001f70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d113      	bne.n	8001f9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	3b01      	subs	r3, #1
 8001f84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d109      	bne.n	8001f9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	3b01      	subs	r3, #1
 8001f98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d06e      	beq.n	800207c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	d069      	beq.n	8002078 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fa4:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fb0:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0ad      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fc0:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fcc:	f7fe ffc6 	bl	8000f5c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7fe ffc2 	bl	8000f5c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e09a      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe6:	4b43      	ldr	r3, [pc, #268]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff2:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002002:	3a01      	subs	r2, #1
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	4311      	orrs	r1, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800200c:	0212      	lsls	r2, r2, #8
 800200e:	4311      	orrs	r1, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002014:	0852      	lsrs	r2, r2, #1
 8002016:	3a01      	subs	r2, #1
 8002018:	0552      	lsls	r2, r2, #21
 800201a:	4311      	orrs	r1, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002020:	0852      	lsrs	r2, r2, #1
 8002022:	3a01      	subs	r2, #1
 8002024:	0652      	lsls	r2, r2, #25
 8002026:	4311      	orrs	r1, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800202c:	0912      	lsrs	r2, r2, #4
 800202e:	0452      	lsls	r2, r2, #17
 8002030:	430a      	orrs	r2, r1
 8002032:	4930      	ldr	r1, [pc, #192]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8002034:	4313      	orrs	r3, r2
 8002036:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a2d      	ldr	r2, [pc, #180]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 800203e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002044:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a2a      	ldr	r2, [pc, #168]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 800204a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002050:	f7fe ff84 	bl	8000f5c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7fe ff80 	bl	8000f5c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e058      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002076:	e050      	b.n	800211a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e04f      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d148      	bne.n	800211a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002092:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 800209a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020a0:	f7fe ff5c 	bl	8000f5c <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7fe ff58 	bl	8000f5c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e030      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x734>
 80020c6:	e028      	b.n	800211a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d023      	beq.n	8002116 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <HAL_RCC_OscConfig+0x780>)
 80020d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7fe ff3f 	bl	8000f5c <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e0:	e00c      	b.n	80020fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e2:	f7fe ff3b 	bl	8000f5c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d905      	bls.n	80020fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e013      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
 80020f4:	40021000 	.word	0x40021000
 80020f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_RCC_OscConfig+0x7b0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1ec      	bne.n	80020e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_RCC_OscConfig+0x7b0>)
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	4905      	ldr	r1, [pc, #20]	; (8002124 <HAL_RCC_OscConfig+0x7b0>)
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_OscConfig+0x7b4>)
 8002110:	4013      	ands	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]
 8002114:	e001      	b.n	800211a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	feeefffc 	.word	0xfeeefffc

0800212c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0e7      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b75      	ldr	r3, [pc, #468]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d910      	bls.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b72      	ldr	r3, [pc, #456]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4970      	ldr	r1, [pc, #448]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b6e      	ldr	r3, [pc, #440]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0cf      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d010      	beq.n	800219e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	4b66      	ldr	r3, [pc, #408]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002188:	429a      	cmp	r2, r3
 800218a:	d908      	bls.n	800219e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b63      	ldr	r3, [pc, #396]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4960      	ldr	r1, [pc, #384]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d04c      	beq.n	8002244 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b2:	4b5a      	ldr	r3, [pc, #360]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d121      	bne.n	8002202 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0a6      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ca:	4b54      	ldr	r3, [pc, #336]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d115      	bne.n	8002202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e09a      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e2:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e08e      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f2:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e086      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f023 0203 	bic.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4943      	ldr	r1, [pc, #268]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002214:	f7fe fea2 	bl	8000f5c <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	e00a      	b.n	8002232 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221c:	f7fe fe9e 	bl	8000f5c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e06e      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	4b3a      	ldr	r3, [pc, #232]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 020c 	and.w	r2, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	429a      	cmp	r2, r3
 8002242:	d1eb      	bne.n	800221c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d010      	beq.n	8002272 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800225c:	429a      	cmp	r2, r3
 800225e:	d208      	bcs.n	8002272 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	492b      	ldr	r1, [pc, #172]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002272:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d210      	bcs.n	80022a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 0207 	bic.w	r2, r3, #7
 8002288:	4923      	ldr	r1, [pc, #140]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_RCC_ClockConfig+0x1ec>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e036      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	4918      	ldr	r1, [pc, #96]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d009      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4910      	ldr	r1, [pc, #64]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022e0:	f000 f824 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	490b      	ldr	r1, [pc, #44]	; (8002320 <HAL_RCC_ClockConfig+0x1f4>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	4a09      	ldr	r2, [pc, #36]	; (8002324 <HAL_RCC_ClockConfig+0x1f8>)
 80022fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1fc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fdd9 	bl	8000ebc <HAL_InitTick>
 800230a:	4603      	mov	r3, r0
 800230c:	72fb      	strb	r3, [r7, #11]

  return status;
 800230e:	7afb      	ldrb	r3, [r7, #11]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40022000 	.word	0x40022000
 800231c:	40021000 	.word	0x40021000
 8002320:	0800551c 	.word	0x0800551c
 8002324:	20000004 	.word	0x20000004
 8002328:	20000008 	.word	0x20000008

0800232c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233a:	4b3e      	ldr	r3, [pc, #248]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002344:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x34>
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d121      	bne.n	800239e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d11e      	bne.n	800239e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002360:	4b34      	ldr	r3, [pc, #208]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d107      	bne.n	800237c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800236c:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 800236e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e005      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800237c:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002388:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <HAL_RCC_GetSysClockFreq+0x10c>)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002390:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10d      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d102      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <HAL_RCC_GetSysClockFreq+0x110>)
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	e004      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_RCC_GetSysClockFreq+0x114>)
 80023b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d134      	bne.n	8002424 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d003      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0xac>
 80023d0:	e005      	b.n	80023de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <HAL_RCC_GetSysClockFreq+0x110>)
 80023d4:	617b      	str	r3, [r7, #20]
      break;
 80023d6:	e005      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_GetSysClockFreq+0x114>)
 80023da:	617b      	str	r3, [r7, #20]
      break;
 80023dc:	e002      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	617b      	str	r3, [r7, #20]
      break;
 80023e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	3301      	adds	r3, #1
 80023f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	fb03 f202 	mul.w	r2, r3, r2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_RCC_GetSysClockFreq+0x108>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	0e5b      	lsrs	r3, r3, #25
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	3301      	adds	r3, #1
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002424:	69bb      	ldr	r3, [r7, #24]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	08005534 	.word	0x08005534
 800243c:	00f42400 	.word	0x00f42400
 8002440:	007a1200 	.word	0x007a1200

08002444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCC_GetHCLKFreq+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002460:	f7ff fff0 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4904      	ldr	r1, [pc, #16]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	0800552c 	.word	0x0800552c

08002488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800248c:	f7ff ffda 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	0adb      	lsrs	r3, r3, #11
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4904      	ldr	r1, [pc, #16]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	0800552c 	.word	0x0800552c

080024b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024cc:	f7ff f9ee 	bl	80018ac <HAL_PWREx_GetVoltageRange>
 80024d0:	6178      	str	r0, [r7, #20]
 80024d2:	e014      	b.n	80024fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	4a24      	ldr	r2, [pc, #144]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	6593      	str	r3, [r2, #88]	; 0x58
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024ec:	f7ff f9de 	bl	80018ac <HAL_PWREx_GetVoltageRange>
 80024f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a1d      	ldr	r2, [pc, #116]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002504:	d10b      	bne.n	800251e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d919      	bls.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2ba0      	cmp	r3, #160	; 0xa0
 8002510:	d902      	bls.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002512:	2302      	movs	r3, #2
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	e013      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002518:	2301      	movs	r3, #1
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	e010      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b80      	cmp	r3, #128	; 0x80
 8002522:	d902      	bls.n	800252a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002524:	2303      	movs	r3, #3
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e00a      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d102      	bne.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002530:	2302      	movs	r3, #2
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	e004      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b70      	cmp	r3, #112	; 0x70
 800253a:	d101      	bne.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 0207 	bic.w	r2, r3, #7
 8002548:	4909      	ldr	r1, [pc, #36]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	429a      	cmp	r2, r3
 800255c:	d001      	beq.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	40022000 	.word	0x40022000

08002574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800257c:	2300      	movs	r3, #0
 800257e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002580:	2300      	movs	r3, #0
 8002582:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258c:	2b00      	cmp	r3, #0
 800258e:	d041      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002594:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002598:	d02a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800259a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800259e:	d824      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025a4:	d008      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025aa:	d81e      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b4:	d010      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025b6:	e018      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025b8:	4b86      	ldr	r3, [pc, #536]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a85      	ldr	r2, [pc, #532]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025c4:	e015      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fabb 	bl	8002b48 <RCCEx_PLLSAI1_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025d6:	e00c      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3320      	adds	r3, #32
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fba6 	bl	8002d30 <RCCEx_PLLSAI2_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025e8:	e003      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	74fb      	strb	r3, [r7, #19]
      break;
 80025ee:	e000      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025f8:	4b76      	ldr	r3, [pc, #472]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002606:	4973      	ldr	r1, [pc, #460]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800260e:	e001      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d041      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002624:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002628:	d02a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800262a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800262e:	d824      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800263a:	d81e      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002644:	d010      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002646:	e018      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002648:	4b62      	ldr	r3, [pc, #392]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a61      	ldr	r2, [pc, #388]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002652:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002654:	e015      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3304      	adds	r3, #4
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fa73 	bl	8002b48 <RCCEx_PLLSAI1_Config>
 8002662:	4603      	mov	r3, r0
 8002664:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002666:	e00c      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3320      	adds	r3, #32
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fb5e 	bl	8002d30 <RCCEx_PLLSAI2_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002678:	e003      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	74fb      	strb	r3, [r7, #19]
      break;
 800267e:	e000      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10b      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002688:	4b52      	ldr	r3, [pc, #328]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002696:	494f      	ldr	r1, [pc, #316]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800269e:	e001      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80a0 	beq.w	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026b6:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00d      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026cc:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	4a40      	ldr	r2, [pc, #256]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d6:	6593      	str	r3, [r2, #88]	; 0x58
 80026d8:	4b3e      	ldr	r3, [pc, #248]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e4:	2301      	movs	r3, #1
 80026e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026e8:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a3a      	ldr	r2, [pc, #232]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026f4:	f7fe fc32 	bl	8000f5c <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026fa:	e009      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fc:	f7fe fc2e 	bl	8000f5c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d902      	bls.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	74fb      	strb	r3, [r7, #19]
        break;
 800270e:	e005      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002710:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ef      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d15c      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002722:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01f      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	429a      	cmp	r2, r3
 800273e:	d019      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fbed 	bl	8000f5c <HAL_GetTick>
 8002782:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002784:	e00b      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7fe fbe9 	bl	8000f5c <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d902      	bls.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	74fb      	strb	r3, [r7, #19]
            break;
 800279c:	e006      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ec      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c2:	4904      	ldr	r1, [pc, #16]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027ca:	e009      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	74bb      	strb	r3, [r7, #18]
 80027d0:	e006      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027e0:	7c7b      	ldrb	r3, [r7, #17]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d105      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e6:	4b9e      	ldr	r3, [pc, #632]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	4a9d      	ldr	r2, [pc, #628]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027fe:	4b98      	ldr	r3, [pc, #608]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f023 0203 	bic.w	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	4994      	ldr	r1, [pc, #592]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002820:	4b8f      	ldr	r3, [pc, #572]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f023 020c 	bic.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	498c      	ldr	r1, [pc, #560]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002842:	4b87      	ldr	r3, [pc, #540]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	4983      	ldr	r1, [pc, #524]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002864:	4b7e      	ldr	r3, [pc, #504]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	497b      	ldr	r1, [pc, #492]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002886:	4b76      	ldr	r3, [pc, #472]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002894:	4972      	ldr	r1, [pc, #456]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028a8:	4b6d      	ldr	r3, [pc, #436]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	496a      	ldr	r1, [pc, #424]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ca:	4b65      	ldr	r3, [pc, #404]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	4961      	ldr	r1, [pc, #388]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028ec:	4b5c      	ldr	r3, [pc, #368]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	4959      	ldr	r1, [pc, #356]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800290e:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291c:	4950      	ldr	r1, [pc, #320]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002930:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	4948      	ldr	r1, [pc, #288]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002952:	4b43      	ldr	r3, [pc, #268]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	493f      	ldr	r1, [pc, #252]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d028      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002974:	4b3a      	ldr	r3, [pc, #232]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002982:	4937      	ldr	r1, [pc, #220]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002992:	d106      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002994:	4b32      	ldr	r3, [pc, #200]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a31      	ldr	r2, [pc, #196]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800299e:	60d3      	str	r3, [r2, #12]
 80029a0:	e011      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029aa:	d10c      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	2101      	movs	r1, #1
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f8c8 	bl	8002b48 <RCCEx_PLLSAI1_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029c2:	7cfb      	ldrb	r3, [r7, #19]
 80029c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d028      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029d2:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	491f      	ldr	r1, [pc, #124]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f0:	d106      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f2:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029fc:	60d3      	str	r3, [r2, #12]
 80029fe:	e011      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f899 	bl	8002b48 <RCCEx_PLLSAI1_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02b      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3e:	4908      	ldr	r1, [pc, #32]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a4e:	d109      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a02      	ldr	r2, [pc, #8]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a5a:	60d3      	str	r3, [r2, #12]
 8002a5c:	e014      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f867 	bl	8002b48 <RCCEx_PLLSAI1_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d02f      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a94:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa2:	4928      	ldr	r1, [pc, #160]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	2102      	movs	r1, #2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f844 	bl	8002b48 <RCCEx_PLLSAI1_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d014      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	74bb      	strb	r3, [r7, #18]
 8002ace:	e011      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3320      	adds	r3, #32
 8002ade:	2102      	movs	r1, #2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 f925 	bl	8002d30 <RCCEx_PLLSAI2_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b0e:	490d      	ldr	r1, [pc, #52]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b32:	4904      	ldr	r1, [pc, #16]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000

08002b48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b56:	4b75      	ldr	r3, [pc, #468]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d018      	beq.n	8002b94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b62:	4b72      	ldr	r3, [pc, #456]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0203 	and.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d10d      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
       ||
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b7a:	4b6c      	ldr	r3, [pc, #432]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
       ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d047      	beq.n	8002c1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
 8002b92:	e044      	b.n	8002c1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d018      	beq.n	8002bce <RCCEx_PLLSAI1_Config+0x86>
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d825      	bhi.n	8002bec <RCCEx_PLLSAI1_Config+0xa4>
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d002      	beq.n	8002baa <RCCEx_PLLSAI1_Config+0x62>
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d009      	beq.n	8002bbc <RCCEx_PLLSAI1_Config+0x74>
 8002ba8:	e020      	b.n	8002bec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002baa:	4b60      	ldr	r3, [pc, #384]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11d      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bba:	e01a      	b.n	8002bf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bbc:	4b5b      	ldr	r3, [pc, #364]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d116      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bcc:	e013      	b.n	8002bf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bce:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10f      	bne.n	8002bfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bda:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bea:	e006      	b.n	8002bfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf0:	e004      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e002      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c02:	4b4a      	ldr	r3, [pc, #296]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	430b      	orrs	r3, r1
 8002c18:	4944      	ldr	r1, [pc, #272]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d17d      	bne.n	8002d20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c24:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a40      	ldr	r2, [pc, #256]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c30:	f7fe f994 	bl	8000f5c <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c36:	e009      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c38:	f7fe f990 	bl	8000f5c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d902      	bls.n	8002c4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	73fb      	strb	r3, [r7, #15]
        break;
 8002c4a:	e005      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c4c:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ef      	bne.n	8002c38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d160      	bne.n	8002d20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d111      	bne.n	8002c88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c64:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6892      	ldr	r2, [r2, #8]
 8002c74:	0211      	lsls	r1, r2, #8
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68d2      	ldr	r2, [r2, #12]
 8002c7a:	0912      	lsrs	r2, r2, #4
 8002c7c:	0452      	lsls	r2, r2, #17
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	492a      	ldr	r1, [pc, #168]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	610b      	str	r3, [r1, #16]
 8002c86:	e027      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d112      	bne.n	8002cb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c8e:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6892      	ldr	r2, [r2, #8]
 8002c9e:	0211      	lsls	r1, r2, #8
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6912      	ldr	r2, [r2, #16]
 8002ca4:	0852      	lsrs	r2, r2, #1
 8002ca6:	3a01      	subs	r2, #1
 8002ca8:	0552      	lsls	r2, r2, #21
 8002caa:	430a      	orrs	r2, r1
 8002cac:	491f      	ldr	r1, [pc, #124]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	610b      	str	r3, [r1, #16]
 8002cb2:	e011      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6892      	ldr	r2, [r2, #8]
 8002cc4:	0211      	lsls	r1, r2, #8
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6952      	ldr	r2, [r2, #20]
 8002cca:	0852      	lsrs	r2, r2, #1
 8002ccc:	3a01      	subs	r2, #1
 8002cce:	0652      	lsls	r2, r2, #25
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	4916      	ldr	r1, [pc, #88]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ce2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe f93a 	bl	8000f5c <HAL_GetTick>
 8002ce8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cea:	e009      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cec:	f7fe f936 	bl	8000f5c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d902      	bls.n	8002d00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	73fb      	strb	r3, [r7, #15]
          break;
 8002cfe:	e005      	b.n	8002d0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ef      	beq.n	8002cec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4904      	ldr	r1, [pc, #16]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000

08002d30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d018      	beq.n	8002d7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d4a:	4b67      	ldr	r3, [pc, #412]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0203 	and.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d10d      	bne.n	8002d76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d62:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
       ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d047      	beq.n	8002e06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	e044      	b.n	8002e06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d018      	beq.n	8002db6 <RCCEx_PLLSAI2_Config+0x86>
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d825      	bhi.n	8002dd4 <RCCEx_PLLSAI2_Config+0xa4>
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d002      	beq.n	8002d92 <RCCEx_PLLSAI2_Config+0x62>
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d009      	beq.n	8002da4 <RCCEx_PLLSAI2_Config+0x74>
 8002d90:	e020      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d92:	4b55      	ldr	r3, [pc, #340]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11d      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da2:	e01a      	b.n	8002dda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d116      	bne.n	8002dde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db4:	e013      	b.n	8002dde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002db6:	4b4c      	ldr	r3, [pc, #304]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10f      	bne.n	8002de2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dc2:	4b49      	ldr	r3, [pc, #292]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dd2:	e006      	b.n	8002de2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd8:	e004      	b.n	8002de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e002      	b.n	8002de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002de2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10d      	bne.n	8002e06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	4939      	ldr	r1, [pc, #228]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d167      	bne.n	8002edc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e0c:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a35      	ldr	r2, [pc, #212]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e18:	f7fe f8a0 	bl	8000f5c <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e1e:	e009      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e20:	f7fe f89c 	bl	8000f5c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d902      	bls.n	8002e34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	73fb      	strb	r3, [r7, #15]
        break;
 8002e32:	e005      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e34:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ef      	bne.n	8002e20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d14a      	bne.n	8002edc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d111      	bne.n	8002e70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e4c:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6892      	ldr	r2, [r2, #8]
 8002e5c:	0211      	lsls	r1, r2, #8
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	0912      	lsrs	r2, r2, #4
 8002e64:	0452      	lsls	r2, r2, #17
 8002e66:	430a      	orrs	r2, r1
 8002e68:	491f      	ldr	r1, [pc, #124]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	614b      	str	r3, [r1, #20]
 8002e6e:	e011      	b.n	8002e94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6892      	ldr	r2, [r2, #8]
 8002e80:	0211      	lsls	r1, r2, #8
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6912      	ldr	r2, [r2, #16]
 8002e86:	0852      	lsrs	r2, r2, #1
 8002e88:	3a01      	subs	r2, #1
 8002e8a:	0652      	lsls	r2, r2, #25
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fe f85c 	bl	8000f5c <HAL_GetTick>
 8002ea4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ea6:	e009      	b.n	8002ebc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ea8:	f7fe f858 	bl	8000f5c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d902      	bls.n	8002ebc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	73fb      	strb	r3, [r7, #15]
          break;
 8002eba:	e005      	b.n	8002ec8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ef      	beq.n	8002ea8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	4904      	ldr	r1, [pc, #16]	; (8002ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000

08002eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e040      	b.n	8002f80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fd fe3c 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2224      	movs	r2, #36	; 0x24
 8002f18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 feca 	bl	8003ccc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fc0f 	bl	800375c <UART_SetConfig>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e01b      	b.n	8002f80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 ff49 	bl	8003e10 <UART_CheckIdleState>
 8002f7e:	4603      	mov	r3, r0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d178      	bne.n	8003092 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_UART_Transmit+0x24>
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e071      	b.n	8003094 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2221      	movs	r2, #33	; 0x21
 8002fbc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fbe:	f7fd ffcd 	bl	8000f5c <HAL_GetTick>
 8002fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	88fa      	ldrh	r2, [r7, #6]
 8002fd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fdc:	d108      	bne.n	8002ff0 <HAL_UART_Transmit+0x68>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d104      	bne.n	8002ff0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	e003      	b.n	8002ff8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ff8:	e030      	b.n	800305c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 ffab 	bl	8003f60 <UART_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e03c      	b.n	8003094 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10b      	bne.n	8003038 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	881a      	ldrh	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800302c:	b292      	uxth	r2, r2
 800302e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	3302      	adds	r3, #2
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	e008      	b.n	800304a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b292      	uxth	r2, r2
 8003042:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	3301      	adds	r3, #1
 8003048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1c8      	bne.n	8002ffa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2200      	movs	r2, #0
 8003070:	2140      	movs	r1, #64	; 0x40
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 ff74 	bl	8003f60 <UART_WaitOnFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d004      	beq.n	8003088 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e005      	b.n	8003094 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3720      	adds	r7, #32
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	4613      	mov	r3, r2
 80030a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d137      	bne.n	8003124 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_UART_Receive_IT+0x24>
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e030      	b.n	8003126 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a18      	ldr	r2, [pc, #96]	; (8003130 <HAL_UART_Receive_IT+0x94>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d01f      	beq.n	8003114 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d018      	beq.n	8003114 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	e853 3f00 	ldrex	r3, [r3]
 80030ee:	613b      	str	r3, [r7, #16]
   return(result);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	623b      	str	r3, [r7, #32]
 8003102:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	69f9      	ldr	r1, [r7, #28]
 8003106:	6a3a      	ldr	r2, [r7, #32]
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	61bb      	str	r3, [r7, #24]
   return(result);
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e6      	bne.n	80030e2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	461a      	mov	r2, r3
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 ff88 	bl	8004030 <UART_Start_Receive_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	e000      	b.n	8003126 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3728      	adds	r7, #40	; 0x28
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40008000 	.word	0x40008000

08003134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b0ba      	sub	sp, #232	; 0xe8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800315a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800315e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003162:	4013      	ands	r3, r2
 8003164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d115      	bne.n	800319c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00f      	beq.n	800319c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 82ae 	beq.w	80036ee <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
      }
      return;
 800319a:	e2a8      	b.n	80036ee <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800319c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8117 	beq.w	80033d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_UART_IRQHandler+0x298>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 810a 	beq.w	80033d4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d011      	beq.n	80031f0 <HAL_UART_IRQHandler+0xbc>
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00b      	beq.n	80031f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2201      	movs	r2, #1
 80031de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d011      	beq.n	8003220 <HAL_UART_IRQHandler+0xec>
 80031fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2202      	movs	r2, #2
 800320e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003216:	f043 0204 	orr.w	r2, r3, #4
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d011      	beq.n	8003250 <HAL_UART_IRQHandler+0x11c>
 800322c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2204      	movs	r2, #4
 800323e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003246:	f043 0202 	orr.w	r2, r3, #2
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d017      	beq.n	800328c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800325c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800326c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2208      	movs	r2, #8
 800327a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003282:	f043 0208 	orr.w	r2, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800328c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_UART_IRQHandler+0x18a>
 8003298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800329c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8214 	beq.w	80036f2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d005      	beq.n	8003316 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800330a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800330e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04f      	beq.n	80033b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 ff50 	bl	80041bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d141      	bne.n	80033ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3308      	adds	r3, #8
 8003352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800335a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800336e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1d9      	bne.n	800332a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003382:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <HAL_UART_IRQHandler+0x29c>)
 8003384:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd ff41 	bl	8001212 <HAL_DMA_Abort_IT>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d017      	beq.n	80033c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e00f      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f9c2 	bl	8003730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	e00b      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f9be 	bl	8003730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	e007      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f9ba 	bl	8003730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80033c4:	e195      	b.n	80036f2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c6:	bf00      	nop
    return;
 80033c8:	e193      	b.n	80036f2 <HAL_UART_IRQHandler+0x5be>
 80033ca:	bf00      	nop
 80033cc:	04000120 	.word	0x04000120
 80033d0:	08004285 	.word	0x08004285

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 814e 	bne.w	800367a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8147 	beq.w	800367a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8140 	beq.w	800367a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2210      	movs	r2, #16
 8003400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	f040 80b8 	bne.w	8003582 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800341e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8167 	beq.w	80036f6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800342e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003432:	429a      	cmp	r2, r3
 8003434:	f080 815f 	bcs.w	80036f6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800343e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 8086 	bne.w	8003560 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800346c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800347e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003482:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800348a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1da      	bne.n	8003454 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3308      	adds	r3, #8
 80034a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e1      	bne.n	800349e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3308      	adds	r3, #8
 80034e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3308      	adds	r3, #8
 80034fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003500:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003504:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800350c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e3      	bne.n	80034da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800352e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003530:	f023 0310 	bic.w	r3, r3, #16
 8003534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003542:	65bb      	str	r3, [r7, #88]	; 0x58
 8003544:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e4      	bne.n	8003520 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fe1b 	bl	8001196 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003572:	b29b      	uxth	r3, r3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	b29b      	uxth	r3, r3
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8e2 	bl	8003744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003580:	e0b9      	b.n	80036f6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800358e:	b29b      	uxth	r3, r3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80ab 	beq.w	80036fa <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80035a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80a6 	beq.w	80036fa <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035d0:	647b      	str	r3, [r7, #68]	; 0x44
 80035d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e4      	bne.n	80035ae <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3308      	adds	r3, #8
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	623b      	str	r3, [r7, #32]
   return(result);
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3308      	adds	r3, #8
 8003604:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003608:	633a      	str	r2, [r7, #48]	; 0x30
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800360e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e3      	bne.n	80035e4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	60fb      	str	r3, [r7, #12]
   return(result);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f023 0310 	bic.w	r3, r3, #16
 8003644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	617b      	str	r3, [r7, #20]
   return(result);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e4      	bne.n	8003630 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800366c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003670:	4619      	mov	r1, r3
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f866 	bl	8003744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003678:	e03f      	b.n	80036fa <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800367a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00e      	beq.n	80036a4 <HAL_UART_IRQHandler+0x570>
 8003686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800368a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800369a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 ffed 	bl	800467c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036a2:	e02d      	b.n	8003700 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80036a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80036b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01c      	beq.n	80036fe <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
    }
    return;
 80036cc:	e017      	b.n	80036fe <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d012      	beq.n	8003700 <HAL_UART_IRQHandler+0x5cc>
 80036da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00c      	beq.n	8003700 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fde2 	bl	80042b0 <UART_EndTransmit_IT>
    return;
 80036ec:	e008      	b.n	8003700 <HAL_UART_IRQHandler+0x5cc>
      return;
 80036ee:	bf00      	nop
 80036f0:	e006      	b.n	8003700 <HAL_UART_IRQHandler+0x5cc>
    return;
 80036f2:	bf00      	nop
 80036f4:	e004      	b.n	8003700 <HAL_UART_IRQHandler+0x5cc>
      return;
 80036f6:	bf00      	nop
 80036f8:	e002      	b.n	8003700 <HAL_UART_IRQHandler+0x5cc>
      return;
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <HAL_UART_IRQHandler+0x5cc>
    return;
 80036fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003700:	37e8      	adds	r7, #232	; 0xe8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop

08003708 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800375c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003760:	b08a      	sub	sp, #40	; 0x28
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	431a      	orrs	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4313      	orrs	r3, r2
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4ba4      	ldr	r3, [pc, #656]	; (8003a1c <UART_SetConfig+0x2c0>)
 800378c:	4013      	ands	r3, r2
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003794:	430b      	orrs	r3, r1
 8003796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a99      	ldr	r2, [pc, #612]	; (8003a20 <UART_SetConfig+0x2c4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c4:	4313      	orrs	r3, r2
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a90      	ldr	r2, [pc, #576]	; (8003a24 <UART_SetConfig+0x2c8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d126      	bne.n	8003834 <UART_SetConfig+0xd8>
 80037e6:	4b90      	ldr	r3, [pc, #576]	; (8003a28 <UART_SetConfig+0x2cc>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d81b      	bhi.n	800382c <UART_SetConfig+0xd0>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <UART_SetConfig+0xa0>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	0800381d 	.word	0x0800381d
 8003804:	08003815 	.word	0x08003815
 8003808:	08003825 	.word	0x08003825
 800380c:	2301      	movs	r3, #1
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003812:	e116      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003814:	2302      	movs	r3, #2
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381a:	e112      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800381c:	2304      	movs	r3, #4
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003822:	e10e      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003824:	2308      	movs	r3, #8
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382a:	e10a      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800382c:	2310      	movs	r3, #16
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003832:	e106      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a7c      	ldr	r2, [pc, #496]	; (8003a2c <UART_SetConfig+0x2d0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d138      	bne.n	80038b0 <UART_SetConfig+0x154>
 800383e:	4b7a      	ldr	r3, [pc, #488]	; (8003a28 <UART_SetConfig+0x2cc>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d82d      	bhi.n	80038a8 <UART_SetConfig+0x14c>
 800384c:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <UART_SetConfig+0xf8>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003889 	.word	0x08003889
 8003858:	080038a9 	.word	0x080038a9
 800385c:	080038a9 	.word	0x080038a9
 8003860:	080038a9 	.word	0x080038a9
 8003864:	08003899 	.word	0x08003899
 8003868:	080038a9 	.word	0x080038a9
 800386c:	080038a9 	.word	0x080038a9
 8003870:	080038a9 	.word	0x080038a9
 8003874:	08003891 	.word	0x08003891
 8003878:	080038a9 	.word	0x080038a9
 800387c:	080038a9 	.word	0x080038a9
 8003880:	080038a9 	.word	0x080038a9
 8003884:	080038a1 	.word	0x080038a1
 8003888:	2300      	movs	r3, #0
 800388a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388e:	e0d8      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003890:	2302      	movs	r3, #2
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003896:	e0d4      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003898:	2304      	movs	r3, #4
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389e:	e0d0      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038a0:	2308      	movs	r3, #8
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a6:	e0cc      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038a8:	2310      	movs	r3, #16
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e0c8      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a5e      	ldr	r2, [pc, #376]	; (8003a30 <UART_SetConfig+0x2d4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d125      	bne.n	8003906 <UART_SetConfig+0x1aa>
 80038ba:	4b5b      	ldr	r3, [pc, #364]	; (8003a28 <UART_SetConfig+0x2cc>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038c4:	2b30      	cmp	r3, #48	; 0x30
 80038c6:	d016      	beq.n	80038f6 <UART_SetConfig+0x19a>
 80038c8:	2b30      	cmp	r3, #48	; 0x30
 80038ca:	d818      	bhi.n	80038fe <UART_SetConfig+0x1a2>
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d00a      	beq.n	80038e6 <UART_SetConfig+0x18a>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d814      	bhi.n	80038fe <UART_SetConfig+0x1a2>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <UART_SetConfig+0x182>
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d008      	beq.n	80038ee <UART_SetConfig+0x192>
 80038dc:	e00f      	b.n	80038fe <UART_SetConfig+0x1a2>
 80038de:	2300      	movs	r3, #0
 80038e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e4:	e0ad      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038e6:	2302      	movs	r3, #2
 80038e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ec:	e0a9      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038ee:	2304      	movs	r3, #4
 80038f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f4:	e0a5      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038f6:	2308      	movs	r3, #8
 80038f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fc:	e0a1      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038fe:	2310      	movs	r3, #16
 8003900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003904:	e09d      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a4a      	ldr	r2, [pc, #296]	; (8003a34 <UART_SetConfig+0x2d8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d125      	bne.n	800395c <UART_SetConfig+0x200>
 8003910:	4b45      	ldr	r3, [pc, #276]	; (8003a28 <UART_SetConfig+0x2cc>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800391a:	2bc0      	cmp	r3, #192	; 0xc0
 800391c:	d016      	beq.n	800394c <UART_SetConfig+0x1f0>
 800391e:	2bc0      	cmp	r3, #192	; 0xc0
 8003920:	d818      	bhi.n	8003954 <UART_SetConfig+0x1f8>
 8003922:	2b80      	cmp	r3, #128	; 0x80
 8003924:	d00a      	beq.n	800393c <UART_SetConfig+0x1e0>
 8003926:	2b80      	cmp	r3, #128	; 0x80
 8003928:	d814      	bhi.n	8003954 <UART_SetConfig+0x1f8>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <UART_SetConfig+0x1d8>
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d008      	beq.n	8003944 <UART_SetConfig+0x1e8>
 8003932:	e00f      	b.n	8003954 <UART_SetConfig+0x1f8>
 8003934:	2300      	movs	r3, #0
 8003936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393a:	e082      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800393c:	2302      	movs	r3, #2
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003942:	e07e      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003944:	2304      	movs	r3, #4
 8003946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394a:	e07a      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800394c:	2308      	movs	r3, #8
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003952:	e076      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003954:	2310      	movs	r3, #16
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395a:	e072      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a35      	ldr	r2, [pc, #212]	; (8003a38 <UART_SetConfig+0x2dc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d12a      	bne.n	80039bc <UART_SetConfig+0x260>
 8003966:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <UART_SetConfig+0x2cc>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003974:	d01a      	beq.n	80039ac <UART_SetConfig+0x250>
 8003976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397a:	d81b      	bhi.n	80039b4 <UART_SetConfig+0x258>
 800397c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003980:	d00c      	beq.n	800399c <UART_SetConfig+0x240>
 8003982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003986:	d815      	bhi.n	80039b4 <UART_SetConfig+0x258>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <UART_SetConfig+0x238>
 800398c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003990:	d008      	beq.n	80039a4 <UART_SetConfig+0x248>
 8003992:	e00f      	b.n	80039b4 <UART_SetConfig+0x258>
 8003994:	2300      	movs	r3, #0
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399a:	e052      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800399c:	2302      	movs	r3, #2
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a2:	e04e      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80039a4:	2304      	movs	r3, #4
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039aa:	e04a      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80039ac:	2308      	movs	r3, #8
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e046      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80039b4:	2310      	movs	r3, #16
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e042      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <UART_SetConfig+0x2c4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d13a      	bne.n	8003a3c <UART_SetConfig+0x2e0>
 80039c6:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <UART_SetConfig+0x2cc>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039d4:	d01a      	beq.n	8003a0c <UART_SetConfig+0x2b0>
 80039d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039da:	d81b      	bhi.n	8003a14 <UART_SetConfig+0x2b8>
 80039dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e0:	d00c      	beq.n	80039fc <UART_SetConfig+0x2a0>
 80039e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e6:	d815      	bhi.n	8003a14 <UART_SetConfig+0x2b8>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <UART_SetConfig+0x298>
 80039ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f0:	d008      	beq.n	8003a04 <UART_SetConfig+0x2a8>
 80039f2:	e00f      	b.n	8003a14 <UART_SetConfig+0x2b8>
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fa:	e022      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80039fc:	2302      	movs	r3, #2
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a02:	e01e      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003a04:	2304      	movs	r3, #4
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e01a      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e016      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003a14:	2310      	movs	r3, #16
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e012      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003a1c:	efff69f3 	.word	0xefff69f3
 8003a20:	40008000 	.word	0x40008000
 8003a24:	40013800 	.word	0x40013800
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40004400 	.word	0x40004400
 8003a30:	40004800 	.word	0x40004800
 8003a34:	40004c00 	.word	0x40004c00
 8003a38:	40005000 	.word	0x40005000
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a9f      	ldr	r2, [pc, #636]	; (8003cc4 <UART_SetConfig+0x568>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d17a      	bne.n	8003b42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d824      	bhi.n	8003a9e <UART_SetConfig+0x342>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0x300>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a81 	.word	0x08003a81
 8003a60:	08003a9f 	.word	0x08003a9f
 8003a64:	08003a89 	.word	0x08003a89
 8003a68:	08003a9f 	.word	0x08003a9f
 8003a6c:	08003a8f 	.word	0x08003a8f
 8003a70:	08003a9f 	.word	0x08003a9f
 8003a74:	08003a9f 	.word	0x08003a9f
 8003a78:	08003a9f 	.word	0x08003a9f
 8003a7c:	08003a97 	.word	0x08003a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a80:	f7fe fcec 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003a84:	61f8      	str	r0, [r7, #28]
        break;
 8003a86:	e010      	b.n	8003aaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a88:	4b8f      	ldr	r3, [pc, #572]	; (8003cc8 <UART_SetConfig+0x56c>)
 8003a8a:	61fb      	str	r3, [r7, #28]
        break;
 8003a8c:	e00d      	b.n	8003aaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8e:	f7fe fc4d 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8003a92:	61f8      	str	r0, [r7, #28]
        break;
 8003a94:	e009      	b.n	8003aaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a9a:	61fb      	str	r3, [r7, #28]
        break;
 8003a9c:	e005      	b.n	8003aaa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003aa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80fb 	beq.w	8003ca8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d305      	bcc.n	8003ace <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d903      	bls.n	8003ad6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ad4:	e0e8      	b.n	8003ca8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	461c      	mov	r4, r3
 8003adc:	4615      	mov	r5, r2
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	022b      	lsls	r3, r5, #8
 8003ae8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003aec:	0222      	lsls	r2, r4, #8
 8003aee:	68f9      	ldr	r1, [r7, #12]
 8003af0:	6849      	ldr	r1, [r1, #4]
 8003af2:	0849      	lsrs	r1, r1, #1
 8003af4:	2000      	movs	r0, #0
 8003af6:	4688      	mov	r8, r1
 8003af8:	4681      	mov	r9, r0
 8003afa:	eb12 0a08 	adds.w	sl, r2, r8
 8003afe:	eb43 0b09 	adc.w	fp, r3, r9
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b10:	4650      	mov	r0, sl
 8003b12:	4659      	mov	r1, fp
 8003b14:	f7fc fbac 	bl	8000270 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b26:	d308      	bcc.n	8003b3a <UART_SetConfig+0x3de>
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2e:	d204      	bcs.n	8003b3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	60da      	str	r2, [r3, #12]
 8003b38:	e0b6      	b.n	8003ca8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b40:	e0b2      	b.n	8003ca8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4a:	d15e      	bne.n	8003c0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d828      	bhi.n	8003ba6 <UART_SetConfig+0x44a>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x400>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003ba7 	.word	0x08003ba7
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003ba7 	.word	0x08003ba7
 8003b74:	08003ba7 	.word	0x08003ba7
 8003b78:	08003ba7 	.word	0x08003ba7
 8003b7c:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe fc6c 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003b84:	61f8      	str	r0, [r7, #28]
        break;
 8003b86:	e014      	b.n	8003bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe fc7e 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8003b8c:	61f8      	str	r0, [r7, #28]
        break;
 8003b8e:	e010      	b.n	8003bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b4d      	ldr	r3, [pc, #308]	; (8003cc8 <UART_SetConfig+0x56c>)
 8003b92:	61fb      	str	r3, [r7, #28]
        break;
 8003b94:	e00d      	b.n	8003bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7fe fbc9 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8003b9a:	61f8      	str	r0, [r7, #28]
        break;
 8003b9c:	e009      	b.n	8003bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	61fb      	str	r3, [r7, #28]
        break;
 8003ba4:	e005      	b.n	8003bb2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d077      	beq.n	8003ca8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005a      	lsls	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b0f      	cmp	r3, #15
 8003bd2:	d916      	bls.n	8003c02 <UART_SetConfig+0x4a6>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d212      	bcs.n	8003c02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f023 030f 	bic.w	r3, r3, #15
 8003be4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	8afb      	ldrh	r3, [r7, #22]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	8afa      	ldrh	r2, [r7, #22]
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	e052      	b.n	8003ca8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c08:	e04e      	b.n	8003ca8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d827      	bhi.n	8003c62 <UART_SetConfig+0x506>
 8003c12:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <UART_SetConfig+0x4bc>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c63 	.word	0x08003c63
 8003c28:	08003c53 	.word	0x08003c53
 8003c2c:	08003c63 	.word	0x08003c63
 8003c30:	08003c63 	.word	0x08003c63
 8003c34:	08003c63 	.word	0x08003c63
 8003c38:	08003c5b 	.word	0x08003c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7fe fc0e 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003c40:	61f8      	str	r0, [r7, #28]
        break;
 8003c42:	e014      	b.n	8003c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c44:	f7fe fc20 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8003c48:	61f8      	str	r0, [r7, #28]
        break;
 8003c4a:	e010      	b.n	8003c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <UART_SetConfig+0x56c>)
 8003c4e:	61fb      	str	r3, [r7, #28]
        break;
 8003c50:	e00d      	b.n	8003c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c52:	f7fe fb6b 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8003c56:	61f8      	str	r0, [r7, #28]
        break;
 8003c58:	e009      	b.n	8003c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5e:	61fb      	str	r3, [r7, #28]
        break;
 8003c60:	e005      	b.n	8003c6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c6c:	bf00      	nop
    }

    if (pclk != 0U)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d019      	beq.n	8003ca8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	085a      	lsrs	r2, r3, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	441a      	add	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	d909      	bls.n	8003ca2 <UART_SetConfig+0x546>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d205      	bcs.n	8003ca2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	e002      	b.n	8003ca8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003cb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3728      	adds	r7, #40	; 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40008000 	.word	0x40008000
 8003cc8:	00f42400 	.word	0x00f42400

08003ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01a      	beq.n	8003de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dca:	d10a      	bne.n	8003de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b098      	sub	sp, #96	; 0x60
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e20:	f7fd f89c 	bl	8000f5c <HAL_GetTick>
 8003e24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d12e      	bne.n	8003e92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f88c 	bl	8003f60 <UART_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d021      	beq.n	8003e92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e62:	653b      	str	r3, [r7, #80]	; 0x50
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e6      	bne.n	8003e4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e062      	b.n	8003f58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d149      	bne.n	8003f34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f856 	bl	8003f60 <UART_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d03c      	beq.n	8003f34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e6      	bne.n	8003eba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3308      	adds	r3, #8
 8003f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f0c:	61fa      	str	r2, [r7, #28]
 8003f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	69b9      	ldr	r1, [r7, #24]
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	617b      	str	r3, [r7, #20]
   return(result);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e5      	bne.n	8003eec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e011      	b.n	8003f58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3758      	adds	r7, #88	; 0x58
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f70:	e049      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d045      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7a:	f7fc ffef 	bl	8000f5c <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d302      	bcc.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e048      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d031      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d110      	bne.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f8ff 	bl	80041bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e029      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe0:	d111      	bne.n	8004006 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f8e5 	bl	80041bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e00f      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	429a      	cmp	r2, r3
 8004022:	d0a6      	beq.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004030:	b480      	push	{r7}
 8004032:	b097      	sub	sp, #92	; 0x5c
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	88fa      	ldrh	r2, [r7, #6]
 8004048:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004062:	d10e      	bne.n	8004082 <UART_Start_Receive_IT+0x52>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <UART_Start_Receive_IT+0x48>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004072:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004076:	e02d      	b.n	80040d4 <UART_Start_Receive_IT+0xa4>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	22ff      	movs	r2, #255	; 0xff
 800407c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004080:	e028      	b.n	80040d4 <UART_Start_Receive_IT+0xa4>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10d      	bne.n	80040a6 <UART_Start_Receive_IT+0x76>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d104      	bne.n	800409c <UART_Start_Receive_IT+0x6c>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	22ff      	movs	r2, #255	; 0xff
 8004096:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800409a:	e01b      	b.n	80040d4 <UART_Start_Receive_IT+0xa4>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	227f      	movs	r2, #127	; 0x7f
 80040a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040a4:	e016      	b.n	80040d4 <UART_Start_Receive_IT+0xa4>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ae:	d10d      	bne.n	80040cc <UART_Start_Receive_IT+0x9c>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d104      	bne.n	80040c2 <UART_Start_Receive_IT+0x92>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	227f      	movs	r2, #127	; 0x7f
 80040bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c0:	e008      	b.n	80040d4 <UART_Start_Receive_IT+0xa4>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	223f      	movs	r2, #63	; 0x3f
 80040c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ca:	e003      	b.n	80040d4 <UART_Start_Receive_IT+0xa4>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2222      	movs	r2, #34	; 0x22
 80040e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3308      	adds	r3, #8
 80040ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	657b      	str	r3, [r7, #84]	; 0x54
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004104:	64ba      	str	r2, [r7, #72]	; 0x48
 8004106:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800410a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e5      	bne.n	80040e4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004120:	d107      	bne.n	8004132 <UART_Start_Receive_IT+0x102>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <UART_Start_Receive_IT+0x184>)
 800412e:	669a      	str	r2, [r3, #104]	; 0x68
 8004130:	e002      	b.n	8004138 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4a20      	ldr	r2, [pc, #128]	; (80041b8 <UART_Start_Receive_IT+0x188>)
 8004136:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d019      	beq.n	8004174 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004154:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415e:	637b      	str	r3, [r7, #52]	; 0x34
 8004160:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e6      	bne.n	8004140 <UART_Start_Receive_IT+0x110>
 8004172:	e018      	b.n	80041a6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	613b      	str	r3, [r7, #16]
   return(result);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f043 0320 	orr.w	r3, r3, #32
 8004188:	653b      	str	r3, [r7, #80]	; 0x50
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	69f9      	ldr	r1, [r7, #28]
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e6      	bne.n	8004174 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	375c      	adds	r7, #92	; 0x5c
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	080044c1 	.word	0x080044c1
 80041b8:	08004305 	.word	0x08004305

080041bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b095      	sub	sp, #84	; 0x54
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e2:	643b      	str	r3, [r7, #64]	; 0x40
 80041e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e6      	bne.n	80041c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3308      	adds	r3, #8
 80041fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	61fb      	str	r3, [r7, #28]
   return(result);
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	64bb      	str	r3, [r7, #72]	; 0x48
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3308      	adds	r3, #8
 8004214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e5      	bne.n	80041f6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422e:	2b01      	cmp	r3, #1
 8004230:	d118      	bne.n	8004264 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f023 0310 	bic.w	r3, r3, #16
 8004246:	647b      	str	r3, [r7, #68]	; 0x44
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6979      	ldr	r1, [r7, #20]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	613b      	str	r3, [r7, #16]
   return(result);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e6      	bne.n	8004232 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004278:	bf00      	nop
 800427a:	3754      	adds	r7, #84	; 0x54
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff fa44 	bl	8003730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6979      	ldr	r1, [r7, #20]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	613b      	str	r3, [r7, #16]
   return(result);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e6      	bne.n	80042b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fa06 	bl	8003708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042fc:	bf00      	nop
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b09c      	sub	sp, #112	; 0x70
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004312:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431c:	2b22      	cmp	r3, #34	; 0x22
 800431e:	f040 80be 	bne.w	800449e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004328:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800432c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004330:	b2d9      	uxtb	r1, r3
 8004332:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004336:	b2da      	uxtb	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	400a      	ands	r2, r1
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	f040 80a3 	bne.w	80044b2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800437a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800437c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004380:	66bb      	str	r3, [r7, #104]	; 0x68
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800438a:	65bb      	str	r3, [r7, #88]	; 0x58
 800438c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004390:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e6      	bne.n	800436c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3308      	adds	r3, #8
 80043a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	667b      	str	r3, [r7, #100]	; 0x64
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3308      	adds	r3, #8
 80043bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80043be:	647a      	str	r2, [r7, #68]	; 0x44
 80043c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e5      	bne.n	800439e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a34      	ldr	r2, [pc, #208]	; (80044bc <UART_RxISR_8BIT+0x1b8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d01f      	beq.n	8004430 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d018      	beq.n	8004430 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	623b      	str	r3, [r7, #32]
   return(result);
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004412:	663b      	str	r3, [r7, #96]	; 0x60
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800441c:	633b      	str	r3, [r7, #48]	; 0x30
 800441e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e6      	bne.n	80043fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004434:	2b01      	cmp	r3, #1
 8004436:	d12e      	bne.n	8004496 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	60fb      	str	r3, [r7, #12]
   return(result);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0310 	bic.w	r3, r3, #16
 8004452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	69b9      	ldr	r1, [r7, #24]
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	617b      	str	r3, [r7, #20]
   return(result);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e6      	bne.n	800443e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b10      	cmp	r3, #16
 800447c:	d103      	bne.n	8004486 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2210      	movs	r2, #16
 8004484:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff f958 	bl	8003744 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004494:	e00d      	b.n	80044b2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff f940 	bl	800371c <HAL_UART_RxCpltCallback>
}
 800449c:	e009      	b.n	80044b2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	8b1b      	ldrh	r3, [r3, #24]
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0208 	orr.w	r2, r2, #8
 80044ae:	b292      	uxth	r2, r2
 80044b0:	831a      	strh	r2, [r3, #24]
}
 80044b2:	bf00      	nop
 80044b4:	3770      	adds	r7, #112	; 0x70
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40008000 	.word	0x40008000

080044c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b09c      	sub	sp, #112	; 0x70
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d8:	2b22      	cmp	r3, #34	; 0x22
 80044da:	f040 80be 	bne.w	800465a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80044ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80044f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80044f6:	4013      	ands	r3, r2
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	1c9a      	adds	r2, r3, #2
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 80a3 	bne.w	800466e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800453c:	667b      	str	r3, [r7, #100]	; 0x64
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004546:	657b      	str	r3, [r7, #84]	; 0x54
 8004548:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800454c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e6      	bne.n	8004528 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	663b      	str	r3, [r7, #96]	; 0x60
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3308      	adds	r3, #8
 8004578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800457a:	643a      	str	r2, [r7, #64]	; 0x40
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e5      	bne.n	800455a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a34      	ldr	r2, [pc, #208]	; (8004678 <UART_RxISR_16BIT+0x1b8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d01f      	beq.n	80045ec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d018      	beq.n	80045ec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045da:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e6      	bne.n	80045ba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d12e      	bne.n	8004652 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	60bb      	str	r3, [r7, #8]
   return(result);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f023 0310 	bic.w	r3, r3, #16
 800460e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6979      	ldr	r1, [r7, #20]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	613b      	str	r3, [r7, #16]
   return(result);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e6      	bne.n	80045fa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f003 0310 	and.w	r3, r3, #16
 8004636:	2b10      	cmp	r3, #16
 8004638:	d103      	bne.n	8004642 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2210      	movs	r2, #16
 8004640:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff f87a 	bl	8003744 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004650:	e00d      	b.n	800466e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff f862 	bl	800371c <HAL_UART_RxCpltCallback>
}
 8004658:	e009      	b.n	800466e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	8b1b      	ldrh	r3, [r3, #24]
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0208 	orr.w	r2, r2, #8
 800466a:	b292      	uxth	r2, r2
 800466c:	831a      	strh	r2, [r3, #24]
}
 800466e:	bf00      	nop
 8004670:	3770      	adds	r7, #112	; 0x70
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40008000 	.word	0x40008000

0800467c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <std>:
 8004690:	2300      	movs	r3, #0
 8004692:	b510      	push	{r4, lr}
 8004694:	4604      	mov	r4, r0
 8004696:	e9c0 3300 	strd	r3, r3, [r0]
 800469a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800469e:	6083      	str	r3, [r0, #8]
 80046a0:	8181      	strh	r1, [r0, #12]
 80046a2:	6643      	str	r3, [r0, #100]	; 0x64
 80046a4:	81c2      	strh	r2, [r0, #14]
 80046a6:	6183      	str	r3, [r0, #24]
 80046a8:	4619      	mov	r1, r3
 80046aa:	2208      	movs	r2, #8
 80046ac:	305c      	adds	r0, #92	; 0x5c
 80046ae:	f000 f8f4 	bl	800489a <memset>
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <std+0x38>)
 80046b4:	6263      	str	r3, [r4, #36]	; 0x24
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <std+0x3c>)
 80046b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <std+0x40>)
 80046bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046be:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <std+0x44>)
 80046c0:	6224      	str	r4, [r4, #32]
 80046c2:	6323      	str	r3, [r4, #48]	; 0x30
 80046c4:	bd10      	pop	{r4, pc}
 80046c6:	bf00      	nop
 80046c8:	08004815 	.word	0x08004815
 80046cc:	08004837 	.word	0x08004837
 80046d0:	0800486f 	.word	0x0800486f
 80046d4:	08004893 	.word	0x08004893

080046d8 <stdio_exit_handler>:
 80046d8:	4a02      	ldr	r2, [pc, #8]	; (80046e4 <stdio_exit_handler+0xc>)
 80046da:	4903      	ldr	r1, [pc, #12]	; (80046e8 <stdio_exit_handler+0x10>)
 80046dc:	4803      	ldr	r0, [pc, #12]	; (80046ec <stdio_exit_handler+0x14>)
 80046de:	f000 b869 	b.w	80047b4 <_fwalk_sglue>
 80046e2:	bf00      	nop
 80046e4:	20000010 	.word	0x20000010
 80046e8:	08005235 	.word	0x08005235
 80046ec:	2000001c 	.word	0x2000001c

080046f0 <cleanup_stdio>:
 80046f0:	6841      	ldr	r1, [r0, #4]
 80046f2:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <cleanup_stdio+0x34>)
 80046f4:	4299      	cmp	r1, r3
 80046f6:	b510      	push	{r4, lr}
 80046f8:	4604      	mov	r4, r0
 80046fa:	d001      	beq.n	8004700 <cleanup_stdio+0x10>
 80046fc:	f000 fd9a 	bl	8005234 <_fflush_r>
 8004700:	68a1      	ldr	r1, [r4, #8]
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <cleanup_stdio+0x38>)
 8004704:	4299      	cmp	r1, r3
 8004706:	d002      	beq.n	800470e <cleanup_stdio+0x1e>
 8004708:	4620      	mov	r0, r4
 800470a:	f000 fd93 	bl	8005234 <_fflush_r>
 800470e:	68e1      	ldr	r1, [r4, #12]
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <cleanup_stdio+0x3c>)
 8004712:	4299      	cmp	r1, r3
 8004714:	d004      	beq.n	8004720 <cleanup_stdio+0x30>
 8004716:	4620      	mov	r0, r4
 8004718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800471c:	f000 bd8a 	b.w	8005234 <_fflush_r>
 8004720:	bd10      	pop	{r4, pc}
 8004722:	bf00      	nop
 8004724:	20000190 	.word	0x20000190
 8004728:	200001f8 	.word	0x200001f8
 800472c:	20000260 	.word	0x20000260

08004730 <global_stdio_init.part.0>:
 8004730:	b510      	push	{r4, lr}
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <global_stdio_init.part.0+0x30>)
 8004734:	4c0b      	ldr	r4, [pc, #44]	; (8004764 <global_stdio_init.part.0+0x34>)
 8004736:	4a0c      	ldr	r2, [pc, #48]	; (8004768 <global_stdio_init.part.0+0x38>)
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	4620      	mov	r0, r4
 800473c:	2200      	movs	r2, #0
 800473e:	2104      	movs	r1, #4
 8004740:	f7ff ffa6 	bl	8004690 <std>
 8004744:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004748:	2201      	movs	r2, #1
 800474a:	2109      	movs	r1, #9
 800474c:	f7ff ffa0 	bl	8004690 <std>
 8004750:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004754:	2202      	movs	r2, #2
 8004756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800475a:	2112      	movs	r1, #18
 800475c:	f7ff bf98 	b.w	8004690 <std>
 8004760:	200002c8 	.word	0x200002c8
 8004764:	20000190 	.word	0x20000190
 8004768:	080046d9 	.word	0x080046d9

0800476c <__sfp_lock_acquire>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__sfp_lock_acquire+0x8>)
 800476e:	f000 b90d 	b.w	800498c <__retarget_lock_acquire_recursive>
 8004772:	bf00      	nop
 8004774:	200002d1 	.word	0x200002d1

08004778 <__sfp_lock_release>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__sfp_lock_release+0x8>)
 800477a:	f000 b908 	b.w	800498e <__retarget_lock_release_recursive>
 800477e:	bf00      	nop
 8004780:	200002d1 	.word	0x200002d1

08004784 <__sinit>:
 8004784:	b510      	push	{r4, lr}
 8004786:	4604      	mov	r4, r0
 8004788:	f7ff fff0 	bl	800476c <__sfp_lock_acquire>
 800478c:	6a23      	ldr	r3, [r4, #32]
 800478e:	b11b      	cbz	r3, 8004798 <__sinit+0x14>
 8004790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004794:	f7ff bff0 	b.w	8004778 <__sfp_lock_release>
 8004798:	4b04      	ldr	r3, [pc, #16]	; (80047ac <__sinit+0x28>)
 800479a:	6223      	str	r3, [r4, #32]
 800479c:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <__sinit+0x2c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f5      	bne.n	8004790 <__sinit+0xc>
 80047a4:	f7ff ffc4 	bl	8004730 <global_stdio_init.part.0>
 80047a8:	e7f2      	b.n	8004790 <__sinit+0xc>
 80047aa:	bf00      	nop
 80047ac:	080046f1 	.word	0x080046f1
 80047b0:	200002c8 	.word	0x200002c8

080047b4 <_fwalk_sglue>:
 80047b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b8:	4607      	mov	r7, r0
 80047ba:	4688      	mov	r8, r1
 80047bc:	4614      	mov	r4, r2
 80047be:	2600      	movs	r6, #0
 80047c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047c4:	f1b9 0901 	subs.w	r9, r9, #1
 80047c8:	d505      	bpl.n	80047d6 <_fwalk_sglue+0x22>
 80047ca:	6824      	ldr	r4, [r4, #0]
 80047cc:	2c00      	cmp	r4, #0
 80047ce:	d1f7      	bne.n	80047c0 <_fwalk_sglue+0xc>
 80047d0:	4630      	mov	r0, r6
 80047d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d6:	89ab      	ldrh	r3, [r5, #12]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d907      	bls.n	80047ec <_fwalk_sglue+0x38>
 80047dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047e0:	3301      	adds	r3, #1
 80047e2:	d003      	beq.n	80047ec <_fwalk_sglue+0x38>
 80047e4:	4629      	mov	r1, r5
 80047e6:	4638      	mov	r0, r7
 80047e8:	47c0      	blx	r8
 80047ea:	4306      	orrs	r6, r0
 80047ec:	3568      	adds	r5, #104	; 0x68
 80047ee:	e7e9      	b.n	80047c4 <_fwalk_sglue+0x10>

080047f0 <iprintf>:
 80047f0:	b40f      	push	{r0, r1, r2, r3}
 80047f2:	b507      	push	{r0, r1, r2, lr}
 80047f4:	4906      	ldr	r1, [pc, #24]	; (8004810 <iprintf+0x20>)
 80047f6:	ab04      	add	r3, sp, #16
 80047f8:	6808      	ldr	r0, [r1, #0]
 80047fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80047fe:	6881      	ldr	r1, [r0, #8]
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	f000 f9e7 	bl	8004bd4 <_vfiprintf_r>
 8004806:	b003      	add	sp, #12
 8004808:	f85d eb04 	ldr.w	lr, [sp], #4
 800480c:	b004      	add	sp, #16
 800480e:	4770      	bx	lr
 8004810:	20000068 	.word	0x20000068

08004814 <__sread>:
 8004814:	b510      	push	{r4, lr}
 8004816:	460c      	mov	r4, r1
 8004818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800481c:	f000 f868 	bl	80048f0 <_read_r>
 8004820:	2800      	cmp	r0, #0
 8004822:	bfab      	itete	ge
 8004824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004826:	89a3      	ldrhlt	r3, [r4, #12]
 8004828:	181b      	addge	r3, r3, r0
 800482a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800482e:	bfac      	ite	ge
 8004830:	6563      	strge	r3, [r4, #84]	; 0x54
 8004832:	81a3      	strhlt	r3, [r4, #12]
 8004834:	bd10      	pop	{r4, pc}

08004836 <__swrite>:
 8004836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800483a:	461f      	mov	r7, r3
 800483c:	898b      	ldrh	r3, [r1, #12]
 800483e:	05db      	lsls	r3, r3, #23
 8004840:	4605      	mov	r5, r0
 8004842:	460c      	mov	r4, r1
 8004844:	4616      	mov	r6, r2
 8004846:	d505      	bpl.n	8004854 <__swrite+0x1e>
 8004848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484c:	2302      	movs	r3, #2
 800484e:	2200      	movs	r2, #0
 8004850:	f000 f83c 	bl	80048cc <_lseek_r>
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800485a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800485e:	81a3      	strh	r3, [r4, #12]
 8004860:	4632      	mov	r2, r6
 8004862:	463b      	mov	r3, r7
 8004864:	4628      	mov	r0, r5
 8004866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800486a:	f000 b853 	b.w	8004914 <_write_r>

0800486e <__sseek>:
 800486e:	b510      	push	{r4, lr}
 8004870:	460c      	mov	r4, r1
 8004872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004876:	f000 f829 	bl	80048cc <_lseek_r>
 800487a:	1c43      	adds	r3, r0, #1
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	bf15      	itete	ne
 8004880:	6560      	strne	r0, [r4, #84]	; 0x54
 8004882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800488a:	81a3      	strheq	r3, [r4, #12]
 800488c:	bf18      	it	ne
 800488e:	81a3      	strhne	r3, [r4, #12]
 8004890:	bd10      	pop	{r4, pc}

08004892 <__sclose>:
 8004892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004896:	f000 b809 	b.w	80048ac <_close_r>

0800489a <memset>:
 800489a:	4402      	add	r2, r0
 800489c:	4603      	mov	r3, r0
 800489e:	4293      	cmp	r3, r2
 80048a0:	d100      	bne.n	80048a4 <memset+0xa>
 80048a2:	4770      	bx	lr
 80048a4:	f803 1b01 	strb.w	r1, [r3], #1
 80048a8:	e7f9      	b.n	800489e <memset+0x4>
	...

080048ac <_close_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4d06      	ldr	r5, [pc, #24]	; (80048c8 <_close_r+0x1c>)
 80048b0:	2300      	movs	r3, #0
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	602b      	str	r3, [r5, #0]
 80048b8:	f7fc fa39 	bl	8000d2e <_close>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_close_r+0x1a>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_close_r+0x1a>
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	200002cc 	.word	0x200002cc

080048cc <_lseek_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4d07      	ldr	r5, [pc, #28]	; (80048ec <_lseek_r+0x20>)
 80048d0:	4604      	mov	r4, r0
 80048d2:	4608      	mov	r0, r1
 80048d4:	4611      	mov	r1, r2
 80048d6:	2200      	movs	r2, #0
 80048d8:	602a      	str	r2, [r5, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	f7fc fa4e 	bl	8000d7c <_lseek>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_lseek_r+0x1e>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_lseek_r+0x1e>
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	200002cc 	.word	0x200002cc

080048f0 <_read_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4d07      	ldr	r5, [pc, #28]	; (8004910 <_read_r+0x20>)
 80048f4:	4604      	mov	r4, r0
 80048f6:	4608      	mov	r0, r1
 80048f8:	4611      	mov	r1, r2
 80048fa:	2200      	movs	r2, #0
 80048fc:	602a      	str	r2, [r5, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	f7fc f9f8 	bl	8000cf4 <_read>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_read_r+0x1e>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_read_r+0x1e>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	200002cc 	.word	0x200002cc

08004914 <_write_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4d07      	ldr	r5, [pc, #28]	; (8004934 <_write_r+0x20>)
 8004918:	4604      	mov	r4, r0
 800491a:	4608      	mov	r0, r1
 800491c:	4611      	mov	r1, r2
 800491e:	2200      	movs	r2, #0
 8004920:	602a      	str	r2, [r5, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7fb fe22 	bl	800056c <_write>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_write_r+0x1e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_write_r+0x1e>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	200002cc 	.word	0x200002cc

08004938 <__errno>:
 8004938:	4b01      	ldr	r3, [pc, #4]	; (8004940 <__errno+0x8>)
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000068 	.word	0x20000068

08004944 <__libc_init_array>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	4d0d      	ldr	r5, [pc, #52]	; (800497c <__libc_init_array+0x38>)
 8004948:	4c0d      	ldr	r4, [pc, #52]	; (8004980 <__libc_init_array+0x3c>)
 800494a:	1b64      	subs	r4, r4, r5
 800494c:	10a4      	asrs	r4, r4, #2
 800494e:	2600      	movs	r6, #0
 8004950:	42a6      	cmp	r6, r4
 8004952:	d109      	bne.n	8004968 <__libc_init_array+0x24>
 8004954:	4d0b      	ldr	r5, [pc, #44]	; (8004984 <__libc_init_array+0x40>)
 8004956:	4c0c      	ldr	r4, [pc, #48]	; (8004988 <__libc_init_array+0x44>)
 8004958:	f000 fdbe 	bl	80054d8 <_init>
 800495c:	1b64      	subs	r4, r4, r5
 800495e:	10a4      	asrs	r4, r4, #2
 8004960:	2600      	movs	r6, #0
 8004962:	42a6      	cmp	r6, r4
 8004964:	d105      	bne.n	8004972 <__libc_init_array+0x2e>
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	f855 3b04 	ldr.w	r3, [r5], #4
 800496c:	4798      	blx	r3
 800496e:	3601      	adds	r6, #1
 8004970:	e7ee      	b.n	8004950 <__libc_init_array+0xc>
 8004972:	f855 3b04 	ldr.w	r3, [r5], #4
 8004976:	4798      	blx	r3
 8004978:	3601      	adds	r6, #1
 800497a:	e7f2      	b.n	8004962 <__libc_init_array+0x1e>
 800497c:	080055a0 	.word	0x080055a0
 8004980:	080055a0 	.word	0x080055a0
 8004984:	080055a0 	.word	0x080055a0
 8004988:	080055a4 	.word	0x080055a4

0800498c <__retarget_lock_acquire_recursive>:
 800498c:	4770      	bx	lr

0800498e <__retarget_lock_release_recursive>:
 800498e:	4770      	bx	lr

08004990 <_free_r>:
 8004990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004992:	2900      	cmp	r1, #0
 8004994:	d044      	beq.n	8004a20 <_free_r+0x90>
 8004996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800499a:	9001      	str	r0, [sp, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f1a1 0404 	sub.w	r4, r1, #4
 80049a2:	bfb8      	it	lt
 80049a4:	18e4      	addlt	r4, r4, r3
 80049a6:	f000 f8df 	bl	8004b68 <__malloc_lock>
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <_free_r+0x94>)
 80049ac:	9801      	ldr	r0, [sp, #4]
 80049ae:	6813      	ldr	r3, [r2, #0]
 80049b0:	b933      	cbnz	r3, 80049c0 <_free_r+0x30>
 80049b2:	6063      	str	r3, [r4, #4]
 80049b4:	6014      	str	r4, [r2, #0]
 80049b6:	b003      	add	sp, #12
 80049b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049bc:	f000 b8da 	b.w	8004b74 <__malloc_unlock>
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	d908      	bls.n	80049d6 <_free_r+0x46>
 80049c4:	6825      	ldr	r5, [r4, #0]
 80049c6:	1961      	adds	r1, r4, r5
 80049c8:	428b      	cmp	r3, r1
 80049ca:	bf01      	itttt	eq
 80049cc:	6819      	ldreq	r1, [r3, #0]
 80049ce:	685b      	ldreq	r3, [r3, #4]
 80049d0:	1949      	addeq	r1, r1, r5
 80049d2:	6021      	streq	r1, [r4, #0]
 80049d4:	e7ed      	b.n	80049b2 <_free_r+0x22>
 80049d6:	461a      	mov	r2, r3
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	b10b      	cbz	r3, 80049e0 <_free_r+0x50>
 80049dc:	42a3      	cmp	r3, r4
 80049de:	d9fa      	bls.n	80049d6 <_free_r+0x46>
 80049e0:	6811      	ldr	r1, [r2, #0]
 80049e2:	1855      	adds	r5, r2, r1
 80049e4:	42a5      	cmp	r5, r4
 80049e6:	d10b      	bne.n	8004a00 <_free_r+0x70>
 80049e8:	6824      	ldr	r4, [r4, #0]
 80049ea:	4421      	add	r1, r4
 80049ec:	1854      	adds	r4, r2, r1
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	6011      	str	r1, [r2, #0]
 80049f2:	d1e0      	bne.n	80049b6 <_free_r+0x26>
 80049f4:	681c      	ldr	r4, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	6053      	str	r3, [r2, #4]
 80049fa:	440c      	add	r4, r1
 80049fc:	6014      	str	r4, [r2, #0]
 80049fe:	e7da      	b.n	80049b6 <_free_r+0x26>
 8004a00:	d902      	bls.n	8004a08 <_free_r+0x78>
 8004a02:	230c      	movs	r3, #12
 8004a04:	6003      	str	r3, [r0, #0]
 8004a06:	e7d6      	b.n	80049b6 <_free_r+0x26>
 8004a08:	6825      	ldr	r5, [r4, #0]
 8004a0a:	1961      	adds	r1, r4, r5
 8004a0c:	428b      	cmp	r3, r1
 8004a0e:	bf04      	itt	eq
 8004a10:	6819      	ldreq	r1, [r3, #0]
 8004a12:	685b      	ldreq	r3, [r3, #4]
 8004a14:	6063      	str	r3, [r4, #4]
 8004a16:	bf04      	itt	eq
 8004a18:	1949      	addeq	r1, r1, r5
 8004a1a:	6021      	streq	r1, [r4, #0]
 8004a1c:	6054      	str	r4, [r2, #4]
 8004a1e:	e7ca      	b.n	80049b6 <_free_r+0x26>
 8004a20:	b003      	add	sp, #12
 8004a22:	bd30      	pop	{r4, r5, pc}
 8004a24:	200002d4 	.word	0x200002d4

08004a28 <sbrk_aligned>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	4e0e      	ldr	r6, [pc, #56]	; (8004a64 <sbrk_aligned+0x3c>)
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	6831      	ldr	r1, [r6, #0]
 8004a30:	4605      	mov	r5, r0
 8004a32:	b911      	cbnz	r1, 8004a3a <sbrk_aligned+0x12>
 8004a34:	f000 fcbc 	bl	80053b0 <_sbrk_r>
 8004a38:	6030      	str	r0, [r6, #0]
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f000 fcb7 	bl	80053b0 <_sbrk_r>
 8004a42:	1c43      	adds	r3, r0, #1
 8004a44:	d00a      	beq.n	8004a5c <sbrk_aligned+0x34>
 8004a46:	1cc4      	adds	r4, r0, #3
 8004a48:	f024 0403 	bic.w	r4, r4, #3
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d007      	beq.n	8004a60 <sbrk_aligned+0x38>
 8004a50:	1a21      	subs	r1, r4, r0
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 fcac 	bl	80053b0 <_sbrk_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d101      	bne.n	8004a60 <sbrk_aligned+0x38>
 8004a5c:	f04f 34ff 	mov.w	r4, #4294967295
 8004a60:	4620      	mov	r0, r4
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	200002d8 	.word	0x200002d8

08004a68 <_malloc_r>:
 8004a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a6c:	1ccd      	adds	r5, r1, #3
 8004a6e:	f025 0503 	bic.w	r5, r5, #3
 8004a72:	3508      	adds	r5, #8
 8004a74:	2d0c      	cmp	r5, #12
 8004a76:	bf38      	it	cc
 8004a78:	250c      	movcc	r5, #12
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	db01      	blt.n	8004a84 <_malloc_r+0x1c>
 8004a80:	42a9      	cmp	r1, r5
 8004a82:	d905      	bls.n	8004a90 <_malloc_r+0x28>
 8004a84:	230c      	movs	r3, #12
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	2600      	movs	r6, #0
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b64 <_malloc_r+0xfc>
 8004a94:	f000 f868 	bl	8004b68 <__malloc_lock>
 8004a98:	f8d8 3000 	ldr.w	r3, [r8]
 8004a9c:	461c      	mov	r4, r3
 8004a9e:	bb5c      	cbnz	r4, 8004af8 <_malloc_r+0x90>
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	f7ff ffc0 	bl	8004a28 <sbrk_aligned>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	4604      	mov	r4, r0
 8004aac:	d155      	bne.n	8004b5a <_malloc_r+0xf2>
 8004aae:	f8d8 4000 	ldr.w	r4, [r8]
 8004ab2:	4626      	mov	r6, r4
 8004ab4:	2e00      	cmp	r6, #0
 8004ab6:	d145      	bne.n	8004b44 <_malloc_r+0xdc>
 8004ab8:	2c00      	cmp	r4, #0
 8004aba:	d048      	beq.n	8004b4e <_malloc_r+0xe6>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	eb04 0903 	add.w	r9, r4, r3
 8004ac6:	f000 fc73 	bl	80053b0 <_sbrk_r>
 8004aca:	4581      	cmp	r9, r0
 8004acc:	d13f      	bne.n	8004b4e <_malloc_r+0xe6>
 8004ace:	6821      	ldr	r1, [r4, #0]
 8004ad0:	1a6d      	subs	r5, r5, r1
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	f7ff ffa7 	bl	8004a28 <sbrk_aligned>
 8004ada:	3001      	adds	r0, #1
 8004adc:	d037      	beq.n	8004b4e <_malloc_r+0xe6>
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	442b      	add	r3, r5
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d038      	beq.n	8004b5e <_malloc_r+0xf6>
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	42a2      	cmp	r2, r4
 8004af0:	d12b      	bne.n	8004b4a <_malloc_r+0xe2>
 8004af2:	2200      	movs	r2, #0
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	e00f      	b.n	8004b18 <_malloc_r+0xb0>
 8004af8:	6822      	ldr	r2, [r4, #0]
 8004afa:	1b52      	subs	r2, r2, r5
 8004afc:	d41f      	bmi.n	8004b3e <_malloc_r+0xd6>
 8004afe:	2a0b      	cmp	r2, #11
 8004b00:	d917      	bls.n	8004b32 <_malloc_r+0xca>
 8004b02:	1961      	adds	r1, r4, r5
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	6025      	str	r5, [r4, #0]
 8004b08:	bf18      	it	ne
 8004b0a:	6059      	strne	r1, [r3, #4]
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	bf08      	it	eq
 8004b10:	f8c8 1000 	streq.w	r1, [r8]
 8004b14:	5162      	str	r2, [r4, r5]
 8004b16:	604b      	str	r3, [r1, #4]
 8004b18:	4638      	mov	r0, r7
 8004b1a:	f104 060b 	add.w	r6, r4, #11
 8004b1e:	f000 f829 	bl	8004b74 <__malloc_unlock>
 8004b22:	f026 0607 	bic.w	r6, r6, #7
 8004b26:	1d23      	adds	r3, r4, #4
 8004b28:	1af2      	subs	r2, r6, r3
 8004b2a:	d0ae      	beq.n	8004a8a <_malloc_r+0x22>
 8004b2c:	1b9b      	subs	r3, r3, r6
 8004b2e:	50a3      	str	r3, [r4, r2]
 8004b30:	e7ab      	b.n	8004a8a <_malloc_r+0x22>
 8004b32:	42a3      	cmp	r3, r4
 8004b34:	6862      	ldr	r2, [r4, #4]
 8004b36:	d1dd      	bne.n	8004af4 <_malloc_r+0x8c>
 8004b38:	f8c8 2000 	str.w	r2, [r8]
 8004b3c:	e7ec      	b.n	8004b18 <_malloc_r+0xb0>
 8004b3e:	4623      	mov	r3, r4
 8004b40:	6864      	ldr	r4, [r4, #4]
 8004b42:	e7ac      	b.n	8004a9e <_malloc_r+0x36>
 8004b44:	4634      	mov	r4, r6
 8004b46:	6876      	ldr	r6, [r6, #4]
 8004b48:	e7b4      	b.n	8004ab4 <_malloc_r+0x4c>
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	e7cc      	b.n	8004ae8 <_malloc_r+0x80>
 8004b4e:	230c      	movs	r3, #12
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	4638      	mov	r0, r7
 8004b54:	f000 f80e 	bl	8004b74 <__malloc_unlock>
 8004b58:	e797      	b.n	8004a8a <_malloc_r+0x22>
 8004b5a:	6025      	str	r5, [r4, #0]
 8004b5c:	e7dc      	b.n	8004b18 <_malloc_r+0xb0>
 8004b5e:	605b      	str	r3, [r3, #4]
 8004b60:	deff      	udf	#255	; 0xff
 8004b62:	bf00      	nop
 8004b64:	200002d4 	.word	0x200002d4

08004b68 <__malloc_lock>:
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <__malloc_lock+0x8>)
 8004b6a:	f7ff bf0f 	b.w	800498c <__retarget_lock_acquire_recursive>
 8004b6e:	bf00      	nop
 8004b70:	200002d0 	.word	0x200002d0

08004b74 <__malloc_unlock>:
 8004b74:	4801      	ldr	r0, [pc, #4]	; (8004b7c <__malloc_unlock+0x8>)
 8004b76:	f7ff bf0a 	b.w	800498e <__retarget_lock_release_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	200002d0 	.word	0x200002d0

08004b80 <__sfputc_r>:
 8004b80:	6893      	ldr	r3, [r2, #8]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	b410      	push	{r4}
 8004b88:	6093      	str	r3, [r2, #8]
 8004b8a:	da08      	bge.n	8004b9e <__sfputc_r+0x1e>
 8004b8c:	6994      	ldr	r4, [r2, #24]
 8004b8e:	42a3      	cmp	r3, r4
 8004b90:	db01      	blt.n	8004b96 <__sfputc_r+0x16>
 8004b92:	290a      	cmp	r1, #10
 8004b94:	d103      	bne.n	8004b9e <__sfputc_r+0x1e>
 8004b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b9a:	f000 bb73 	b.w	8005284 <__swbuf_r>
 8004b9e:	6813      	ldr	r3, [r2, #0]
 8004ba0:	1c58      	adds	r0, r3, #1
 8004ba2:	6010      	str	r0, [r2, #0]
 8004ba4:	7019      	strb	r1, [r3, #0]
 8004ba6:	4608      	mov	r0, r1
 8004ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <__sfputs_r>:
 8004bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	460f      	mov	r7, r1
 8004bb4:	4614      	mov	r4, r2
 8004bb6:	18d5      	adds	r5, r2, r3
 8004bb8:	42ac      	cmp	r4, r5
 8004bba:	d101      	bne.n	8004bc0 <__sfputs_r+0x12>
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	e007      	b.n	8004bd0 <__sfputs_r+0x22>
 8004bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc4:	463a      	mov	r2, r7
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f7ff ffda 	bl	8004b80 <__sfputc_r>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d1f3      	bne.n	8004bb8 <__sfputs_r+0xa>
 8004bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bd4 <_vfiprintf_r>:
 8004bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd8:	460d      	mov	r5, r1
 8004bda:	b09d      	sub	sp, #116	; 0x74
 8004bdc:	4614      	mov	r4, r2
 8004bde:	4698      	mov	r8, r3
 8004be0:	4606      	mov	r6, r0
 8004be2:	b118      	cbz	r0, 8004bec <_vfiprintf_r+0x18>
 8004be4:	6a03      	ldr	r3, [r0, #32]
 8004be6:	b90b      	cbnz	r3, 8004bec <_vfiprintf_r+0x18>
 8004be8:	f7ff fdcc 	bl	8004784 <__sinit>
 8004bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bee:	07d9      	lsls	r1, r3, #31
 8004bf0:	d405      	bmi.n	8004bfe <_vfiprintf_r+0x2a>
 8004bf2:	89ab      	ldrh	r3, [r5, #12]
 8004bf4:	059a      	lsls	r2, r3, #22
 8004bf6:	d402      	bmi.n	8004bfe <_vfiprintf_r+0x2a>
 8004bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bfa:	f7ff fec7 	bl	800498c <__retarget_lock_acquire_recursive>
 8004bfe:	89ab      	ldrh	r3, [r5, #12]
 8004c00:	071b      	lsls	r3, r3, #28
 8004c02:	d501      	bpl.n	8004c08 <_vfiprintf_r+0x34>
 8004c04:	692b      	ldr	r3, [r5, #16]
 8004c06:	b99b      	cbnz	r3, 8004c30 <_vfiprintf_r+0x5c>
 8004c08:	4629      	mov	r1, r5
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f000 fb78 	bl	8005300 <__swsetup_r>
 8004c10:	b170      	cbz	r0, 8004c30 <_vfiprintf_r+0x5c>
 8004c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c14:	07dc      	lsls	r4, r3, #31
 8004c16:	d504      	bpl.n	8004c22 <_vfiprintf_r+0x4e>
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	b01d      	add	sp, #116	; 0x74
 8004c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c22:	89ab      	ldrh	r3, [r5, #12]
 8004c24:	0598      	lsls	r0, r3, #22
 8004c26:	d4f7      	bmi.n	8004c18 <_vfiprintf_r+0x44>
 8004c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c2a:	f7ff feb0 	bl	800498e <__retarget_lock_release_recursive>
 8004c2e:	e7f3      	b.n	8004c18 <_vfiprintf_r+0x44>
 8004c30:	2300      	movs	r3, #0
 8004c32:	9309      	str	r3, [sp, #36]	; 0x24
 8004c34:	2320      	movs	r3, #32
 8004c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c3e:	2330      	movs	r3, #48	; 0x30
 8004c40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004df4 <_vfiprintf_r+0x220>
 8004c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c48:	f04f 0901 	mov.w	r9, #1
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	469a      	mov	sl, r3
 8004c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c54:	b10a      	cbz	r2, 8004c5a <_vfiprintf_r+0x86>
 8004c56:	2a25      	cmp	r2, #37	; 0x25
 8004c58:	d1f9      	bne.n	8004c4e <_vfiprintf_r+0x7a>
 8004c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8004c5e:	d00b      	beq.n	8004c78 <_vfiprintf_r+0xa4>
 8004c60:	465b      	mov	r3, fp
 8004c62:	4622      	mov	r2, r4
 8004c64:	4629      	mov	r1, r5
 8004c66:	4630      	mov	r0, r6
 8004c68:	f7ff ffa1 	bl	8004bae <__sfputs_r>
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	f000 80a9 	beq.w	8004dc4 <_vfiprintf_r+0x1f0>
 8004c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c74:	445a      	add	r2, fp
 8004c76:	9209      	str	r2, [sp, #36]	; 0x24
 8004c78:	f89a 3000 	ldrb.w	r3, [sl]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80a1 	beq.w	8004dc4 <_vfiprintf_r+0x1f0>
 8004c82:	2300      	movs	r3, #0
 8004c84:	f04f 32ff 	mov.w	r2, #4294967295
 8004c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c8c:	f10a 0a01 	add.w	sl, sl, #1
 8004c90:	9304      	str	r3, [sp, #16]
 8004c92:	9307      	str	r3, [sp, #28]
 8004c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c98:	931a      	str	r3, [sp, #104]	; 0x68
 8004c9a:	4654      	mov	r4, sl
 8004c9c:	2205      	movs	r2, #5
 8004c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca2:	4854      	ldr	r0, [pc, #336]	; (8004df4 <_vfiprintf_r+0x220>)
 8004ca4:	f7fb fa94 	bl	80001d0 <memchr>
 8004ca8:	9a04      	ldr	r2, [sp, #16]
 8004caa:	b9d8      	cbnz	r0, 8004ce4 <_vfiprintf_r+0x110>
 8004cac:	06d1      	lsls	r1, r2, #27
 8004cae:	bf44      	itt	mi
 8004cb0:	2320      	movmi	r3, #32
 8004cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cb6:	0713      	lsls	r3, r2, #28
 8004cb8:	bf44      	itt	mi
 8004cba:	232b      	movmi	r3, #43	; 0x2b
 8004cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004cc6:	d015      	beq.n	8004cf4 <_vfiprintf_r+0x120>
 8004cc8:	9a07      	ldr	r2, [sp, #28]
 8004cca:	4654      	mov	r4, sl
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f04f 0c0a 	mov.w	ip, #10
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cd8:	3b30      	subs	r3, #48	; 0x30
 8004cda:	2b09      	cmp	r3, #9
 8004cdc:	d94d      	bls.n	8004d7a <_vfiprintf_r+0x1a6>
 8004cde:	b1b0      	cbz	r0, 8004d0e <_vfiprintf_r+0x13a>
 8004ce0:	9207      	str	r2, [sp, #28]
 8004ce2:	e014      	b.n	8004d0e <_vfiprintf_r+0x13a>
 8004ce4:	eba0 0308 	sub.w	r3, r0, r8
 8004ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	9304      	str	r3, [sp, #16]
 8004cf0:	46a2      	mov	sl, r4
 8004cf2:	e7d2      	b.n	8004c9a <_vfiprintf_r+0xc6>
 8004cf4:	9b03      	ldr	r3, [sp, #12]
 8004cf6:	1d19      	adds	r1, r3, #4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	9103      	str	r1, [sp, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bfbb      	ittet	lt
 8004d00:	425b      	neglt	r3, r3
 8004d02:	f042 0202 	orrlt.w	r2, r2, #2
 8004d06:	9307      	strge	r3, [sp, #28]
 8004d08:	9307      	strlt	r3, [sp, #28]
 8004d0a:	bfb8      	it	lt
 8004d0c:	9204      	strlt	r2, [sp, #16]
 8004d0e:	7823      	ldrb	r3, [r4, #0]
 8004d10:	2b2e      	cmp	r3, #46	; 0x2e
 8004d12:	d10c      	bne.n	8004d2e <_vfiprintf_r+0x15a>
 8004d14:	7863      	ldrb	r3, [r4, #1]
 8004d16:	2b2a      	cmp	r3, #42	; 0x2a
 8004d18:	d134      	bne.n	8004d84 <_vfiprintf_r+0x1b0>
 8004d1a:	9b03      	ldr	r3, [sp, #12]
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	9203      	str	r2, [sp, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bfb8      	it	lt
 8004d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d2a:	3402      	adds	r4, #2
 8004d2c:	9305      	str	r3, [sp, #20]
 8004d2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004e04 <_vfiprintf_r+0x230>
 8004d32:	7821      	ldrb	r1, [r4, #0]
 8004d34:	2203      	movs	r2, #3
 8004d36:	4650      	mov	r0, sl
 8004d38:	f7fb fa4a 	bl	80001d0 <memchr>
 8004d3c:	b138      	cbz	r0, 8004d4e <_vfiprintf_r+0x17a>
 8004d3e:	9b04      	ldr	r3, [sp, #16]
 8004d40:	eba0 000a 	sub.w	r0, r0, sl
 8004d44:	2240      	movs	r2, #64	; 0x40
 8004d46:	4082      	lsls	r2, r0
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	3401      	adds	r4, #1
 8004d4c:	9304      	str	r3, [sp, #16]
 8004d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d52:	4829      	ldr	r0, [pc, #164]	; (8004df8 <_vfiprintf_r+0x224>)
 8004d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d58:	2206      	movs	r2, #6
 8004d5a:	f7fb fa39 	bl	80001d0 <memchr>
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d03f      	beq.n	8004de2 <_vfiprintf_r+0x20e>
 8004d62:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <_vfiprintf_r+0x228>)
 8004d64:	bb1b      	cbnz	r3, 8004dae <_vfiprintf_r+0x1da>
 8004d66:	9b03      	ldr	r3, [sp, #12]
 8004d68:	3307      	adds	r3, #7
 8004d6a:	f023 0307 	bic.w	r3, r3, #7
 8004d6e:	3308      	adds	r3, #8
 8004d70:	9303      	str	r3, [sp, #12]
 8004d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d74:	443b      	add	r3, r7
 8004d76:	9309      	str	r3, [sp, #36]	; 0x24
 8004d78:	e768      	b.n	8004c4c <_vfiprintf_r+0x78>
 8004d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d7e:	460c      	mov	r4, r1
 8004d80:	2001      	movs	r0, #1
 8004d82:	e7a6      	b.n	8004cd2 <_vfiprintf_r+0xfe>
 8004d84:	2300      	movs	r3, #0
 8004d86:	3401      	adds	r4, #1
 8004d88:	9305      	str	r3, [sp, #20]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f04f 0c0a 	mov.w	ip, #10
 8004d90:	4620      	mov	r0, r4
 8004d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d96:	3a30      	subs	r2, #48	; 0x30
 8004d98:	2a09      	cmp	r2, #9
 8004d9a:	d903      	bls.n	8004da4 <_vfiprintf_r+0x1d0>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0c6      	beq.n	8004d2e <_vfiprintf_r+0x15a>
 8004da0:	9105      	str	r1, [sp, #20]
 8004da2:	e7c4      	b.n	8004d2e <_vfiprintf_r+0x15a>
 8004da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004da8:	4604      	mov	r4, r0
 8004daa:	2301      	movs	r3, #1
 8004dac:	e7f0      	b.n	8004d90 <_vfiprintf_r+0x1bc>
 8004dae:	ab03      	add	r3, sp, #12
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	462a      	mov	r2, r5
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <_vfiprintf_r+0x22c>)
 8004db6:	a904      	add	r1, sp, #16
 8004db8:	4630      	mov	r0, r6
 8004dba:	f3af 8000 	nop.w
 8004dbe:	4607      	mov	r7, r0
 8004dc0:	1c78      	adds	r0, r7, #1
 8004dc2:	d1d6      	bne.n	8004d72 <_vfiprintf_r+0x19e>
 8004dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dc6:	07d9      	lsls	r1, r3, #31
 8004dc8:	d405      	bmi.n	8004dd6 <_vfiprintf_r+0x202>
 8004dca:	89ab      	ldrh	r3, [r5, #12]
 8004dcc:	059a      	lsls	r2, r3, #22
 8004dce:	d402      	bmi.n	8004dd6 <_vfiprintf_r+0x202>
 8004dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dd2:	f7ff fddc 	bl	800498e <__retarget_lock_release_recursive>
 8004dd6:	89ab      	ldrh	r3, [r5, #12]
 8004dd8:	065b      	lsls	r3, r3, #25
 8004dda:	f53f af1d 	bmi.w	8004c18 <_vfiprintf_r+0x44>
 8004dde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de0:	e71c      	b.n	8004c1c <_vfiprintf_r+0x48>
 8004de2:	ab03      	add	r3, sp, #12
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	462a      	mov	r2, r5
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <_vfiprintf_r+0x22c>)
 8004dea:	a904      	add	r1, sp, #16
 8004dec:	4630      	mov	r0, r6
 8004dee:	f000 f879 	bl	8004ee4 <_printf_i>
 8004df2:	e7e4      	b.n	8004dbe <_vfiprintf_r+0x1ea>
 8004df4:	08005564 	.word	0x08005564
 8004df8:	0800556e 	.word	0x0800556e
 8004dfc:	00000000 	.word	0x00000000
 8004e00:	08004baf 	.word	0x08004baf
 8004e04:	0800556a 	.word	0x0800556a

08004e08 <_printf_common>:
 8004e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e0c:	4616      	mov	r6, r2
 8004e0e:	4699      	mov	r9, r3
 8004e10:	688a      	ldr	r2, [r1, #8]
 8004e12:	690b      	ldr	r3, [r1, #16]
 8004e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	bfb8      	it	lt
 8004e1c:	4613      	movlt	r3, r2
 8004e1e:	6033      	str	r3, [r6, #0]
 8004e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e24:	4607      	mov	r7, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	b10a      	cbz	r2, 8004e2e <_printf_common+0x26>
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	6033      	str	r3, [r6, #0]
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	0699      	lsls	r1, r3, #26
 8004e32:	bf42      	ittt	mi
 8004e34:	6833      	ldrmi	r3, [r6, #0]
 8004e36:	3302      	addmi	r3, #2
 8004e38:	6033      	strmi	r3, [r6, #0]
 8004e3a:	6825      	ldr	r5, [r4, #0]
 8004e3c:	f015 0506 	ands.w	r5, r5, #6
 8004e40:	d106      	bne.n	8004e50 <_printf_common+0x48>
 8004e42:	f104 0a19 	add.w	sl, r4, #25
 8004e46:	68e3      	ldr	r3, [r4, #12]
 8004e48:	6832      	ldr	r2, [r6, #0]
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	42ab      	cmp	r3, r5
 8004e4e:	dc26      	bgt.n	8004e9e <_printf_common+0x96>
 8004e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e54:	1e13      	subs	r3, r2, #0
 8004e56:	6822      	ldr	r2, [r4, #0]
 8004e58:	bf18      	it	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	0692      	lsls	r2, r2, #26
 8004e5e:	d42b      	bmi.n	8004eb8 <_printf_common+0xb0>
 8004e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e64:	4649      	mov	r1, r9
 8004e66:	4638      	mov	r0, r7
 8004e68:	47c0      	blx	r8
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d01e      	beq.n	8004eac <_printf_common+0xa4>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	6922      	ldr	r2, [r4, #16]
 8004e72:	f003 0306 	and.w	r3, r3, #6
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	bf02      	ittt	eq
 8004e7a:	68e5      	ldreq	r5, [r4, #12]
 8004e7c:	6833      	ldreq	r3, [r6, #0]
 8004e7e:	1aed      	subeq	r5, r5, r3
 8004e80:	68a3      	ldr	r3, [r4, #8]
 8004e82:	bf0c      	ite	eq
 8004e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e88:	2500      	movne	r5, #0
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	bfc4      	itt	gt
 8004e8e:	1a9b      	subgt	r3, r3, r2
 8004e90:	18ed      	addgt	r5, r5, r3
 8004e92:	2600      	movs	r6, #0
 8004e94:	341a      	adds	r4, #26
 8004e96:	42b5      	cmp	r5, r6
 8004e98:	d11a      	bne.n	8004ed0 <_printf_common+0xc8>
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	e008      	b.n	8004eb0 <_printf_common+0xa8>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4652      	mov	r2, sl
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	4638      	mov	r0, r7
 8004ea6:	47c0      	blx	r8
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d103      	bne.n	8004eb4 <_printf_common+0xac>
 8004eac:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb4:	3501      	adds	r5, #1
 8004eb6:	e7c6      	b.n	8004e46 <_printf_common+0x3e>
 8004eb8:	18e1      	adds	r1, r4, r3
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	2030      	movs	r0, #48	; 0x30
 8004ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ec2:	4422      	add	r2, r4
 8004ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ecc:	3302      	adds	r3, #2
 8004ece:	e7c7      	b.n	8004e60 <_printf_common+0x58>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	4622      	mov	r2, r4
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	47c0      	blx	r8
 8004eda:	3001      	adds	r0, #1
 8004edc:	d0e6      	beq.n	8004eac <_printf_common+0xa4>
 8004ede:	3601      	adds	r6, #1
 8004ee0:	e7d9      	b.n	8004e96 <_printf_common+0x8e>
	...

08004ee4 <_printf_i>:
 8004ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee8:	7e0f      	ldrb	r7, [r1, #24]
 8004eea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004eec:	2f78      	cmp	r7, #120	; 0x78
 8004eee:	4691      	mov	r9, r2
 8004ef0:	4680      	mov	r8, r0
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	469a      	mov	sl, r3
 8004ef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004efa:	d807      	bhi.n	8004f0c <_printf_i+0x28>
 8004efc:	2f62      	cmp	r7, #98	; 0x62
 8004efe:	d80a      	bhi.n	8004f16 <_printf_i+0x32>
 8004f00:	2f00      	cmp	r7, #0
 8004f02:	f000 80d4 	beq.w	80050ae <_printf_i+0x1ca>
 8004f06:	2f58      	cmp	r7, #88	; 0x58
 8004f08:	f000 80c0 	beq.w	800508c <_printf_i+0x1a8>
 8004f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f14:	e03a      	b.n	8004f8c <_printf_i+0xa8>
 8004f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f1a:	2b15      	cmp	r3, #21
 8004f1c:	d8f6      	bhi.n	8004f0c <_printf_i+0x28>
 8004f1e:	a101      	add	r1, pc, #4	; (adr r1, 8004f24 <_printf_i+0x40>)
 8004f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f24:	08004f7d 	.word	0x08004f7d
 8004f28:	08004f91 	.word	0x08004f91
 8004f2c:	08004f0d 	.word	0x08004f0d
 8004f30:	08004f0d 	.word	0x08004f0d
 8004f34:	08004f0d 	.word	0x08004f0d
 8004f38:	08004f0d 	.word	0x08004f0d
 8004f3c:	08004f91 	.word	0x08004f91
 8004f40:	08004f0d 	.word	0x08004f0d
 8004f44:	08004f0d 	.word	0x08004f0d
 8004f48:	08004f0d 	.word	0x08004f0d
 8004f4c:	08004f0d 	.word	0x08004f0d
 8004f50:	08005095 	.word	0x08005095
 8004f54:	08004fbd 	.word	0x08004fbd
 8004f58:	0800504f 	.word	0x0800504f
 8004f5c:	08004f0d 	.word	0x08004f0d
 8004f60:	08004f0d 	.word	0x08004f0d
 8004f64:	080050b7 	.word	0x080050b7
 8004f68:	08004f0d 	.word	0x08004f0d
 8004f6c:	08004fbd 	.word	0x08004fbd
 8004f70:	08004f0d 	.word	0x08004f0d
 8004f74:	08004f0d 	.word	0x08004f0d
 8004f78:	08005057 	.word	0x08005057
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	1d1a      	adds	r2, r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	602a      	str	r2, [r5, #0]
 8004f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e09f      	b.n	80050d0 <_printf_i+0x1ec>
 8004f90:	6820      	ldr	r0, [r4, #0]
 8004f92:	682b      	ldr	r3, [r5, #0]
 8004f94:	0607      	lsls	r7, r0, #24
 8004f96:	f103 0104 	add.w	r1, r3, #4
 8004f9a:	6029      	str	r1, [r5, #0]
 8004f9c:	d501      	bpl.n	8004fa2 <_printf_i+0xbe>
 8004f9e:	681e      	ldr	r6, [r3, #0]
 8004fa0:	e003      	b.n	8004faa <_printf_i+0xc6>
 8004fa2:	0646      	lsls	r6, r0, #25
 8004fa4:	d5fb      	bpl.n	8004f9e <_printf_i+0xba>
 8004fa6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	da03      	bge.n	8004fb6 <_printf_i+0xd2>
 8004fae:	232d      	movs	r3, #45	; 0x2d
 8004fb0:	4276      	negs	r6, r6
 8004fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb6:	485a      	ldr	r0, [pc, #360]	; (8005120 <_printf_i+0x23c>)
 8004fb8:	230a      	movs	r3, #10
 8004fba:	e012      	b.n	8004fe2 <_printf_i+0xfe>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	6820      	ldr	r0, [r4, #0]
 8004fc0:	1d19      	adds	r1, r3, #4
 8004fc2:	6029      	str	r1, [r5, #0]
 8004fc4:	0605      	lsls	r5, r0, #24
 8004fc6:	d501      	bpl.n	8004fcc <_printf_i+0xe8>
 8004fc8:	681e      	ldr	r6, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <_printf_i+0xee>
 8004fcc:	0641      	lsls	r1, r0, #25
 8004fce:	d5fb      	bpl.n	8004fc8 <_printf_i+0xe4>
 8004fd0:	881e      	ldrh	r6, [r3, #0]
 8004fd2:	4853      	ldr	r0, [pc, #332]	; (8005120 <_printf_i+0x23c>)
 8004fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8004fd6:	bf0c      	ite	eq
 8004fd8:	2308      	moveq	r3, #8
 8004fda:	230a      	movne	r3, #10
 8004fdc:	2100      	movs	r1, #0
 8004fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fe2:	6865      	ldr	r5, [r4, #4]
 8004fe4:	60a5      	str	r5, [r4, #8]
 8004fe6:	2d00      	cmp	r5, #0
 8004fe8:	bfa2      	ittt	ge
 8004fea:	6821      	ldrge	r1, [r4, #0]
 8004fec:	f021 0104 	bicge.w	r1, r1, #4
 8004ff0:	6021      	strge	r1, [r4, #0]
 8004ff2:	b90e      	cbnz	r6, 8004ff8 <_printf_i+0x114>
 8004ff4:	2d00      	cmp	r5, #0
 8004ff6:	d04b      	beq.n	8005090 <_printf_i+0x1ac>
 8004ff8:	4615      	mov	r5, r2
 8004ffa:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ffe:	fb03 6711 	mls	r7, r3, r1, r6
 8005002:	5dc7      	ldrb	r7, [r0, r7]
 8005004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005008:	4637      	mov	r7, r6
 800500a:	42bb      	cmp	r3, r7
 800500c:	460e      	mov	r6, r1
 800500e:	d9f4      	bls.n	8004ffa <_printf_i+0x116>
 8005010:	2b08      	cmp	r3, #8
 8005012:	d10b      	bne.n	800502c <_printf_i+0x148>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	07de      	lsls	r6, r3, #31
 8005018:	d508      	bpl.n	800502c <_printf_i+0x148>
 800501a:	6923      	ldr	r3, [r4, #16]
 800501c:	6861      	ldr	r1, [r4, #4]
 800501e:	4299      	cmp	r1, r3
 8005020:	bfde      	ittt	le
 8005022:	2330      	movle	r3, #48	; 0x30
 8005024:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800502c:	1b52      	subs	r2, r2, r5
 800502e:	6122      	str	r2, [r4, #16]
 8005030:	f8cd a000 	str.w	sl, [sp]
 8005034:	464b      	mov	r3, r9
 8005036:	aa03      	add	r2, sp, #12
 8005038:	4621      	mov	r1, r4
 800503a:	4640      	mov	r0, r8
 800503c:	f7ff fee4 	bl	8004e08 <_printf_common>
 8005040:	3001      	adds	r0, #1
 8005042:	d14a      	bne.n	80050da <_printf_i+0x1f6>
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	b004      	add	sp, #16
 800504a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	f043 0320 	orr.w	r3, r3, #32
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	4833      	ldr	r0, [pc, #204]	; (8005124 <_printf_i+0x240>)
 8005058:	2778      	movs	r7, #120	; 0x78
 800505a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	6829      	ldr	r1, [r5, #0]
 8005062:	061f      	lsls	r7, r3, #24
 8005064:	f851 6b04 	ldr.w	r6, [r1], #4
 8005068:	d402      	bmi.n	8005070 <_printf_i+0x18c>
 800506a:	065f      	lsls	r7, r3, #25
 800506c:	bf48      	it	mi
 800506e:	b2b6      	uxthmi	r6, r6
 8005070:	07df      	lsls	r7, r3, #31
 8005072:	bf48      	it	mi
 8005074:	f043 0320 	orrmi.w	r3, r3, #32
 8005078:	6029      	str	r1, [r5, #0]
 800507a:	bf48      	it	mi
 800507c:	6023      	strmi	r3, [r4, #0]
 800507e:	b91e      	cbnz	r6, 8005088 <_printf_i+0x1a4>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	f023 0320 	bic.w	r3, r3, #32
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	2310      	movs	r3, #16
 800508a:	e7a7      	b.n	8004fdc <_printf_i+0xf8>
 800508c:	4824      	ldr	r0, [pc, #144]	; (8005120 <_printf_i+0x23c>)
 800508e:	e7e4      	b.n	800505a <_printf_i+0x176>
 8005090:	4615      	mov	r5, r2
 8005092:	e7bd      	b.n	8005010 <_printf_i+0x12c>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	6826      	ldr	r6, [r4, #0]
 8005098:	6961      	ldr	r1, [r4, #20]
 800509a:	1d18      	adds	r0, r3, #4
 800509c:	6028      	str	r0, [r5, #0]
 800509e:	0635      	lsls	r5, r6, #24
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	d501      	bpl.n	80050a8 <_printf_i+0x1c4>
 80050a4:	6019      	str	r1, [r3, #0]
 80050a6:	e002      	b.n	80050ae <_printf_i+0x1ca>
 80050a8:	0670      	lsls	r0, r6, #25
 80050aa:	d5fb      	bpl.n	80050a4 <_printf_i+0x1c0>
 80050ac:	8019      	strh	r1, [r3, #0]
 80050ae:	2300      	movs	r3, #0
 80050b0:	6123      	str	r3, [r4, #16]
 80050b2:	4615      	mov	r5, r2
 80050b4:	e7bc      	b.n	8005030 <_printf_i+0x14c>
 80050b6:	682b      	ldr	r3, [r5, #0]
 80050b8:	1d1a      	adds	r2, r3, #4
 80050ba:	602a      	str	r2, [r5, #0]
 80050bc:	681d      	ldr	r5, [r3, #0]
 80050be:	6862      	ldr	r2, [r4, #4]
 80050c0:	2100      	movs	r1, #0
 80050c2:	4628      	mov	r0, r5
 80050c4:	f7fb f884 	bl	80001d0 <memchr>
 80050c8:	b108      	cbz	r0, 80050ce <_printf_i+0x1ea>
 80050ca:	1b40      	subs	r0, r0, r5
 80050cc:	6060      	str	r0, [r4, #4]
 80050ce:	6863      	ldr	r3, [r4, #4]
 80050d0:	6123      	str	r3, [r4, #16]
 80050d2:	2300      	movs	r3, #0
 80050d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d8:	e7aa      	b.n	8005030 <_printf_i+0x14c>
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	462a      	mov	r2, r5
 80050de:	4649      	mov	r1, r9
 80050e0:	4640      	mov	r0, r8
 80050e2:	47d0      	blx	sl
 80050e4:	3001      	adds	r0, #1
 80050e6:	d0ad      	beq.n	8005044 <_printf_i+0x160>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	079b      	lsls	r3, r3, #30
 80050ec:	d413      	bmi.n	8005116 <_printf_i+0x232>
 80050ee:	68e0      	ldr	r0, [r4, #12]
 80050f0:	9b03      	ldr	r3, [sp, #12]
 80050f2:	4298      	cmp	r0, r3
 80050f4:	bfb8      	it	lt
 80050f6:	4618      	movlt	r0, r3
 80050f8:	e7a6      	b.n	8005048 <_printf_i+0x164>
 80050fa:	2301      	movs	r3, #1
 80050fc:	4632      	mov	r2, r6
 80050fe:	4649      	mov	r1, r9
 8005100:	4640      	mov	r0, r8
 8005102:	47d0      	blx	sl
 8005104:	3001      	adds	r0, #1
 8005106:	d09d      	beq.n	8005044 <_printf_i+0x160>
 8005108:	3501      	adds	r5, #1
 800510a:	68e3      	ldr	r3, [r4, #12]
 800510c:	9903      	ldr	r1, [sp, #12]
 800510e:	1a5b      	subs	r3, r3, r1
 8005110:	42ab      	cmp	r3, r5
 8005112:	dcf2      	bgt.n	80050fa <_printf_i+0x216>
 8005114:	e7eb      	b.n	80050ee <_printf_i+0x20a>
 8005116:	2500      	movs	r5, #0
 8005118:	f104 0619 	add.w	r6, r4, #25
 800511c:	e7f5      	b.n	800510a <_printf_i+0x226>
 800511e:	bf00      	nop
 8005120:	08005575 	.word	0x08005575
 8005124:	08005586 	.word	0x08005586

08005128 <__sflush_r>:
 8005128:	898a      	ldrh	r2, [r1, #12]
 800512a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512e:	4605      	mov	r5, r0
 8005130:	0710      	lsls	r0, r2, #28
 8005132:	460c      	mov	r4, r1
 8005134:	d458      	bmi.n	80051e8 <__sflush_r+0xc0>
 8005136:	684b      	ldr	r3, [r1, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	dc05      	bgt.n	8005148 <__sflush_r+0x20>
 800513c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	dc02      	bgt.n	8005148 <__sflush_r+0x20>
 8005142:	2000      	movs	r0, #0
 8005144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800514a:	2e00      	cmp	r6, #0
 800514c:	d0f9      	beq.n	8005142 <__sflush_r+0x1a>
 800514e:	2300      	movs	r3, #0
 8005150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005154:	682f      	ldr	r7, [r5, #0]
 8005156:	6a21      	ldr	r1, [r4, #32]
 8005158:	602b      	str	r3, [r5, #0]
 800515a:	d032      	beq.n	80051c2 <__sflush_r+0x9a>
 800515c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	075a      	lsls	r2, r3, #29
 8005162:	d505      	bpl.n	8005170 <__sflush_r+0x48>
 8005164:	6863      	ldr	r3, [r4, #4]
 8005166:	1ac0      	subs	r0, r0, r3
 8005168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800516a:	b10b      	cbz	r3, 8005170 <__sflush_r+0x48>
 800516c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800516e:	1ac0      	subs	r0, r0, r3
 8005170:	2300      	movs	r3, #0
 8005172:	4602      	mov	r2, r0
 8005174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005176:	6a21      	ldr	r1, [r4, #32]
 8005178:	4628      	mov	r0, r5
 800517a:	47b0      	blx	r6
 800517c:	1c43      	adds	r3, r0, #1
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	d106      	bne.n	8005190 <__sflush_r+0x68>
 8005182:	6829      	ldr	r1, [r5, #0]
 8005184:	291d      	cmp	r1, #29
 8005186:	d82b      	bhi.n	80051e0 <__sflush_r+0xb8>
 8005188:	4a29      	ldr	r2, [pc, #164]	; (8005230 <__sflush_r+0x108>)
 800518a:	410a      	asrs	r2, r1
 800518c:	07d6      	lsls	r6, r2, #31
 800518e:	d427      	bmi.n	80051e0 <__sflush_r+0xb8>
 8005190:	2200      	movs	r2, #0
 8005192:	6062      	str	r2, [r4, #4]
 8005194:	04d9      	lsls	r1, r3, #19
 8005196:	6922      	ldr	r2, [r4, #16]
 8005198:	6022      	str	r2, [r4, #0]
 800519a:	d504      	bpl.n	80051a6 <__sflush_r+0x7e>
 800519c:	1c42      	adds	r2, r0, #1
 800519e:	d101      	bne.n	80051a4 <__sflush_r+0x7c>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b903      	cbnz	r3, 80051a6 <__sflush_r+0x7e>
 80051a4:	6560      	str	r0, [r4, #84]	; 0x54
 80051a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051a8:	602f      	str	r7, [r5, #0]
 80051aa:	2900      	cmp	r1, #0
 80051ac:	d0c9      	beq.n	8005142 <__sflush_r+0x1a>
 80051ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051b2:	4299      	cmp	r1, r3
 80051b4:	d002      	beq.n	80051bc <__sflush_r+0x94>
 80051b6:	4628      	mov	r0, r5
 80051b8:	f7ff fbea 	bl	8004990 <_free_r>
 80051bc:	2000      	movs	r0, #0
 80051be:	6360      	str	r0, [r4, #52]	; 0x34
 80051c0:	e7c0      	b.n	8005144 <__sflush_r+0x1c>
 80051c2:	2301      	movs	r3, #1
 80051c4:	4628      	mov	r0, r5
 80051c6:	47b0      	blx	r6
 80051c8:	1c41      	adds	r1, r0, #1
 80051ca:	d1c8      	bne.n	800515e <__sflush_r+0x36>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0c5      	beq.n	800515e <__sflush_r+0x36>
 80051d2:	2b1d      	cmp	r3, #29
 80051d4:	d001      	beq.n	80051da <__sflush_r+0xb2>
 80051d6:	2b16      	cmp	r3, #22
 80051d8:	d101      	bne.n	80051de <__sflush_r+0xb6>
 80051da:	602f      	str	r7, [r5, #0]
 80051dc:	e7b1      	b.n	8005142 <__sflush_r+0x1a>
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	e7ad      	b.n	8005144 <__sflush_r+0x1c>
 80051e8:	690f      	ldr	r7, [r1, #16]
 80051ea:	2f00      	cmp	r7, #0
 80051ec:	d0a9      	beq.n	8005142 <__sflush_r+0x1a>
 80051ee:	0793      	lsls	r3, r2, #30
 80051f0:	680e      	ldr	r6, [r1, #0]
 80051f2:	bf08      	it	eq
 80051f4:	694b      	ldreq	r3, [r1, #20]
 80051f6:	600f      	str	r7, [r1, #0]
 80051f8:	bf18      	it	ne
 80051fa:	2300      	movne	r3, #0
 80051fc:	eba6 0807 	sub.w	r8, r6, r7
 8005200:	608b      	str	r3, [r1, #8]
 8005202:	f1b8 0f00 	cmp.w	r8, #0
 8005206:	dd9c      	ble.n	8005142 <__sflush_r+0x1a>
 8005208:	6a21      	ldr	r1, [r4, #32]
 800520a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800520c:	4643      	mov	r3, r8
 800520e:	463a      	mov	r2, r7
 8005210:	4628      	mov	r0, r5
 8005212:	47b0      	blx	r6
 8005214:	2800      	cmp	r0, #0
 8005216:	dc06      	bgt.n	8005226 <__sflush_r+0xfe>
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800521e:	81a3      	strh	r3, [r4, #12]
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	e78e      	b.n	8005144 <__sflush_r+0x1c>
 8005226:	4407      	add	r7, r0
 8005228:	eba8 0800 	sub.w	r8, r8, r0
 800522c:	e7e9      	b.n	8005202 <__sflush_r+0xda>
 800522e:	bf00      	nop
 8005230:	dfbffffe 	.word	0xdfbffffe

08005234 <_fflush_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	690b      	ldr	r3, [r1, #16]
 8005238:	4605      	mov	r5, r0
 800523a:	460c      	mov	r4, r1
 800523c:	b913      	cbnz	r3, 8005244 <_fflush_r+0x10>
 800523e:	2500      	movs	r5, #0
 8005240:	4628      	mov	r0, r5
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	b118      	cbz	r0, 800524e <_fflush_r+0x1a>
 8005246:	6a03      	ldr	r3, [r0, #32]
 8005248:	b90b      	cbnz	r3, 800524e <_fflush_r+0x1a>
 800524a:	f7ff fa9b 	bl	8004784 <__sinit>
 800524e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f3      	beq.n	800523e <_fflush_r+0xa>
 8005256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005258:	07d0      	lsls	r0, r2, #31
 800525a:	d404      	bmi.n	8005266 <_fflush_r+0x32>
 800525c:	0599      	lsls	r1, r3, #22
 800525e:	d402      	bmi.n	8005266 <_fflush_r+0x32>
 8005260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005262:	f7ff fb93 	bl	800498c <__retarget_lock_acquire_recursive>
 8005266:	4628      	mov	r0, r5
 8005268:	4621      	mov	r1, r4
 800526a:	f7ff ff5d 	bl	8005128 <__sflush_r>
 800526e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005270:	07da      	lsls	r2, r3, #31
 8005272:	4605      	mov	r5, r0
 8005274:	d4e4      	bmi.n	8005240 <_fflush_r+0xc>
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	059b      	lsls	r3, r3, #22
 800527a:	d4e1      	bmi.n	8005240 <_fflush_r+0xc>
 800527c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800527e:	f7ff fb86 	bl	800498e <__retarget_lock_release_recursive>
 8005282:	e7dd      	b.n	8005240 <_fflush_r+0xc>

08005284 <__swbuf_r>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	460e      	mov	r6, r1
 8005288:	4614      	mov	r4, r2
 800528a:	4605      	mov	r5, r0
 800528c:	b118      	cbz	r0, 8005296 <__swbuf_r+0x12>
 800528e:	6a03      	ldr	r3, [r0, #32]
 8005290:	b90b      	cbnz	r3, 8005296 <__swbuf_r+0x12>
 8005292:	f7ff fa77 	bl	8004784 <__sinit>
 8005296:	69a3      	ldr	r3, [r4, #24]
 8005298:	60a3      	str	r3, [r4, #8]
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	071a      	lsls	r2, r3, #28
 800529e:	d525      	bpl.n	80052ec <__swbuf_r+0x68>
 80052a0:	6923      	ldr	r3, [r4, #16]
 80052a2:	b31b      	cbz	r3, 80052ec <__swbuf_r+0x68>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	6922      	ldr	r2, [r4, #16]
 80052a8:	1a98      	subs	r0, r3, r2
 80052aa:	6963      	ldr	r3, [r4, #20]
 80052ac:	b2f6      	uxtb	r6, r6
 80052ae:	4283      	cmp	r3, r0
 80052b0:	4637      	mov	r7, r6
 80052b2:	dc04      	bgt.n	80052be <__swbuf_r+0x3a>
 80052b4:	4621      	mov	r1, r4
 80052b6:	4628      	mov	r0, r5
 80052b8:	f7ff ffbc 	bl	8005234 <_fflush_r>
 80052bc:	b9e0      	cbnz	r0, 80052f8 <__swbuf_r+0x74>
 80052be:	68a3      	ldr	r3, [r4, #8]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	60a3      	str	r3, [r4, #8]
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	6022      	str	r2, [r4, #0]
 80052ca:	701e      	strb	r6, [r3, #0]
 80052cc:	6962      	ldr	r2, [r4, #20]
 80052ce:	1c43      	adds	r3, r0, #1
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d004      	beq.n	80052de <__swbuf_r+0x5a>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	07db      	lsls	r3, r3, #31
 80052d8:	d506      	bpl.n	80052e8 <__swbuf_r+0x64>
 80052da:	2e0a      	cmp	r6, #10
 80052dc:	d104      	bne.n	80052e8 <__swbuf_r+0x64>
 80052de:	4621      	mov	r1, r4
 80052e0:	4628      	mov	r0, r5
 80052e2:	f7ff ffa7 	bl	8005234 <_fflush_r>
 80052e6:	b938      	cbnz	r0, 80052f8 <__swbuf_r+0x74>
 80052e8:	4638      	mov	r0, r7
 80052ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ec:	4621      	mov	r1, r4
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 f806 	bl	8005300 <__swsetup_r>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d0d5      	beq.n	80052a4 <__swbuf_r+0x20>
 80052f8:	f04f 37ff 	mov.w	r7, #4294967295
 80052fc:	e7f4      	b.n	80052e8 <__swbuf_r+0x64>
	...

08005300 <__swsetup_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	4b2a      	ldr	r3, [pc, #168]	; (80053ac <__swsetup_r+0xac>)
 8005304:	4605      	mov	r5, r0
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	460c      	mov	r4, r1
 800530a:	b118      	cbz	r0, 8005314 <__swsetup_r+0x14>
 800530c:	6a03      	ldr	r3, [r0, #32]
 800530e:	b90b      	cbnz	r3, 8005314 <__swsetup_r+0x14>
 8005310:	f7ff fa38 	bl	8004784 <__sinit>
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800531a:	0718      	lsls	r0, r3, #28
 800531c:	d422      	bmi.n	8005364 <__swsetup_r+0x64>
 800531e:	06d9      	lsls	r1, r3, #27
 8005320:	d407      	bmi.n	8005332 <__swsetup_r+0x32>
 8005322:	2309      	movs	r3, #9
 8005324:	602b      	str	r3, [r5, #0]
 8005326:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	f04f 30ff 	mov.w	r0, #4294967295
 8005330:	e034      	b.n	800539c <__swsetup_r+0x9c>
 8005332:	0758      	lsls	r0, r3, #29
 8005334:	d512      	bpl.n	800535c <__swsetup_r+0x5c>
 8005336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005338:	b141      	cbz	r1, 800534c <__swsetup_r+0x4c>
 800533a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800533e:	4299      	cmp	r1, r3
 8005340:	d002      	beq.n	8005348 <__swsetup_r+0x48>
 8005342:	4628      	mov	r0, r5
 8005344:	f7ff fb24 	bl	8004990 <_free_r>
 8005348:	2300      	movs	r3, #0
 800534a:	6363      	str	r3, [r4, #52]	; 0x34
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	2300      	movs	r3, #0
 8005356:	6063      	str	r3, [r4, #4]
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	f043 0308 	orr.w	r3, r3, #8
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	6923      	ldr	r3, [r4, #16]
 8005366:	b94b      	cbnz	r3, 800537c <__swsetup_r+0x7c>
 8005368:	89a3      	ldrh	r3, [r4, #12]
 800536a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800536e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005372:	d003      	beq.n	800537c <__swsetup_r+0x7c>
 8005374:	4621      	mov	r1, r4
 8005376:	4628      	mov	r0, r5
 8005378:	f000 f850 	bl	800541c <__smakebuf_r>
 800537c:	89a0      	ldrh	r0, [r4, #12]
 800537e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005382:	f010 0301 	ands.w	r3, r0, #1
 8005386:	d00a      	beq.n	800539e <__swsetup_r+0x9e>
 8005388:	2300      	movs	r3, #0
 800538a:	60a3      	str	r3, [r4, #8]
 800538c:	6963      	ldr	r3, [r4, #20]
 800538e:	425b      	negs	r3, r3
 8005390:	61a3      	str	r3, [r4, #24]
 8005392:	6923      	ldr	r3, [r4, #16]
 8005394:	b943      	cbnz	r3, 80053a8 <__swsetup_r+0xa8>
 8005396:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800539a:	d1c4      	bne.n	8005326 <__swsetup_r+0x26>
 800539c:	bd38      	pop	{r3, r4, r5, pc}
 800539e:	0781      	lsls	r1, r0, #30
 80053a0:	bf58      	it	pl
 80053a2:	6963      	ldrpl	r3, [r4, #20]
 80053a4:	60a3      	str	r3, [r4, #8]
 80053a6:	e7f4      	b.n	8005392 <__swsetup_r+0x92>
 80053a8:	2000      	movs	r0, #0
 80053aa:	e7f7      	b.n	800539c <__swsetup_r+0x9c>
 80053ac:	20000068 	.word	0x20000068

080053b0 <_sbrk_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4d06      	ldr	r5, [pc, #24]	; (80053cc <_sbrk_r+0x1c>)
 80053b4:	2300      	movs	r3, #0
 80053b6:	4604      	mov	r4, r0
 80053b8:	4608      	mov	r0, r1
 80053ba:	602b      	str	r3, [r5, #0]
 80053bc:	f7fb fcec 	bl	8000d98 <_sbrk>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d102      	bne.n	80053ca <_sbrk_r+0x1a>
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	b103      	cbz	r3, 80053ca <_sbrk_r+0x1a>
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	200002cc 	.word	0x200002cc

080053d0 <__swhatbuf_r>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	460c      	mov	r4, r1
 80053d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d8:	2900      	cmp	r1, #0
 80053da:	b096      	sub	sp, #88	; 0x58
 80053dc:	4615      	mov	r5, r2
 80053de:	461e      	mov	r6, r3
 80053e0:	da0d      	bge.n	80053fe <__swhatbuf_r+0x2e>
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053e8:	f04f 0100 	mov.w	r1, #0
 80053ec:	bf0c      	ite	eq
 80053ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80053f2:	2340      	movne	r3, #64	; 0x40
 80053f4:	2000      	movs	r0, #0
 80053f6:	6031      	str	r1, [r6, #0]
 80053f8:	602b      	str	r3, [r5, #0]
 80053fa:	b016      	add	sp, #88	; 0x58
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
 80053fe:	466a      	mov	r2, sp
 8005400:	f000 f848 	bl	8005494 <_fstat_r>
 8005404:	2800      	cmp	r0, #0
 8005406:	dbec      	blt.n	80053e2 <__swhatbuf_r+0x12>
 8005408:	9901      	ldr	r1, [sp, #4]
 800540a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800540e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005412:	4259      	negs	r1, r3
 8005414:	4159      	adcs	r1, r3
 8005416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800541a:	e7eb      	b.n	80053f4 <__swhatbuf_r+0x24>

0800541c <__smakebuf_r>:
 800541c:	898b      	ldrh	r3, [r1, #12]
 800541e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005420:	079d      	lsls	r5, r3, #30
 8005422:	4606      	mov	r6, r0
 8005424:	460c      	mov	r4, r1
 8005426:	d507      	bpl.n	8005438 <__smakebuf_r+0x1c>
 8005428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	2301      	movs	r3, #1
 8005432:	6163      	str	r3, [r4, #20]
 8005434:	b002      	add	sp, #8
 8005436:	bd70      	pop	{r4, r5, r6, pc}
 8005438:	ab01      	add	r3, sp, #4
 800543a:	466a      	mov	r2, sp
 800543c:	f7ff ffc8 	bl	80053d0 <__swhatbuf_r>
 8005440:	9900      	ldr	r1, [sp, #0]
 8005442:	4605      	mov	r5, r0
 8005444:	4630      	mov	r0, r6
 8005446:	f7ff fb0f 	bl	8004a68 <_malloc_r>
 800544a:	b948      	cbnz	r0, 8005460 <__smakebuf_r+0x44>
 800544c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005450:	059a      	lsls	r2, r3, #22
 8005452:	d4ef      	bmi.n	8005434 <__smakebuf_r+0x18>
 8005454:	f023 0303 	bic.w	r3, r3, #3
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	e7e3      	b.n	8005428 <__smakebuf_r+0xc>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	6020      	str	r0, [r4, #0]
 8005464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005468:	81a3      	strh	r3, [r4, #12]
 800546a:	9b00      	ldr	r3, [sp, #0]
 800546c:	6163      	str	r3, [r4, #20]
 800546e:	9b01      	ldr	r3, [sp, #4]
 8005470:	6120      	str	r0, [r4, #16]
 8005472:	b15b      	cbz	r3, 800548c <__smakebuf_r+0x70>
 8005474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005478:	4630      	mov	r0, r6
 800547a:	f000 f81d 	bl	80054b8 <_isatty_r>
 800547e:	b128      	cbz	r0, 800548c <__smakebuf_r+0x70>
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	431d      	orrs	r5, r3
 8005490:	81a5      	strh	r5, [r4, #12]
 8005492:	e7cf      	b.n	8005434 <__smakebuf_r+0x18>

08005494 <_fstat_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4d07      	ldr	r5, [pc, #28]	; (80054b4 <_fstat_r+0x20>)
 8005498:	2300      	movs	r3, #0
 800549a:	4604      	mov	r4, r0
 800549c:	4608      	mov	r0, r1
 800549e:	4611      	mov	r1, r2
 80054a0:	602b      	str	r3, [r5, #0]
 80054a2:	f7fb fc50 	bl	8000d46 <_fstat>
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	d102      	bne.n	80054b0 <_fstat_r+0x1c>
 80054aa:	682b      	ldr	r3, [r5, #0]
 80054ac:	b103      	cbz	r3, 80054b0 <_fstat_r+0x1c>
 80054ae:	6023      	str	r3, [r4, #0]
 80054b0:	bd38      	pop	{r3, r4, r5, pc}
 80054b2:	bf00      	nop
 80054b4:	200002cc 	.word	0x200002cc

080054b8 <_isatty_r>:
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4d06      	ldr	r5, [pc, #24]	; (80054d4 <_isatty_r+0x1c>)
 80054bc:	2300      	movs	r3, #0
 80054be:	4604      	mov	r4, r0
 80054c0:	4608      	mov	r0, r1
 80054c2:	602b      	str	r3, [r5, #0]
 80054c4:	f7fb fc4f 	bl	8000d66 <_isatty>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_isatty_r+0x1a>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_isatty_r+0x1a>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	200002cc 	.word	0x200002cc

080054d8 <_init>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	bf00      	nop
 80054dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054de:	bc08      	pop	{r3}
 80054e0:	469e      	mov	lr, r3
 80054e2:	4770      	bx	lr

080054e4 <_fini>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	bf00      	nop
 80054e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ea:	bc08      	pop	{r3}
 80054ec:	469e      	mov	lr, r3
 80054ee:	4770      	bx	lr
