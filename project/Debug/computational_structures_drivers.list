
computational_structures_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005910  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b30  08005b30  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b38  08005b38  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  2000006c  08005bac  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08005bac  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ef7  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028cc  00000000  00000000  00030fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  000338a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3b  00000000  00000000  00034738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d9a  00000000  00000000  00035273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130b3  00000000  00000000  0005d00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed806  00000000  00000000  000700c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004304  00000000  00000000  0015d8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d4  00000000  00000000  00161bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a88 	.word	0x08005a88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005a88 	.word	0x08005a88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <keypad_init>:

/**
 * @brief This functions initialize the functionality of the keypad
 */
void keypad_init(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

	/* Set the rows high to be detected in the columns by rising interrupt */
	ROW_1_GPIO_Port->BSRR = ROW_1_Pin;
 8000570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000578:	619a      	str	r2, [r3, #24]
	ROW_2_GPIO_Port->BSRR = ROW_2_Pin;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <keypad_init+0x2c>)
 800057c:	2208      	movs	r2, #8
 800057e:	619a      	str	r2, [r3, #24]
	ROW_3_GPIO_Port->BSRR = ROW_3_Pin;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <keypad_init+0x2c>)
 8000582:	2220      	movs	r2, #32
 8000584:	619a      	str	r2, [r3, #24]
	ROW_4_GPIO_Port->BSRR = ROW_4_Pin;
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <keypad_init+0x2c>)
 8000588:	2210      	movs	r2, #16
 800058a:	619a      	str	r2, [r3, #24]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	48000400 	.word	0x48000400

0800059c <keypad_handler>:
 * @brief  This function debounces and identify keypad events.
 * @param  column_to_evaluate: the column where the event happened.
 * @retval 0xFF -> invalid key. [0x00 - 0x0F] -> valid key.
 */
uint8_t keypad_handler(uint16_t column_to_evaluate)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF; // Value to return
 80005a6:	23ff      	movs	r3, #255	; 0xff
 80005a8:	73fb      	strb	r3, [r7, #15]

	/*** Debounce the key press (remove noise in the key) ***/
	static uint32_t last_pressed_tick = 0;
	if (HAL_GetTick() <= (last_pressed_tick + KEY_DEBOUNCE_MS)) {
 80005aa:	f000 fdc9 	bl	8001140 <HAL_GetTick>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4bb1      	ldr	r3, [pc, #708]	; (8000878 <keypad_handler+0x2dc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d801      	bhi.n	80005c0 <keypad_handler+0x24>
		// less than KEY_DEBOUNCE_MS since last press. Probably noise
		return key_pressed; // return 0xFF
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	e17d      	b.n	80008bc <keypad_handler+0x320>
	}
	last_pressed_tick = HAL_GetTick();
 80005c0:	f000 fdbe 	bl	8001140 <HAL_GetTick>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4aac      	ldr	r2, [pc, #688]	; (8000878 <keypad_handler+0x2dc>)
 80005c8:	6013      	str	r3, [r2, #0]

	/*** Check in which column the event happened ***/
	switch (column_to_evaluate) {
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005d0:	d012      	beq.n	80005f8 <keypad_handler+0x5c>
 80005d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005d6:	f300 816e 	bgt.w	80008b6 <keypad_handler+0x31a>
 80005da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005de:	f000 80b5 	beq.w	800074c <keypad_handler+0x1b0>
 80005e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005e6:	f300 8166 	bgt.w	80008b6 <keypad_handler+0x31a>
 80005ea:	2b80      	cmp	r3, #128	; 0x80
 80005ec:	f000 8104 	beq.w	80007f8 <keypad_handler+0x25c>
 80005f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005f4:	d053      	beq.n	800069e <keypad_handler+0x102>
 80005f6:	e15e      	b.n	80008b6 <keypad_handler+0x31a>
	case COLUMN_1_Pin:

		/*= if the event corresponds to column 1, the following logic is used =*/

		/*Activate the first row and deactivate the others*/
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin;
 80005f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000600:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;
 8000602:	4b9e      	ldr	r3, [pc, #632]	; (800087c <keypad_handler+0x2e0>)
 8000604:	2208      	movs	r2, #8
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;
 8000608:	4b9c      	ldr	r3, [pc, #624]	; (800087c <keypad_handler+0x2e0>)
 800060a:	2220      	movs	r2, #32
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;
 800060e:	4b9b      	ldr	r3, [pc, #620]	; (800087c <keypad_handler+0x2e0>)
 8000610:	2210      	movs	r2, #16
 8000612:	629a      	str	r2, [r3, #40]	; 0x28

		HAL_Delay(10); // wait for voltage to establish
 8000614:	200a      	movs	r0, #10
 8000616:	f000 fd9f 	bl	8001158 <HAL_Delay>


		/*if column 1 is still high -> column 1 + row 1 = key 1*/
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 800061a:	4b98      	ldr	r3, [pc, #608]	; (800087c <keypad_handler+0x2e0>)
 800061c:	691b      	ldr	r3, [r3, #16]
 800061e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <keypad_handler+0x90>
			key_pressed = 0x01;
 8000626:	2301      	movs	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
			break;
 800062a:	e144      	b.n	80008b6 <keypad_handler+0x31a>

		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 800062c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 8000636:	4b91      	ldr	r3, [pc, #580]	; (800087c <keypad_handler+0x2e0>)
 8000638:	2208      	movs	r2, #8
 800063a:	619a      	str	r2, [r3, #24]

		HAL_Delay(10); // wait for voltage to establish
 800063c:	200a      	movs	r0, #10
 800063e:	f000 fd8b 	bl	8001158 <HAL_Delay>


		/*if column 1 is still high -> column 1 + row 2 = key 4*/
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 8000642:	4b8e      	ldr	r3, [pc, #568]	; (800087c <keypad_handler+0x2e0>)
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <keypad_handler+0xb8>
			key_pressed = 0x04;
 800064e:	2304      	movs	r3, #4
 8000650:	73fb      	strb	r3, [r7, #15]
			break;
 8000652:	e130      	b.n	80008b6 <keypad_handler+0x31a>
		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 8000654:	4b89      	ldr	r3, [pc, #548]	; (800087c <keypad_handler+0x2e0>)
 8000656:	2208      	movs	r2, #8
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 800065a:	4b88      	ldr	r3, [pc, #544]	; (800087c <keypad_handler+0x2e0>)
 800065c:	2220      	movs	r2, #32
 800065e:	619a      	str	r2, [r3, #24]

		HAL_Delay(10); // wait for voltage to establish
 8000660:	200a      	movs	r0, #10
 8000662:	f000 fd79 	bl	8001158 <HAL_Delay>


		/* if column 1 is still high -> column 1 + row 3 = key 7*/
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 8000666:	4b85      	ldr	r3, [pc, #532]	; (800087c <keypad_handler+0x2e0>)
 8000668:	691b      	ldr	r3, [r3, #16]
 800066a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <keypad_handler+0xdc>
			key_pressed = 0x07;
 8000672:	2307      	movs	r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
			break;
 8000676:	e11e      	b.n	80008b6 <keypad_handler+0x31a>

		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000678:	4b80      	ldr	r3, [pc, #512]	; (800087c <keypad_handler+0x2e0>)
 800067a:	2220      	movs	r2, #32
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 800067e:	4b7f      	ldr	r3, [pc, #508]	; (800087c <keypad_handler+0x2e0>)
 8000680:	2210      	movs	r2, #16
 8000682:	619a      	str	r2, [r3, #24]

		HAL_Delay(10); // wait for voltage to establish
 8000684:	200a      	movs	r0, #10
 8000686:	f000 fd67 	bl	8001158 <HAL_Delay>


		/*if column 1 is still high -> column 1 + row 4 = key **/
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 800068a:	4b7c      	ldr	r3, [pc, #496]	; (800087c <keypad_handler+0x2e0>)
 800068c:	691b      	ldr	r3, [r3, #16]
 800068e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000692:	2b00      	cmp	r3, #0
 8000694:	f000 8108 	beq.w	80008a8 <keypad_handler+0x30c>
			key_pressed = 0x0E;
 8000698:	230e      	movs	r3, #14
 800069a:	73fb      	strb	r3, [r7, #15]
			break;
 800069c:	e10b      	b.n	80008b6 <keypad_handler+0x31a>
	case COLUMN_2_Pin:

		/*= if the event corresponds to column 2, the following logic is used =*/

		/*Activate the first row and deactivate the others*/
				ROW_1_GPIO_Port->BSRR = ROW_1_Pin;
 800069e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a6:	619a      	str	r2, [r3, #24]
				ROW_2_GPIO_Port->BRR = ROW_2_Pin;
 80006a8:	4b74      	ldr	r3, [pc, #464]	; (800087c <keypad_handler+0x2e0>)
 80006aa:	2208      	movs	r2, #8
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_3_GPIO_Port->BRR = ROW_3_Pin;
 80006ae:	4b73      	ldr	r3, [pc, #460]	; (800087c <keypad_handler+0x2e0>)
 80006b0:	2220      	movs	r2, #32
 80006b2:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_4_GPIO_Port->BRR = ROW_4_Pin;
 80006b4:	4b71      	ldr	r3, [pc, #452]	; (800087c <keypad_handler+0x2e0>)
 80006b6:	2210      	movs	r2, #16
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28

				HAL_Delay(10); // wait for voltage to establish
 80006ba:	200a      	movs	r0, #10
 80006bc:	f000 fd4c 	bl	8001158 <HAL_Delay>


				/*if column 2 is still high -> column 2 + row 1 = key 2*/
				if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 80006c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d002      	beq.n	80006d4 <keypad_handler+0x138>
					key_pressed = 0x02;
 80006ce:	2302      	movs	r3, #2
 80006d0:	73fb      	strb	r3, [r7, #15]
					break;
 80006d2:	e0f0      	b.n	80008b6 <keypad_handler+0x31a>

				}

				ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 80006d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 80006de:	4b67      	ldr	r3, [pc, #412]	; (800087c <keypad_handler+0x2e0>)
 80006e0:	2208      	movs	r2, #8
 80006e2:	619a      	str	r2, [r3, #24]

				HAL_Delay(10); // wait for voltage to establish
 80006e4:	200a      	movs	r0, #10
 80006e6:	f000 fd37 	bl	8001158 <HAL_Delay>


				/*if column 2 is still high -> column 2 + row 2 = key 5*/
				if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 80006ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006ee:	691b      	ldr	r3, [r3, #16]
 80006f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <keypad_handler+0x162>
					key_pressed = 0x05;
 80006f8:	2305      	movs	r3, #5
 80006fa:	73fb      	strb	r3, [r7, #15]
					break;
 80006fc:	e0db      	b.n	80008b6 <keypad_handler+0x31a>
				}

				ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 80006fe:	4b5f      	ldr	r3, [pc, #380]	; (800087c <keypad_handler+0x2e0>)
 8000700:	2208      	movs	r2, #8
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 8000704:	4b5d      	ldr	r3, [pc, #372]	; (800087c <keypad_handler+0x2e0>)
 8000706:	2220      	movs	r2, #32
 8000708:	619a      	str	r2, [r3, #24]

				HAL_Delay(10); // wait for voltage to establish
 800070a:	200a      	movs	r0, #10
 800070c:	f000 fd24 	bl	8001158 <HAL_Delay>


				/*if column 2 is still high -> column 2 + row 3 = key 8*/
				if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 8000710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <keypad_handler+0x188>
					key_pressed = 0x08;
 800071e:	2308      	movs	r3, #8
 8000720:	73fb      	strb	r3, [r7, #15]
					break;
 8000722:	e0c8      	b.n	80008b6 <keypad_handler+0x31a>

				}

				ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000724:	4b55      	ldr	r3, [pc, #340]	; (800087c <keypad_handler+0x2e0>)
 8000726:	2220      	movs	r2, #32
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 800072a:	4b54      	ldr	r3, [pc, #336]	; (800087c <keypad_handler+0x2e0>)
 800072c:	2210      	movs	r2, #16
 800072e:	619a      	str	r2, [r3, #24]

				HAL_Delay(10); // wait for voltage to establish
 8000730:	200a      	movs	r0, #10
 8000732:	f000 fd11 	bl	8001158 <HAL_Delay>


				/*if column 2 is still high -> column 2 + row 4 = key 0*/
				if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 8000736:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800073a:	691b      	ldr	r3, [r3, #16]
 800073c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000740:	2b00      	cmp	r3, #0
 8000742:	f000 80b3 	beq.w	80008ac <keypad_handler+0x310>
					key_pressed = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	73fb      	strb	r3, [r7, #15]
					break;
 800074a:	e0b4      	b.n	80008b6 <keypad_handler+0x31a>
	case COLUMN_3_Pin:

		/*= if the event corresponds to column 3, the following logic is used =*/

		/*Activate the first row and deactivate the others*/
				ROW_1_GPIO_Port->BSRR = ROW_1_Pin;
 800074c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	619a      	str	r2, [r3, #24]
				ROW_2_GPIO_Port->BRR = ROW_2_Pin;
 8000756:	4b49      	ldr	r3, [pc, #292]	; (800087c <keypad_handler+0x2e0>)
 8000758:	2208      	movs	r2, #8
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_3_GPIO_Port->BRR = ROW_3_Pin;
 800075c:	4b47      	ldr	r3, [pc, #284]	; (800087c <keypad_handler+0x2e0>)
 800075e:	2220      	movs	r2, #32
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_4_GPIO_Port->BRR = ROW_4_Pin;
 8000762:	4b46      	ldr	r3, [pc, #280]	; (800087c <keypad_handler+0x2e0>)
 8000764:	2210      	movs	r2, #16
 8000766:	629a      	str	r2, [r3, #40]	; 0x28

				HAL_Delay(10); // wait for voltage to establish
 8000768:	200a      	movs	r0, #10
 800076a:	f000 fcf5 	bl	8001158 <HAL_Delay>


				/* if column 3 is still high -> column 3 + row 1 = key 3*/
				if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 800076e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <keypad_handler+0x1e6>
					key_pressed = 0x03;
 800077c:	2303      	movs	r3, #3
 800077e:	73fb      	strb	r3, [r7, #15]
					break;
 8000780:	e099      	b.n	80008b6 <keypad_handler+0x31a>

				}

				ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 8000782:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 800078c:	4b3b      	ldr	r3, [pc, #236]	; (800087c <keypad_handler+0x2e0>)
 800078e:	2208      	movs	r2, #8
 8000790:	619a      	str	r2, [r3, #24]

				HAL_Delay(10); // wait for voltage to establish
 8000792:	200a      	movs	r0, #10
 8000794:	f000 fce0 	bl	8001158 <HAL_Delay>


				/*if column 3 is still high -> column 3 + row 2 = key 6*/
				if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 8000798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <keypad_handler+0x210>
					key_pressed = 0x06;
 80007a6:	2306      	movs	r3, #6
 80007a8:	73fb      	strb	r3, [r7, #15]
					break;
 80007aa:	e084      	b.n	80008b6 <keypad_handler+0x31a>
				}

				ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 80007ac:	4b33      	ldr	r3, [pc, #204]	; (800087c <keypad_handler+0x2e0>)
 80007ae:	2208      	movs	r2, #8
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 80007b2:	4b32      	ldr	r3, [pc, #200]	; (800087c <keypad_handler+0x2e0>)
 80007b4:	2220      	movs	r2, #32
 80007b6:	619a      	str	r2, [r3, #24]

				HAL_Delay(10); // wait for voltage to establish
 80007b8:	200a      	movs	r0, #10
 80007ba:	f000 fccd 	bl	8001158 <HAL_Delay>


				/*if column 3 is still high -> column 3 + row 3 = key 9*/
				if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 80007be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007c2:	691b      	ldr	r3, [r3, #16]
 80007c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <keypad_handler+0x236>
					key_pressed = 0x09;
 80007cc:	2309      	movs	r3, #9
 80007ce:	73fb      	strb	r3, [r7, #15]
					break;
 80007d0:	e071      	b.n	80008b6 <keypad_handler+0x31a>

				}

				ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <keypad_handler+0x2e0>)
 80007d4:	2220      	movs	r2, #32
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <keypad_handler+0x2e0>)
 80007da:	2210      	movs	r2, #16
 80007dc:	619a      	str	r2, [r3, #24]

				HAL_Delay(10); // wait for voltage to establish
 80007de:	200a      	movs	r0, #10
 80007e0:	f000 fcba 	bl	8001158 <HAL_Delay>


				/*if column 3 is still high -> column 3 + row 4 = key #*/
				if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 80007e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d05e      	beq.n	80008b0 <keypad_handler+0x314>
					key_pressed = 0x23;
 80007f2:	2323      	movs	r3, #35	; 0x23
 80007f4:	73fb      	strb	r3, [r7, #15]
					// the value of key_pressed is a random value as the "#"
					// is not a hexadecimal value.
					break;
 80007f6:	e05e      	b.n	80008b6 <keypad_handler+0x31a>
	case COLUMN_4_Pin:

		/*= if the event corresponds to column 4, the following logic is used =*/

		/*Activate the first row and deactivate the others*/
				ROW_1_GPIO_Port->BSRR = ROW_1_Pin;
 80007f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000800:	619a      	str	r2, [r3, #24]
				ROW_2_GPIO_Port->BRR = ROW_2_Pin;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <keypad_handler+0x2e0>)
 8000804:	2208      	movs	r2, #8
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_3_GPIO_Port->BRR = ROW_3_Pin;
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <keypad_handler+0x2e0>)
 800080a:	2220      	movs	r2, #32
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_4_GPIO_Port->BRR = ROW_4_Pin;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <keypad_handler+0x2e0>)
 8000810:	2210      	movs	r2, #16
 8000812:	629a      	str	r2, [r3, #40]	; 0x28

				HAL_Delay(10); // wait for voltage to establish
 8000814:	200a      	movs	r0, #10
 8000816:	f000 fc9f 	bl	8001158 <HAL_Delay>

				/* if column 4 is still high -> column 1 + row 1 = key A*/
				if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <keypad_handler+0x2e4>)
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <keypad_handler+0x290>
					key_pressed = 0x0A;
 8000826:	230a      	movs	r3, #10
 8000828:	73fb      	strb	r3, [r7, #15]
					break;
 800082a:	e044      	b.n	80008b6 <keypad_handler+0x31a>

				}

				ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 800082c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <keypad_handler+0x2e0>)
 8000838:	2208      	movs	r2, #8
 800083a:	619a      	str	r2, [r3, #24]

				HAL_Delay(10); // wait for voltage to establish
 800083c:	200a      	movs	r0, #10
 800083e:	f000 fc8b 	bl	8001158 <HAL_Delay>


				/*if column 4 is still high -> column 4 + row 2 = key B*/
				if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <keypad_handler+0x2e4>)
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <keypad_handler+0x2b8>
					key_pressed = 0x0B;
 800084e:	230b      	movs	r3, #11
 8000850:	73fb      	strb	r3, [r7, #15]
					break;
 8000852:	e030      	b.n	80008b6 <keypad_handler+0x31a>
				}

				ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <keypad_handler+0x2e0>)
 8000856:	2208      	movs	r2, #8
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <keypad_handler+0x2e0>)
 800085c:	2220      	movs	r2, #32
 800085e:	619a      	str	r2, [r3, #24]

				HAL_Delay(10); // wait for voltage to establish
 8000860:	200a      	movs	r0, #10
 8000862:	f000 fc79 	bl	8001158 <HAL_Delay>


				/*if column 4 is still high -> column 4 + row 3 = key C*/
				if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <keypad_handler+0x2e4>)
 8000868:	691b      	ldr	r3, [r3, #16]
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	2b00      	cmp	r3, #0
 8000870:	d008      	beq.n	8000884 <keypad_handler+0x2e8>
					key_pressed = 0x0C;
 8000872:	230c      	movs	r3, #12
 8000874:	73fb      	strb	r3, [r7, #15]
					break;
 8000876:	e01e      	b.n	80008b6 <keypad_handler+0x31a>
 8000878:	20000088 	.word	0x20000088
 800087c:	48000400 	.word	0x48000400
 8000880:	48000800 	.word	0x48000800

				}

				ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <keypad_handler+0x328>)
 8000886:	2220      	movs	r2, #32
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
				ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <keypad_handler+0x328>)
 800088c:	2210      	movs	r2, #16
 800088e:	619a      	str	r2, [r3, #24]

				HAL_Delay(10); // wait for voltage to establish
 8000890:	200a      	movs	r0, #10
 8000892:	f000 fc61 	bl	8001158 <HAL_Delay>


				/* if column 4 is still high -> column 4 + row 4 = key D*/
				if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <keypad_handler+0x32c>)
 8000898:	691b      	ldr	r3, [r3, #16]
 800089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d008      	beq.n	80008b4 <keypad_handler+0x318>
					key_pressed = 0x0D;
 80008a2:	230d      	movs	r3, #13
 80008a4:	73fb      	strb	r3, [r7, #15]
					break;
 80008a6:	e006      	b.n	80008b6 <keypad_handler+0x31a>
	  break;
 80008a8:	bf00      	nop
 80008aa:	e004      	b.n	80008b6 <keypad_handler+0x31a>
		break;
 80008ac:	bf00      	nop
 80008ae:	e002      	b.n	80008b6 <keypad_handler+0x31a>
			  break;
 80008b0:	bf00      	nop
 80008b2:	e000      	b.n	80008b6 <keypad_handler+0x31a>
				}
			  break;
 80008b4:	bf00      	nop
	}

	keypad_init(); // set the columns high again
 80008b6:	f7ff fe59 	bl	800056c <keypad_init>
	return key_pressed; // invalid: 0xFF, valid:[0x00-0x0F]
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	48000400 	.word	0x48000400
 80008c8:	48000800 	.word	0x48000800

080008cc <_write>:
 * @param ptr Pointer to the character buffer to be transmitted.
 * @param len Number of bytes to transmit.
 * @return The number of bytes transmitted.
 */
int _write(int file, char *ptr, int len)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <_write+0x28>)
 80008e4:	f002 ffe0 	bl	80038a8 <HAL_UART_Transmit>
	return len;
 80008e8:	687b      	ldr	r3, [r7, #4]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000e0 	.word	0x200000e0

080008f8 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief Callback function for GPIO EXTI (External Interrupt) events.
 * @param GPIO_Pin The GPIO_Pin that triggered the interrupt.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	80fb      	strh	r3, [r7, #6]
	key_event = GPIO_Pin;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	8013      	strh	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	20000000 	.word	0x20000000

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 fb9f 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f823 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f000 f8e3 	bl	8000af0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800092a:	f000 f8b1 	bl	8000a90 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800092e:	f000 f86f 	bl	8000a10 <MX_I2C1_Init>

/* Initialize configured driver SSD1306*/
/*
 * @brief Initialises the SSD1306 controller.
 **/
 ssd1306_Init();
 8000932:	f004 f89d 	bl	8004a70 <ssd1306_Init>
  /* USER CODE END 2 */

/* Initialize configured keyboard hexadecimal*/
  keypad_init();
 8000936:	f7ff fe19 	bl	800056c <keypad_init>
 /* Infinite loop */
 /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (key_event != 0xFF)
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <main+0x4c>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	2bff      	cmp	r3, #255	; 0xff
 8000940:	d0fb      	beq.n	800093a <main+0x22>
	  { // check if there is a event from the EXTi callback
		  uint16_t key_pressed = keypad_handler(key_event); // call the keypad handler
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <main+0x4c>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe28 	bl	800059c <keypad_handler>
 800094c:	4603      	mov	r3, r0
 800094e:	80fb      	strh	r3, [r7, #6]
		  printf("\r\nKey pressed: %x\r\n", key_pressed); // print the key pressed
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	4619      	mov	r1, r3
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <main+0x50>)
 8000956:	f004 fa23 	bl	8004da0 <iprintf>
		  key_event = 0xFF; // clean the event
 800095a:	4b02      	ldr	r3, [pc, #8]	; (8000964 <main+0x4c>)
 800095c:	22ff      	movs	r2, #255	; 0xff
 800095e:	801a      	strh	r2, [r3, #0]
	  if (key_event != 0xFF)
 8000960:	e7eb      	b.n	800093a <main+0x22>
 8000962:	bf00      	nop
 8000964:	20000000 	.word	0x20000000
 8000968:	08005aa0 	.word	0x08005aa0

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b096      	sub	sp, #88	; 0x58
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2244      	movs	r2, #68	; 0x44
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f004 fa65 	bl	8004e4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800098e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000992:	f001 fc29 	bl	80021e8 <HAL_PWREx_ControlVoltageScaling>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800099c:	f000 f960 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009aa:	2310      	movs	r3, #16
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ae:	2302      	movs	r3, #2
 80009b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b2:	2302      	movs	r3, #2
 80009b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009ba:	230a      	movs	r3, #10
 80009bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009be:	2307      	movs	r3, #7
 80009c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fc60 	bl	8002294 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009da:	f000 f941 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2303      	movs	r3, #3
 80009e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	2104      	movs	r1, #4
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 f828 	bl	8002a4c <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a02:	f000 f92d 	bl	8000c60 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3758      	adds	r7, #88	; 0x58
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a16:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <MX_I2C1_Init+0x78>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <MX_I2C1_Init+0x7c>)
 8000a1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4a:	480e      	ldr	r0, [pc, #56]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a4c:	f000 ff12 	bl	8001874 <HAL_I2C_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a56:	f000 f903 	bl	8000c60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a5e:	f001 fb1d 	bl	800209c <HAL_I2CEx_ConfigAnalogFilter>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a68:	f000 f8fa 	bl	8000c60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a70:	f001 fb5f 	bl	8002132 <HAL_I2CEx_ConfigDigitalFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 f8f1 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	10909cec 	.word	0x10909cec

08000a90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000a96:	4a15      	ldr	r2, [pc, #84]	; (8000aec <MX_USART2_UART_Init+0x5c>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ad4:	f002 fe9a 	bl	800380c <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ade:	f000 f8bf 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000e0 	.word	0x200000e0
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a52      	ldr	r2, [pc, #328]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b50      	ldr	r3, [pc, #320]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	4b4d      	ldr	r3, [pc, #308]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b4a      	ldr	r3, [pc, #296]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a46      	ldr	r2, [pc, #280]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b44      	ldr	r3, [pc, #272]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <MX_GPIO_Init+0x164>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROW_1_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f000 fe50 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2138      	movs	r1, #56	; 0x38
 8000b78:	4837      	ldr	r0, [pc, #220]	; (8000c58 <MX_GPIO_Init+0x168>)
 8000b7a:	f000 fe4b 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4831      	ldr	r0, [pc, #196]	; (8000c5c <MX_GPIO_Init+0x16c>)
 8000b96:	f000 fc93 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ROW_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ROW_1_Pin;
 8000b9a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f000 fc83 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_1_Pin */
  GPIO_InitStruct.Pin = COLUMN_1_Pin;
 8000bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4821      	ldr	r0, [pc, #132]	; (8000c58 <MX_GPIO_Init+0x168>)
 8000bd2:	f000 fc75 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_4_Pin */
  GPIO_InitStruct.Pin = COLUMN_4_Pin;
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_4_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	481c      	ldr	r0, [pc, #112]	; (8000c5c <MX_GPIO_Init+0x16c>)
 8000bec:	f000 fc68 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN_2_Pin COLUMN_3_Pin */
  GPIO_InitStruct.Pin = COLUMN_2_Pin|COLUMN_3_Pin;
 8000bf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f000 fc59 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 8000c0e:	2338      	movs	r3, #56	; 0x38
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <MX_GPIO_Init+0x168>)
 8000c26:	f000 fc4b 	bl	80014c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2017      	movs	r0, #23
 8000c30:	f000 fb91 	bl	8001356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c34:	2017      	movs	r0, #23
 8000c36:	f000 fbaa 	bl	800138e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2028      	movs	r0, #40	; 0x28
 8000c40:	f000 fb89 	bl	8001356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c44:	2028      	movs	r0, #40	; 0x28
 8000c46:	f000 fba2 	bl	800138e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000400 	.word	0x48000400
 8000c5c:	48000800 	.word	0x48000800

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6593      	str	r3, [r2, #88]	; 0x58
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0ac      	sub	sp, #176	; 0xb0
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2288      	movs	r2, #136	; 0x88
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f004 f8b8 	bl	8004e4a <memset>
  if(hi2c->Instance==I2C1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a21      	ldr	r2, [pc, #132]	; (8000d64 <HAL_I2C_MspInit+0xb0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d13b      	bne.n	8000d5c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ce4:	2340      	movs	r3, #64	; 0x40
 8000ce6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 f8cf 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cfc:	f7ff ffb0 	bl	8000c60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_I2C_MspInit+0xb4>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <HAL_I2C_MspInit+0xb4>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_I2C_MspInit+0xb4>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d20:	2312      	movs	r3, #18
 8000d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d32:	2304      	movs	r3, #4
 8000d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480b      	ldr	r0, [pc, #44]	; (8000d6c <HAL_I2C_MspInit+0xb8>)
 8000d40:	f000 fbbe 	bl	80014c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_I2C_MspInit+0xb4>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_I2C_MspInit+0xb4>)
 8000d4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_I2C_MspInit+0xb4>)
 8000d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	37b0      	adds	r7, #176	; 0xb0
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40005400 	.word	0x40005400
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48000400 	.word	0x48000400

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0ac      	sub	sp, #176	; 0xb0
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2288      	movs	r2, #136	; 0x88
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 f85a 	bl	8004e4a <memset>
  if(huart->Instance==USART2)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <HAL_UART_MspInit+0xc0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d143      	bne.n	8000e28 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 f871 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000db8:	f7ff ff52 	bl	8000c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	4a16      	ldr	r2, [pc, #88]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dec:	230c      	movs	r3, #12
 8000dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e04:	2307      	movs	r3, #7
 8000e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f000 fb54 	bl	80014c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2026      	movs	r0, #38	; 0x26
 8000e1e:	f000 fa9a 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e22:	2026      	movs	r0, #38	; 0x26
 8000e24:	f000 fab3 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	37b0      	adds	r7, #176	; 0xb0
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40004400 	.word	0x40004400
 8000e34:	40021000 	.word	0x40021000

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e84:	f000 f948 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_4_Pin);
 8000e90:	2080      	movs	r0, #128	; 0x80
 8000e92:	f000 fcd7 	bl	8001844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_2_Pin);
 8000e96:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e9a:	f000 fcd3 	bl	8001844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_3_Pin);
 8000e9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ea2:	f000 fccf 	bl	8001844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <USART2_IRQHandler+0x10>)
 8000eb2:	f002 fd83 	bl	80039bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200000e0 	.word	0x200000e0

08000ec0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_1_Pin);
 8000ec4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ec8:	f000 fcbc 	bl	8001844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ecc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ed0:	f000 fcb8 	bl	8001844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00a      	b.n	8000f00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eea:	f3af 8000 	nop.w
 8000eee:	4601      	mov	r1, r0
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	60ba      	str	r2, [r7, #8]
 8000ef6:	b2ca      	uxtb	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf0      	blt.n	8000eea <_read+0x12>
  }

  return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_isatty>:

int _isatty(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f003 ff9c 	bl	8004ee8 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20018000 	.word	0x20018000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	20000168 	.word	0x20000168
 8000fe4:	200006c8 	.word	0x200006c8

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001010:	f7ff ffea 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <LoopForever+0x6>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	; (800104c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <LoopForever+0xe>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LoopForever+0x12>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <LoopForever+0x16>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103a:	f003 ff5b 	bl	8004ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103e:	f7ff fc6b 	bl	8000918 <main>

08001042 <LoopForever>:

LoopForever:
    b LoopForever
 8001042:	e7fe      	b.n	8001042 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001044:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001050:	08005b40 	.word	0x08005b40
  ldr r2, =_sbss
 8001054:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001058:	200006c4 	.word	0x200006c4

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>
	...

08001060 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_Init+0x3c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_Init+0x3c>)
 8001070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001074:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001076:	2003      	movs	r0, #3
 8001078:	f000 f962 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107c:	2000      	movs	r0, #0
 800107e:	f000 f80f 	bl	80010a0 <HAL_InitTick>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	e001      	b.n	8001092 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800108e:	f7ff fded 	bl	8000c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001092:	79fb      	ldrb	r3, [r7, #7]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40022000 	.word	0x40022000

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_InitTick+0x6c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d023      	beq.n	80010fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_InitTick+0x70>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_InitTick+0x6c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f96d 	bl	80013aa <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10f      	bne.n	80010f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d809      	bhi.n	80010f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f937 	bl	8001356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_InitTick+0x74>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e007      	b.n	8001100 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	e004      	b.n	8001100 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e001      	b.n	8001100 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000000c 	.word	0x2000000c
 8001110:	20000004 	.word	0x20000004
 8001114:	20000008 	.word	0x20000008

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000000c 	.word	0x2000000c
 800113c:	2000016c 	.word	0x2000016c

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	2000016c 	.word	0x2000016c

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000000c 	.word	0x2000000c

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	; (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff29 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff3e 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff8e 	bl	8001294 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff31 	bl	8001204 <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa2 	bl	80012fc <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d008      	beq.n	80013ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2204      	movs	r2, #4
 80013de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e022      	b.n	8001432 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 020e 	bic.w	r2, r2, #14
 80013fa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f003 021c 	and.w	r2, r3, #28
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f202 	lsl.w	r2, r1, r2
 800141e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d005      	beq.n	8001462 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2204      	movs	r2, #4
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e029      	b.n	80014b6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 020e 	bic.w	r2, r2, #14
 8001470:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0201 	bic.w	r2, r2, #1
 8001480:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f003 021c 	and.w	r2, r3, #28
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	2101      	movs	r1, #1
 8001490:	fa01 f202 	lsl.w	r2, r1, r2
 8001494:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	4798      	blx	r3
    }
  }
  return status;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	e17f      	b.n	80017d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2101      	movs	r1, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8171 	beq.w	80017ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d005      	beq.n	8001500 <HAL_GPIO_Init+0x40>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d130      	bne.n	8001562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001536:	2201      	movs	r2, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f003 0201 	and.w	r2, r3, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b03      	cmp	r3, #3
 800156c:	d118      	bne.n	80015a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001574:	2201      	movs	r2, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	f003 0201 	and.w	r2, r3, #1
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d017      	beq.n	80015dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d123      	bne.n	8001630 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	08da      	lsrs	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3208      	adds	r2, #8
 80015f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3208      	adds	r2, #8
 800162a:	6939      	ldr	r1, [r7, #16]
 800162c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0203 	and.w	r2, r3, #3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80ac 	beq.w	80017ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <HAL_GPIO_Init+0x330>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001676:	4a5e      	ldr	r2, [pc, #376]	; (80017f0 <HAL_GPIO_Init+0x330>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6613      	str	r3, [r2, #96]	; 0x60
 800167e:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <HAL_GPIO_Init+0x330>)
 8001680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800168a:	4a5a      	ldr	r2, [pc, #360]	; (80017f4 <HAL_GPIO_Init+0x334>)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016b4:	d025      	beq.n	8001702 <HAL_GPIO_Init+0x242>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4f      	ldr	r2, [pc, #316]	; (80017f8 <HAL_GPIO_Init+0x338>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01f      	beq.n	80016fe <HAL_GPIO_Init+0x23e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4e      	ldr	r2, [pc, #312]	; (80017fc <HAL_GPIO_Init+0x33c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x23a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4d      	ldr	r2, [pc, #308]	; (8001800 <HAL_GPIO_Init+0x340>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x236>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <HAL_GPIO_Init+0x344>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x232>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4b      	ldr	r2, [pc, #300]	; (8001808 <HAL_GPIO_Init+0x348>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x22e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4a      	ldr	r2, [pc, #296]	; (800180c <HAL_GPIO_Init+0x34c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x22a>
 80016e6:	2306      	movs	r3, #6
 80016e8:	e00c      	b.n	8001704 <HAL_GPIO_Init+0x244>
 80016ea:	2307      	movs	r3, #7
 80016ec:	e00a      	b.n	8001704 <HAL_GPIO_Init+0x244>
 80016ee:	2305      	movs	r3, #5
 80016f0:	e008      	b.n	8001704 <HAL_GPIO_Init+0x244>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x244>
 80016f6:	2303      	movs	r3, #3
 80016f8:	e004      	b.n	8001704 <HAL_GPIO_Init+0x244>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x244>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_GPIO_Init+0x244>
 8001702:	2300      	movs	r3, #0
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	f002 0203 	and.w	r2, r2, #3
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	4093      	lsls	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001714:	4937      	ldr	r1, [pc, #220]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001722:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <HAL_GPIO_Init+0x350>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001746:	4a32      	ldr	r2, [pc, #200]	; (8001810 <HAL_GPIO_Init+0x350>)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_GPIO_Init+0x350>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001770:	4a27      	ldr	r2, [pc, #156]	; (8001810 <HAL_GPIO_Init+0x350>)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_GPIO_Init+0x350>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800179a:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <HAL_GPIO_Init+0x350>)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_GPIO_Init+0x350>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <HAL_GPIO_Init+0x350>)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3301      	adds	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f47f ae78 	bne.w	80014d0 <HAL_GPIO_Init+0x10>
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000
 80017f8:	48000400 	.word	0x48000400
 80017fc:	48000800 	.word	0x48000800
 8001800:	48000c00 	.word	0x48000c00
 8001804:	48001000 	.word	0x48001000
 8001808:	48001400 	.word	0x48001400
 800180c:	48001800 	.word	0x48001800
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001830:	e002      	b.n	8001838 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d006      	beq.n	8001868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f848 	bl	80008f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40010400 	.word	0x40010400

08001874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e08d      	b.n	80019a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fa0a 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2224      	movs	r2, #36	; 0x24
 80018a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	e006      	b.n	80018fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d108      	bne.n	8001916 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	e007      	b.n	8001926 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001924:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001938:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001948:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69d9      	ldr	r1, [r3, #28]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1a      	ldr	r2, [r3, #32]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2220      	movs	r2, #32
 800198e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4603      	mov	r3, r0
 80019bc:	817b      	strh	r3, [r7, #10]
 80019be:	460b      	mov	r3, r1
 80019c0:	813b      	strh	r3, [r7, #8]
 80019c2:	4613      	mov	r3, r2
 80019c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	f040 80f9 	bne.w	8001bc6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_I2C_Mem_Write+0x34>
 80019da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0ed      	b.n	8001bc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_I2C_Mem_Write+0x4e>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e0e6      	b.n	8001bc8 <HAL_I2C_Mem_Write+0x21c>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a02:	f7ff fb9d 	bl	8001140 <HAL_GetTick>
 8001a06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2319      	movs	r3, #25
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f955 	bl	8001cc4 <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0d1      	b.n	8001bc8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2221      	movs	r2, #33	; 0x21
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2240      	movs	r2, #64	; 0x40
 8001a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a3a      	ldr	r2, [r7, #32]
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a4c:	88f8      	ldrh	r0, [r7, #6]
 8001a4e:	893a      	ldrh	r2, [r7, #8]
 8001a50:	8979      	ldrh	r1, [r7, #10]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f8b9 	bl	8001bd4 <I2C_RequestMemoryWrite>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0a9      	b.n	8001bc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2bff      	cmp	r3, #255	; 0xff
 8001a7c:	d90e      	bls.n	8001a9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	22ff      	movs	r2, #255	; 0xff
 8001a82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	8979      	ldrh	r1, [r7, #10]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 facf 	bl	8002038 <I2C_TransferConfig>
 8001a9a:	e00f      	b.n	8001abc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	8979      	ldrh	r1, [r7, #10]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 fabe 	bl	8002038 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f94e 	bl	8001d62 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e07b      	b.n	8001bc8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d034      	beq.n	8001b74 <HAL_I2C_Mem_Write+0x1c8>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d130      	bne.n	8001b74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f8d1 	bl	8001cc4 <I2C_WaitOnFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e04d      	b.n	8001bc8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2bff      	cmp	r3, #255	; 0xff
 8001b34:	d90e      	bls.n	8001b54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	22ff      	movs	r2, #255	; 0xff
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	8979      	ldrh	r1, [r7, #10]
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fa73 	bl	8002038 <I2C_TransferConfig>
 8001b52:	e00f      	b.n	8001b74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	8979      	ldrh	r1, [r7, #10]
 8001b66:	2300      	movs	r3, #0
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fa62 	bl	8002038 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d19e      	bne.n	8001abc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f934 	bl	8001df0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e01a      	b.n	8001bc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2220      	movs	r2, #32
 8001b98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_I2C_Mem_Write+0x224>)
 8001ba6:	400b      	ands	r3, r1
 8001ba8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001bc6:	2302      	movs	r3, #2
  }
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	fe00e800 	.word	0xfe00e800

08001bd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	817b      	strh	r3, [r7, #10]
 8001be6:	460b      	mov	r3, r1
 8001be8:	813b      	strh	r3, [r7, #8]
 8001bea:	4613      	mov	r3, r2
 8001bec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	8979      	ldrh	r1, [r7, #10]
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <I2C_RequestMemoryWrite+0xa4>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fa1b 	bl	8002038 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	69b9      	ldr	r1, [r7, #24]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f8ab 	bl	8001d62 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e02c      	b.n	8001c70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d105      	bne.n	8001c28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c1c:	893b      	ldrh	r3, [r7, #8]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
 8001c26:	e015      	b.n	8001c54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c28:	893b      	ldrh	r3, [r7, #8]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	69b9      	ldr	r1, [r7, #24]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f891 	bl	8001d62 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e012      	b.n	8001c70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c4a:	893b      	ldrh	r3, [r7, #8]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f830 	bl	8001cc4 <I2C_WaitOnFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	80002000 	.word	0x80002000

08001c7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d103      	bne.n	8001c9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2200      	movs	r2, #0
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d007      	beq.n	8001cb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	619a      	str	r2, [r3, #24]
  }
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cd4:	e031      	b.n	8001d3a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d02d      	beq.n	8001d3a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cde:	f7ff fa2f 	bl	8001140 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d302      	bcc.n	8001cf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d122      	bne.n	8001d3a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d113      	bne.n	8001d3a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f043 0220 	orr.w	r2, r3, #32
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4013      	ands	r3, r2
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	bf0c      	ite	eq
 8001d4a:	2301      	moveq	r3, #1
 8001d4c:	2300      	movne	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d0be      	beq.n	8001cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d6e:	e033      	b.n	8001dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f87f 	bl	8001e78 <I2C_IsErrorOccurred>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e031      	b.n	8001de8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8a:	d025      	beq.n	8001dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8c:	f7ff f9d8 	bl	8001140 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d302      	bcc.n	8001da2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d11a      	bne.n	8001dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d013      	beq.n	8001dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	f043 0220 	orr.w	r2, r3, #32
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e007      	b.n	8001de8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d1c4      	bne.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dfc:	e02f      	b.n	8001e5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f838 	bl	8001e78 <I2C_IsErrorOccurred>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e02d      	b.n	8001e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e12:	f7ff f995 	bl	8001140 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d302      	bcc.n	8001e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11a      	bne.n	8001e5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	d013      	beq.n	8001e5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f043 0220 	orr.w	r2, r3, #32
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e007      	b.n	8001e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d1c8      	bne.n	8001dfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d068      	beq.n	8001f76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001eac:	e049      	b.n	8001f42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d045      	beq.n	8001f42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001eb6:	f7ff f943 	bl	8001140 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d302      	bcc.n	8001ecc <I2C_IsErrorOccurred+0x54>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d13a      	bne.n	8001f42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ede:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eee:	d121      	bne.n	8001f34 <I2C_IsErrorOccurred+0xbc>
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ef6:	d01d      	beq.n	8001f34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ef8:	7cfb      	ldrb	r3, [r7, #19]
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	d01a      	beq.n	8001f34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f0e:	f7ff f917 	bl	8001140 <HAL_GetTick>
 8001f12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f14:	e00e      	b.n	8001f34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f16:	f7ff f913 	bl	8001140 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b19      	cmp	r3, #25
 8001f22:	d907      	bls.n	8001f34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001f32:	e006      	b.n	8001f42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d1e9      	bne.n	8001f16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d003      	beq.n	8001f58 <I2C_IsErrorOccurred+0xe0>
 8001f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0aa      	beq.n	8001eae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d103      	bne.n	8001f68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2220      	movs	r2, #32
 8001f66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01c      	beq.n	8002026 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7ff fe45 	bl	8001c7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <I2C_IsErrorOccurred+0x1bc>)
 8001ffe:	400b      	ands	r3, r1
 8002000:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	431a      	orrs	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800202a:	4618      	mov	r0, r3
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	fe00e800 	.word	0xfe00e800

08002038 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	817b      	strh	r3, [r7, #10]
 8002046:	4613      	mov	r3, r2
 8002048:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800204a:	897b      	ldrh	r3, [r7, #10]
 800204c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002050:	7a7b      	ldrb	r3, [r7, #9]
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002058:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	4313      	orrs	r3, r2
 8002062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002066:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	0d5b      	lsrs	r3, r3, #21
 8002072:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <I2C_TransferConfig+0x60>)
 8002078:	430b      	orrs	r3, r1
 800207a:	43db      	mvns	r3, r3
 800207c:	ea02 0103 	and.w	r1, r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800208a:	bf00      	nop
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	03ff63ff 	.word	0x03ff63ff

0800209c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d138      	bne.n	8002124 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020bc:	2302      	movs	r3, #2
 80020be:	e032      	b.n	8002126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2224      	movs	r2, #36	; 0x24
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b20      	cmp	r3, #32
 8002146:	d139      	bne.n	80021bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002152:	2302      	movs	r3, #2
 8002154:	e033      	b.n	80021be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2224      	movs	r2, #36	; 0x24
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002184:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021bc:	2302      	movs	r3, #2
  }
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40007000 	.word	0x40007000

080021e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f6:	d130      	bne.n	800225a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002204:	d038      	beq.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800220e:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2232      	movs	r2, #50	; 0x32
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9b      	lsrs	r3, r3, #18
 8002228:	3301      	adds	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222c:	e002      	b.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3b01      	subs	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002240:	d102      	bne.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f2      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002254:	d110      	bne.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e00f      	b.n	800227a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002266:	d007      	beq.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002270:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002276:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40007000 	.word	0x40007000
 800228c:	20000004 	.word	0x20000004
 8002290:	431bde83 	.word	0x431bde83

08002294 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e3ca      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a6:	4b97      	ldr	r3, [pc, #604]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b0:	4b94      	ldr	r3, [pc, #592]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80e4 	beq.w	8002490 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d007      	beq.n	80022de <HAL_RCC_OscConfig+0x4a>
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	f040 808b 	bne.w	80023ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	f040 8087 	bne.w	80023ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022de:	4b89      	ldr	r3, [pc, #548]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_RCC_OscConfig+0x62>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e3a2      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	4b82      	ldr	r3, [pc, #520]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d004      	beq.n	8002310 <HAL_RCC_OscConfig+0x7c>
 8002306:	4b7f      	ldr	r3, [pc, #508]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230e:	e005      	b.n	800231c <HAL_RCC_OscConfig+0x88>
 8002310:	4b7c      	ldr	r3, [pc, #496]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231c:	4293      	cmp	r3, r2
 800231e:	d223      	bcs.n	8002368 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fd55 	bl	8002dd4 <RCC_SetFlashLatencyFromMSIRange>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e383      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002334:	4b73      	ldr	r3, [pc, #460]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a72      	ldr	r2, [pc, #456]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800233a:	f043 0308 	orr.w	r3, r3, #8
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b70      	ldr	r3, [pc, #448]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	496d      	ldr	r1, [pc, #436]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002352:	4b6c      	ldr	r3, [pc, #432]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	4968      	ldr	r1, [pc, #416]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
 8002366:	e025      	b.n	80023b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002368:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a65      	ldr	r2, [pc, #404]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800236e:	f043 0308 	orr.w	r3, r3, #8
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b63      	ldr	r3, [pc, #396]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4960      	ldr	r1, [pc, #384]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002386:	4b5f      	ldr	r3, [pc, #380]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	495b      	ldr	r1, [pc, #364]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fd15 	bl	8002dd4 <RCC_SetFlashLatencyFromMSIRange>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e343      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023b4:	f000 fc4a 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b52      	ldr	r3, [pc, #328]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	4950      	ldr	r1, [pc, #320]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
 80023d0:	4a4e      	ldr	r2, [pc, #312]	; (800250c <HAL_RCC_OscConfig+0x278>)
 80023d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023d4:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <HAL_RCC_OscConfig+0x27c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fe61 	bl	80010a0 <HAL_InitTick>
 80023de:	4603      	mov	r3, r0
 80023e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d052      	beq.n	800248e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	e327      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d032      	beq.n	800245a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a42      	ldr	r2, [pc, #264]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002400:	f7fe fe9e 	bl	8001140 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002408:	f7fe fe9a 	bl	8001140 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e310      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800241a:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002426:	4b37      	ldr	r3, [pc, #220]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a36      	ldr	r2, [pc, #216]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b34      	ldr	r3, [pc, #208]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4931      	ldr	r1, [pc, #196]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	492c      	ldr	r1, [pc, #176]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
 8002458:	e01a      	b.n	8002490 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800245a:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a29      	ldr	r2, [pc, #164]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002466:	f7fe fe6b 	bl	8001140 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800246e:	f7fe fe67 	bl	8001140 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e2dd      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x1da>
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800248e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d074      	beq.n	8002586 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d005      	beq.n	80024ae <HAL_RCC_OscConfig+0x21a>
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b0c      	cmp	r3, #12
 80024a6:	d10e      	bne.n	80024c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d10b      	bne.n	80024c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d064      	beq.n	8002584 <HAL_RCC_OscConfig+0x2f0>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d160      	bne.n	8002584 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e2ba      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x24a>
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	e026      	b.n	800252c <HAL_RCC_OscConfig+0x298>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e6:	d115      	bne.n	8002514 <HAL_RCC_OscConfig+0x280>
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a05      	ldr	r2, [pc, #20]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a02      	ldr	r2, [pc, #8]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e014      	b.n	800252c <HAL_RCC_OscConfig+0x298>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	08005ab4 	.word	0x08005ab4
 800250c:	20000004 	.word	0x20000004
 8002510:	20000008 	.word	0x20000008
 8002514:	4ba0      	ldr	r3, [pc, #640]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a9f      	ldr	r2, [pc, #636]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b9d      	ldr	r3, [pc, #628]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a9c      	ldr	r2, [pc, #624]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fe04 	bl	8001140 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fe00 	bl	8001140 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e276      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254e:	4b92      	ldr	r3, [pc, #584]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x2a8>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fdf0 	bl	8001140 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe fdec 	bl	8001140 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e262      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002576:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x2d0>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d060      	beq.n	8002654 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_OscConfig+0x310>
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d119      	bne.n	80025d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d116      	bne.n	80025d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a4:	4b7c      	ldr	r3, [pc, #496]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_OscConfig+0x328>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e23f      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b76      	ldr	r3, [pc, #472]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	4973      	ldr	r1, [pc, #460]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d0:	e040      	b.n	8002654 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d023      	beq.n	8002622 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025da:	4b6f      	ldr	r3, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6e      	ldr	r2, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7fe fdab 	bl	8001140 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ee:	f7fe fda7 	bl	8001140 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e21d      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002600:	4b65      	ldr	r3, [pc, #404]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b62      	ldr	r3, [pc, #392]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	495f      	ldr	r1, [pc, #380]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
 8002620:	e018      	b.n	8002654 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002622:	4b5d      	ldr	r3, [pc, #372]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5c      	ldr	r2, [pc, #368]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800262c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fd87 	bl	8001140 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002636:	f7fe fd83 	bl	8001140 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e1f9      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d03c      	beq.n	80026da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01c      	beq.n	80026a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002668:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	4a4a      	ldr	r2, [pc, #296]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7fe fd62 	bl	8001140 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002680:	f7fe fd5e 	bl	8001140 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e1d4      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002692:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ef      	beq.n	8002680 <HAL_RCC_OscConfig+0x3ec>
 80026a0:	e01b      	b.n	80026da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a8:	4a3b      	ldr	r2, [pc, #236]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7fe fd45 	bl	8001140 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ba:	f7fe fd41 	bl	8001140 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1b7      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026cc:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ef      	bne.n	80026ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80a6 	beq.w	8002834 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026ec:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	4a26      	ldr	r2, [pc, #152]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002702:	6593      	str	r3, [r2, #88]	; 0x58
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002710:	2301      	movs	r3, #1
 8002712:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002714:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_RCC_OscConfig+0x508>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d118      	bne.n	8002752 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_RCC_OscConfig+0x508>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1d      	ldr	r2, [pc, #116]	; (800279c <HAL_RCC_OscConfig+0x508>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272c:	f7fe fd08 	bl	8001140 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002734:	f7fe fd04 	bl	8001140 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e17a      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_RCC_OscConfig+0x508>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d108      	bne.n	800276c <HAL_RCC_OscConfig+0x4d8>
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800276a:	e029      	b.n	80027c0 <HAL_RCC_OscConfig+0x52c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b05      	cmp	r3, #5
 8002772:	d115      	bne.n	80027a0 <HAL_RCC_OscConfig+0x50c>
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	4a03      	ldr	r2, [pc, #12]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x52c>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	40007000 	.word	0x40007000
 80027a0:	4b9c      	ldr	r3, [pc, #624]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	4a9b      	ldr	r2, [pc, #620]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027b0:	4b98      	ldr	r3, [pc, #608]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	4a97      	ldr	r2, [pc, #604]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d016      	beq.n	80027f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe fcba 	bl	8001140 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe fcb6 	bl	8001140 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e12a      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e6:	4b8b      	ldr	r3, [pc, #556]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ed      	beq.n	80027d0 <HAL_RCC_OscConfig+0x53c>
 80027f4:	e015      	b.n	8002822 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7fe fca3 	bl	8001140 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fc9f 	bl	8001140 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e113      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002814:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ed      	bne.n	80027fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002822:	7ffb      	ldrb	r3, [r7, #31]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b7a      	ldr	r3, [pc, #488]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	4a79      	ldr	r2, [pc, #484]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800282e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002832:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80fe 	beq.w	8002a3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	2b02      	cmp	r3, #2
 8002844:	f040 80d0 	bne.w	80029e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002848:	4b72      	ldr	r3, [pc, #456]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0203 	and.w	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	429a      	cmp	r2, r3
 800285a:	d130      	bne.n	80028be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	3b01      	subs	r3, #1
 8002868:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d127      	bne.n	80028be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d11f      	bne.n	80028be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002888:	2a07      	cmp	r2, #7
 800288a:	bf14      	ite	ne
 800288c:	2201      	movne	r2, #1
 800288e:	2200      	moveq	r2, #0
 8002890:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002892:	4293      	cmp	r3, r2
 8002894:	d113      	bne.n	80028be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	3b01      	subs	r3, #1
 80028a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d109      	bne.n	80028be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	3b01      	subs	r3, #1
 80028b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d06e      	beq.n	800299c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d069      	beq.n	8002998 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028c4:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028d0:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0ad      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028e0:	4b4c      	ldr	r3, [pc, #304]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80028e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028ec:	f7fe fc28 	bl	8001140 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe fc24 	bl	8001140 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e09a      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002906:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002912:	4b40      	ldr	r3, [pc, #256]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <HAL_RCC_OscConfig+0x784>)
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002922:	3a01      	subs	r2, #1
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800292c:	0212      	lsls	r2, r2, #8
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002934:	0852      	lsrs	r2, r2, #1
 8002936:	3a01      	subs	r2, #1
 8002938:	0552      	lsls	r2, r2, #21
 800293a:	4311      	orrs	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002940:	0852      	lsrs	r2, r2, #1
 8002942:	3a01      	subs	r2, #1
 8002944:	0652      	lsls	r2, r2, #25
 8002946:	4311      	orrs	r1, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800294c:	0912      	lsrs	r2, r2, #4
 800294e:	0452      	lsls	r2, r2, #17
 8002950:	430a      	orrs	r2, r1
 8002952:	4930      	ldr	r1, [pc, #192]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 8002954:	4313      	orrs	r3, r2
 8002956:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a2d      	ldr	r2, [pc, #180]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800295e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002962:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a2a      	ldr	r2, [pc, #168]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002970:	f7fe fbe6 	bl	8001140 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe fbe2 	bl	8001140 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e058      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002996:	e050      	b.n	8002a3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e04f      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d148      	bne.n	8002a3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029b4:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029c0:	f7fe fbbe 	bl	8001140 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe fbba 	bl	8001140 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e030      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x734>
 80029e6:	e028      	b.n	8002a3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d023      	beq.n	8002a36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe fba1 	bl	8001140 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a00:	e00c      	b.n	8002a1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a02:	f7fe fb9d 	bl	8001140 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d905      	bls.n	8002a1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e013      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
 8002a14:	40021000 	.word	0x40021000
 8002a18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_RCC_OscConfig+0x7b0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ec      	bne.n	8002a02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCC_OscConfig+0x7b0>)
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	4905      	ldr	r1, [pc, #20]	; (8002a44 <HAL_RCC_OscConfig+0x7b0>)
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_OscConfig+0x7b4>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	60cb      	str	r3, [r1, #12]
 8002a34:	e001      	b.n	8002a3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	feeefffc 	.word	0xfeeefffc

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0e7      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b75      	ldr	r3, [pc, #468]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d910      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b72      	ldr	r3, [pc, #456]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0207 	bic.w	r2, r3, #7
 8002a76:	4970      	ldr	r1, [pc, #448]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b6e      	ldr	r3, [pc, #440]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0cf      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d908      	bls.n	8002abe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aac:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4960      	ldr	r1, [pc, #384]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d04c      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad2:	4b5a      	ldr	r3, [pc, #360]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d121      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0a6      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aea:	4b54      	ldr	r3, [pc, #336]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d115      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e09a      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b02:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e08e      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b12:	4b4a      	ldr	r3, [pc, #296]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e086      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4943      	ldr	r1, [pc, #268]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b34:	f7fe fb04 	bl	8001140 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7fe fb00 	bl	8001140 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e06e      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1eb      	bne.n	8002b3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d208      	bcs.n	8002b92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	492b      	ldr	r1, [pc, #172]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b92:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d210      	bcs.n	8002bc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 0207 	bic.w	r2, r3, #7
 8002ba8:	4923      	ldr	r1, [pc, #140]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e036      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4918      	ldr	r1, [pc, #96]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d009      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bec:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4910      	ldr	r1, [pc, #64]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c00:	f000 f824 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	490b      	ldr	r1, [pc, #44]	; (8002c40 <HAL_RCC_ClockConfig+0x1f4>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1f8>)
 8002c1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1fc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe fa3b 	bl	80010a0 <HAL_InitTick>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c2e:	7afb      	ldrb	r3, [r7, #11]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	08005ab4 	.word	0x08005ab4
 8002c44:	20000004 	.word	0x20000004
 8002c48:	20000008 	.word	0x20000008

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	; 0x24
 8002c50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x34>
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d121      	bne.n	8002cbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d11e      	bne.n	8002cbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c80:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c8c:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e005      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ca8:	4a2b      	ldr	r2, [pc, #172]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	e004      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd0:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d134      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d003      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xac>
 8002cf0:	e005      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cf4:	617b      	str	r3, [r7, #20]
      break;
 8002cf6:	e005      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cfa:	617b      	str	r3, [r7, #20]
      break;
 8002cfc:	e002      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	617b      	str	r3, [r7, #20]
      break;
 8002d02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	3301      	adds	r3, #1
 8002d10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	fb03 f202 	mul.w	r2, r3, r2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	0e5b      	lsrs	r3, r3, #25
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	3301      	adds	r3, #1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d44:	69bb      	ldr	r3, [r7, #24]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	; 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08005acc 	.word	0x08005acc
 8002d5c:	00f42400 	.word	0x00f42400
 8002d60:	007a1200 	.word	0x007a1200

08002d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000004 	.word	0x20000004

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d80:	f7ff fff0 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4904      	ldr	r1, [pc, #16]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08005ac4 	.word	0x08005ac4

08002da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dac:	f7ff ffda 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0adb      	lsrs	r3, r3, #11
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4904      	ldr	r1, [pc, #16]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08005ac4 	.word	0x08005ac4

08002dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de0:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dec:	f7ff f9ee 	bl	80021cc <HAL_PWREx_GetVoltageRange>
 8002df0:	6178      	str	r0, [r7, #20]
 8002df2:	e014      	b.n	8002e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	4a24      	ldr	r2, [pc, #144]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002e00:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e0c:	f7ff f9de 	bl	80021cc <HAL_PWREx_GetVoltageRange>
 8002e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e24:	d10b      	bne.n	8002e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d919      	bls.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2ba0      	cmp	r3, #160	; 0xa0
 8002e30:	d902      	bls.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e32:	2302      	movs	r3, #2
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	e013      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e38:	2301      	movs	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e010      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d902      	bls.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e44:	2303      	movs	r3, #3
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e00a      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b80      	cmp	r3, #128	; 0x80
 8002e4e:	d102      	bne.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e50:	2302      	movs	r3, #2
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	e004      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b70      	cmp	r3, #112	; 0x70
 8002e5a:	d101      	bne.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 0207 	bic.w	r2, r3, #7
 8002e68:	4909      	ldr	r1, [pc, #36]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40022000 	.word	0x40022000

08002e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d041      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eb8:	d02a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002eba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ebe:	d824      	bhi.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ec0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eca:	d81e      	bhi.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ed6:	e018      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ed8:	4b86      	ldr	r3, [pc, #536]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4a85      	ldr	r2, [pc, #532]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee4:	e015      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fabb 	bl	8003468 <RCCEx_PLLSAI1_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef6:	e00c      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3320      	adds	r3, #32
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fba6 	bl	8003650 <RCCEx_PLLSAI2_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f08:	e003      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f0e:	e000      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f18:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f26:	4973      	ldr	r1, [pc, #460]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f2e:	e001      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d041      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f48:	d02a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f4e:	d824      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f5a:	d81e      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f64:	d010      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f66:	e018      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f68:	4b62      	ldr	r3, [pc, #392]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a61      	ldr	r2, [pc, #388]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f74:	e015      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fa73 	bl	8003468 <RCCEx_PLLSAI1_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f86:	e00c      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3320      	adds	r3, #32
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fb5e 	bl	8003650 <RCCEx_PLLSAI2_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f98:	e003      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fa8:	4b52      	ldr	r3, [pc, #328]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb6:	494f      	ldr	r1, [pc, #316]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fbe:	e001      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80a0 	beq.w	8003112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00d      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fec:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff8:	4b3e      	ldr	r3, [pc, #248]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003004:	2301      	movs	r3, #1
 8003006:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003008:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a3a      	ldr	r2, [pc, #232]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003014:	f7fe f894 	bl	8001140 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800301a:	e009      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fe f890 	bl	8001140 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d902      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	74fb      	strb	r3, [r7, #19]
        break;
 800302e:	e005      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003030:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ef      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d15c      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003042:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01f      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	429a      	cmp	r2, r3
 800305e:	d019      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe f84f 	bl	8001140 <HAL_GetTick>
 80030a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a4:	e00b      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe f84b 	bl	8001140 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d902      	bls.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	74fb      	strb	r3, [r7, #19]
            break;
 80030bc:	e006      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ec      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e2:	4904      	ldr	r1, [pc, #16]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030ea:	e009      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	74bb      	strb	r3, [r7, #18]
 80030f0:	e006      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003100:	7c7b      	ldrb	r3, [r7, #17]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d105      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003106:	4b9e      	ldr	r3, [pc, #632]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	4a9d      	ldr	r2, [pc, #628]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003110:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800311e:	4b98      	ldr	r3, [pc, #608]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	f023 0203 	bic.w	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	4994      	ldr	r1, [pc, #592]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003140:	4b8f      	ldr	r3, [pc, #572]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f023 020c 	bic.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	498c      	ldr	r1, [pc, #560]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003162:	4b87      	ldr	r3, [pc, #540]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	4983      	ldr	r1, [pc, #524]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003184:	4b7e      	ldr	r3, [pc, #504]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	497b      	ldr	r1, [pc, #492]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031a6:	4b76      	ldr	r3, [pc, #472]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b4:	4972      	ldr	r1, [pc, #456]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031c8:	4b6d      	ldr	r3, [pc, #436]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d6:	496a      	ldr	r1, [pc, #424]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ea:	4b65      	ldr	r3, [pc, #404]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	4961      	ldr	r1, [pc, #388]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800320c:	4b5c      	ldr	r3, [pc, #368]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	4959      	ldr	r1, [pc, #356]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800322e:	4b54      	ldr	r3, [pc, #336]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323c:	4950      	ldr	r1, [pc, #320]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003250:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	4948      	ldr	r1, [pc, #288]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003272:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	493f      	ldr	r1, [pc, #252]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d028      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a2:	4937      	ldr	r1, [pc, #220]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b2:	d106      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b4:	4b32      	ldr	r3, [pc, #200]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a31      	ldr	r2, [pc, #196]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032be:	60d3      	str	r3, [r2, #12]
 80032c0:	e011      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ca:	d10c      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f8c8 	bl	8003468 <RCCEx_PLLSAI1_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032f2:	4b23      	ldr	r3, [pc, #140]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	491f      	ldr	r1, [pc, #124]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003310:	d106      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	4a1a      	ldr	r2, [pc, #104]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800331c:	60d3      	str	r3, [r2, #12]
 800331e:	e011      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003328:	d10c      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f899 	bl	8003468 <RCCEx_PLLSAI1_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d02b      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800336e:	d109      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4a02      	ldr	r2, [pc, #8]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800337a:	60d3      	str	r3, [r2, #12]
 800337c:	e014      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800338c:	d10c      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	2101      	movs	r1, #1
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f867 	bl	8003468 <RCCEx_PLLSAI1_Config>
 800339a:	4603      	mov	r3, r0
 800339c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02f      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c2:	4928      	ldr	r1, [pc, #160]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033d2:	d10d      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	2102      	movs	r1, #2
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f844 	bl	8003468 <RCCEx_PLLSAI1_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d014      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033ea:	7cfb      	ldrb	r3, [r7, #19]
 80033ec:	74bb      	strb	r3, [r7, #18]
 80033ee:	e011      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3320      	adds	r3, #32
 80033fe:	2102      	movs	r1, #2
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f925 	bl	8003650 <RCCEx_PLLSAI2_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342e:	490d      	ldr	r1, [pc, #52]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003452:	4904      	ldr	r1, [pc, #16]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800345a:	7cbb      	ldrb	r3, [r7, #18]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000

08003468 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003476:	4b75      	ldr	r3, [pc, #468]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d018      	beq.n	80034b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003482:	4b72      	ldr	r3, [pc, #456]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0203 	and.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d10d      	bne.n	80034ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
       ||
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800349a:	4b6c      	ldr	r3, [pc, #432]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
       ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d047      	beq.n	800353e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
 80034b2:	e044      	b.n	800353e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d018      	beq.n	80034ee <RCCEx_PLLSAI1_Config+0x86>
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d825      	bhi.n	800350c <RCCEx_PLLSAI1_Config+0xa4>
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <RCCEx_PLLSAI1_Config+0x62>
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d009      	beq.n	80034dc <RCCEx_PLLSAI1_Config+0x74>
 80034c8:	e020      	b.n	800350c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ca:	4b60      	ldr	r3, [pc, #384]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d11d      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034da:	e01a      	b.n	8003512 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034dc:	4b5b      	ldr	r3, [pc, #364]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d116      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ec:	e013      	b.n	8003516 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ee:	4b57      	ldr	r3, [pc, #348]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10f      	bne.n	800351a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034fa:	4b54      	ldr	r3, [pc, #336]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800350a:	e006      	b.n	800351a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      break;
 8003510:	e004      	b.n	800351c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003512:	bf00      	nop
 8003514:	e002      	b.n	800351c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003516:	bf00      	nop
 8003518:	e000      	b.n	800351c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800351a:	bf00      	nop
    }

    if(status == HAL_OK)
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10d      	bne.n	800353e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003522:	4b4a      	ldr	r3, [pc, #296]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6819      	ldr	r1, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	430b      	orrs	r3, r1
 8003538:	4944      	ldr	r1, [pc, #272]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d17d      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003544:	4b41      	ldr	r3, [pc, #260]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a40      	ldr	r2, [pc, #256]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 800354a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800354e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003550:	f7fd fdf6 	bl	8001140 <HAL_GetTick>
 8003554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003556:	e009      	b.n	800356c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003558:	f7fd fdf2 	bl	8001140 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d902      	bls.n	800356c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	73fb      	strb	r3, [r7, #15]
        break;
 800356a:	e005      	b.n	8003578 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800356c:	4b37      	ldr	r3, [pc, #220]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ef      	bne.n	8003558 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d160      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d111      	bne.n	80035a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003584:	4b31      	ldr	r3, [pc, #196]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800358c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6892      	ldr	r2, [r2, #8]
 8003594:	0211      	lsls	r1, r2, #8
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68d2      	ldr	r2, [r2, #12]
 800359a:	0912      	lsrs	r2, r2, #4
 800359c:	0452      	lsls	r2, r2, #17
 800359e:	430a      	orrs	r2, r1
 80035a0:	492a      	ldr	r1, [pc, #168]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	610b      	str	r3, [r1, #16]
 80035a6:	e027      	b.n	80035f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d112      	bne.n	80035d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6892      	ldr	r2, [r2, #8]
 80035be:	0211      	lsls	r1, r2, #8
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6912      	ldr	r2, [r2, #16]
 80035c4:	0852      	lsrs	r2, r2, #1
 80035c6:	3a01      	subs	r2, #1
 80035c8:	0552      	lsls	r2, r2, #21
 80035ca:	430a      	orrs	r2, r1
 80035cc:	491f      	ldr	r1, [pc, #124]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	610b      	str	r3, [r1, #16]
 80035d2:	e011      	b.n	80035f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6892      	ldr	r2, [r2, #8]
 80035e4:	0211      	lsls	r1, r2, #8
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6952      	ldr	r2, [r2, #20]
 80035ea:	0852      	lsrs	r2, r2, #1
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0652      	lsls	r2, r2, #25
 80035f0:	430a      	orrs	r2, r1
 80035f2:	4916      	ldr	r1, [pc, #88]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a13      	ldr	r2, [pc, #76]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003602:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fd fd9c 	bl	8001140 <HAL_GetTick>
 8003608:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800360a:	e009      	b.n	8003620 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800360c:	f7fd fd98 	bl	8001140 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d902      	bls.n	8003620 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	73fb      	strb	r3, [r7, #15]
          break;
 800361e:	e005      	b.n	800362c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ef      	beq.n	800360c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	4904      	ldr	r1, [pc, #16]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000

08003650 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800365e:	4b6a      	ldr	r3, [pc, #424]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d018      	beq.n	800369c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800366a:	4b67      	ldr	r3, [pc, #412]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0203 	and.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d10d      	bne.n	8003696 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
       ||
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003682:	4b61      	ldr	r3, [pc, #388]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
       ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d047      	beq.n	8003726 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e044      	b.n	8003726 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d018      	beq.n	80036d6 <RCCEx_PLLSAI2_Config+0x86>
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d825      	bhi.n	80036f4 <RCCEx_PLLSAI2_Config+0xa4>
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d002      	beq.n	80036b2 <RCCEx_PLLSAI2_Config+0x62>
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d009      	beq.n	80036c4 <RCCEx_PLLSAI2_Config+0x74>
 80036b0:	e020      	b.n	80036f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036b2:	4b55      	ldr	r3, [pc, #340]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d11d      	bne.n	80036fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c2:	e01a      	b.n	80036fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036c4:	4b50      	ldr	r3, [pc, #320]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d4:	e013      	b.n	80036fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036d6:	4b4c      	ldr	r3, [pc, #304]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10f      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036e2:	4b49      	ldr	r3, [pc, #292]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036f2:	e006      	b.n	8003702 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      break;
 80036f8:	e004      	b.n	8003704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036fa:	bf00      	nop
 80036fc:	e002      	b.n	8003704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036fe:	bf00      	nop
 8003700:	e000      	b.n	8003704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003702:	bf00      	nop
    }

    if(status == HAL_OK)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800370a:	4b3f      	ldr	r3, [pc, #252]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	430b      	orrs	r3, r1
 8003720:	4939      	ldr	r1, [pc, #228]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d167      	bne.n	80037fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800372c:	4b36      	ldr	r3, [pc, #216]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a35      	ldr	r2, [pc, #212]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003738:	f7fd fd02 	bl	8001140 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800373e:	e009      	b.n	8003754 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003740:	f7fd fcfe 	bl	8001140 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	73fb      	strb	r3, [r7, #15]
        break;
 8003752:	e005      	b.n	8003760 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003754:	4b2c      	ldr	r3, [pc, #176]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ef      	bne.n	8003740 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d14a      	bne.n	80037fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d111      	bne.n	8003790 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800376c:	4b26      	ldr	r3, [pc, #152]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6892      	ldr	r2, [r2, #8]
 800377c:	0211      	lsls	r1, r2, #8
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68d2      	ldr	r2, [r2, #12]
 8003782:	0912      	lsrs	r2, r2, #4
 8003784:	0452      	lsls	r2, r2, #17
 8003786:	430a      	orrs	r2, r1
 8003788:	491f      	ldr	r1, [pc, #124]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	4313      	orrs	r3, r2
 800378c:	614b      	str	r3, [r1, #20]
 800378e:	e011      	b.n	80037b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003790:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003798:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6892      	ldr	r2, [r2, #8]
 80037a0:	0211      	lsls	r1, r2, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6912      	ldr	r2, [r2, #16]
 80037a6:	0852      	lsrs	r2, r2, #1
 80037a8:	3a01      	subs	r2, #1
 80037aa:	0652      	lsls	r2, r2, #25
 80037ac:	430a      	orrs	r2, r1
 80037ae:	4916      	ldr	r1, [pc, #88]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037b4:	4b14      	ldr	r3, [pc, #80]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a13      	ldr	r2, [pc, #76]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fd fcbe 	bl	8001140 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037c6:	e009      	b.n	80037dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037c8:	f7fd fcba 	bl	8001140 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	73fb      	strb	r3, [r7, #15]
          break;
 80037da:	e005      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ef      	beq.n	80037c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	4904      	ldr	r1, [pc, #16]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000

0800380c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e040      	b.n	80038a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd fa9e 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fe74 	bl	8004540 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fbb9 	bl	8003fd0 <UART_SetConfig>
 800385e:	4603      	mov	r3, r0
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e01b      	b.n	80038a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fef3 	bl	8004684 <UART_CheckIdleState>
 800389e:	4603      	mov	r3, r0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d178      	bne.n	80039b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_UART_Transmit+0x24>
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e071      	b.n	80039b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2221      	movs	r2, #33	; 0x21
 80038dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038de:	f7fd fc2f 	bl	8001140 <HAL_GetTick>
 80038e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fc:	d108      	bne.n	8003910 <HAL_UART_Transmit+0x68>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d104      	bne.n	8003910 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	e003      	b.n	8003918 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003918:	e030      	b.n	800397c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2200      	movs	r2, #0
 8003922:	2180      	movs	r1, #128	; 0x80
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 ff55 	bl	80047d4 <UART_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e03c      	b.n	80039b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394c:	b292      	uxth	r2, r2
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	3302      	adds	r3, #2
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e008      	b.n	800396a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	b292      	uxth	r2, r2
 8003962:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1c8      	bne.n	800391a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	2140      	movs	r1, #64	; 0x40
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 ff1e 	bl	80047d4 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e005      	b.n	80039b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b0ba      	sub	sp, #232	; 0xe8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80039e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80039ea:	4013      	ands	r3, r2
 80039ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80039f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d115      	bne.n	8003a24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00f      	beq.n	8003a24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 82ae 	beq.w	8003f76 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
      }
      return;
 8003a22:	e2a8      	b.n	8003f76 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8117 	beq.w	8003c5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a3e:	4b85      	ldr	r3, [pc, #532]	; (8003c54 <HAL_UART_IRQHandler+0x298>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 810a 	beq.w	8003c5c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d011      	beq.n	8003a78 <HAL_UART_IRQHandler+0xbc>
 8003a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00b      	beq.n	8003a78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2201      	movs	r2, #1
 8003a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d011      	beq.n	8003aa8 <HAL_UART_IRQHandler+0xec>
 8003a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2202      	movs	r2, #2
 8003a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9e:	f043 0204 	orr.w	r2, r3, #4
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d011      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x11c>
 8003ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ace:	f043 0202 	orr.w	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d017      	beq.n	8003b14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d105      	bne.n	8003afc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2208      	movs	r2, #8
 8003b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b0a:	f043 0208 	orr.w	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d012      	beq.n	8003b46 <HAL_UART_IRQHandler+0x18a>
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8214 	beq.w	8003f7a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d005      	beq.n	8003b9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d04f      	beq.n	8003c3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fe7f 	bl	80048a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b40      	cmp	r3, #64	; 0x40
 8003bb0:	d141      	bne.n	8003c36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3308      	adds	r3, #8
 8003bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1d9      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d013      	beq.n	8003c2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0a:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <HAL_UART_IRQHandler+0x29c>)
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd fc13 	bl	800143e <HAL_DMA_Abort_IT>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d017      	beq.n	8003c4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e00f      	b.n	8003c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f9b8 	bl	8003fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e00b      	b.n	8003c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f9b4 	bl	8003fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	e007      	b.n	8003c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f9b0 	bl	8003fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003c4c:	e195      	b.n	8003f7a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4e:	bf00      	nop
    return;
 8003c50:	e193      	b.n	8003f7a <HAL_UART_IRQHandler+0x5be>
 8003c52:	bf00      	nop
 8003c54:	04000120 	.word	0x04000120
 8003c58:	0800496b 	.word	0x0800496b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	f040 814e 	bne.w	8003f02 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8147 	beq.w	8003f02 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8140 	beq.w	8003f02 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2210      	movs	r2, #16
 8003c88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	f040 80b8 	bne.w	8003e0a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ca6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 8167 	beq.w	8003f7e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	f080 815f 	bcs.w	8003f7e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f040 8086 	bne.w	8003de8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1da      	bne.n	8003cdc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3308      	adds	r3, #8
 8003d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e1      	bne.n	8003d26 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3308      	adds	r3, #8
 8003d68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3308      	adds	r3, #8
 8003d82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e3      	bne.n	8003d62 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db8:	f023 0310 	bic.w	r3, r3, #16
 8003dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dca:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dcc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e4      	bne.n	8003da8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd faed 	bl	80013c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8d8 	bl	8003fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e08:	e0b9      	b.n	8003f7e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80ab 	beq.w	8003f82 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a6 	beq.w	8003f82 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e58:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e4      	bne.n	8003e36 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3308      	adds	r3, #8
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e90:	633a      	str	r2, [r7, #48]	; 0x30
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e3      	bne.n	8003e6c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f023 0310 	bic.w	r3, r3, #16
 8003ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	69b9      	ldr	r1, [r7, #24]
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e4      	bne.n	8003eb8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f85c 	bl	8003fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f00:	e03f      	b.n	8003f82 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00e      	beq.n	8003f2c <HAL_UART_IRQHandler+0x570>
 8003f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fd60 	bl	80049ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f2a:	e02d      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01c      	beq.n	8003f86 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
    }
    return;
 8003f54:	e017      	b.n	8003f86 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d012      	beq.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
 8003f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fd11 	bl	8004996 <UART_EndTransmit_IT>
    return;
 8003f74:	e008      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f76:	bf00      	nop
 8003f78:	e006      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003f7a:	bf00      	nop
 8003f7c:	e004      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f7e:	bf00      	nop
 8003f80:	e002      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003f86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f88:	37e8      	adds	r7, #232	; 0xe8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop

08003f90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd4:	b08a      	sub	sp, #40	; 0x28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4ba4      	ldr	r3, [pc, #656]	; (8004290 <UART_SetConfig+0x2c0>)
 8004000:	4013      	ands	r3, r2
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004008:	430b      	orrs	r3, r1
 800400a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a99      	ldr	r2, [pc, #612]	; (8004294 <UART_SetConfig+0x2c4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	4313      	orrs	r3, r2
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	430a      	orrs	r2, r1
 800404e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a90      	ldr	r2, [pc, #576]	; (8004298 <UART_SetConfig+0x2c8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d126      	bne.n	80040a8 <UART_SetConfig+0xd8>
 800405a:	4b90      	ldr	r3, [pc, #576]	; (800429c <UART_SetConfig+0x2cc>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	2b03      	cmp	r3, #3
 8004066:	d81b      	bhi.n	80040a0 <UART_SetConfig+0xd0>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <UART_SetConfig+0xa0>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	08004081 	.word	0x08004081
 8004074:	08004091 	.word	0x08004091
 8004078:	08004089 	.word	0x08004089
 800407c:	08004099 	.word	0x08004099
 8004080:	2301      	movs	r3, #1
 8004082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004086:	e116      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004088:	2302      	movs	r3, #2
 800408a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408e:	e112      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004090:	2304      	movs	r3, #4
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004096:	e10e      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004098:	2308      	movs	r3, #8
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409e:	e10a      	b.n	80042b6 <UART_SetConfig+0x2e6>
 80040a0:	2310      	movs	r3, #16
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a6:	e106      	b.n	80042b6 <UART_SetConfig+0x2e6>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a7c      	ldr	r2, [pc, #496]	; (80042a0 <UART_SetConfig+0x2d0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d138      	bne.n	8004124 <UART_SetConfig+0x154>
 80040b2:	4b7a      	ldr	r3, [pc, #488]	; (800429c <UART_SetConfig+0x2cc>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	d82d      	bhi.n	800411c <UART_SetConfig+0x14c>
 80040c0:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <UART_SetConfig+0xf8>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040fd 	.word	0x080040fd
 80040cc:	0800411d 	.word	0x0800411d
 80040d0:	0800411d 	.word	0x0800411d
 80040d4:	0800411d 	.word	0x0800411d
 80040d8:	0800410d 	.word	0x0800410d
 80040dc:	0800411d 	.word	0x0800411d
 80040e0:	0800411d 	.word	0x0800411d
 80040e4:	0800411d 	.word	0x0800411d
 80040e8:	08004105 	.word	0x08004105
 80040ec:	0800411d 	.word	0x0800411d
 80040f0:	0800411d 	.word	0x0800411d
 80040f4:	0800411d 	.word	0x0800411d
 80040f8:	08004115 	.word	0x08004115
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004102:	e0d8      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004104:	2302      	movs	r3, #2
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410a:	e0d4      	b.n	80042b6 <UART_SetConfig+0x2e6>
 800410c:	2304      	movs	r3, #4
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004112:	e0d0      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004114:	2308      	movs	r3, #8
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411a:	e0cc      	b.n	80042b6 <UART_SetConfig+0x2e6>
 800411c:	2310      	movs	r3, #16
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004122:	e0c8      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a5e      	ldr	r2, [pc, #376]	; (80042a4 <UART_SetConfig+0x2d4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d125      	bne.n	800417a <UART_SetConfig+0x1aa>
 800412e:	4b5b      	ldr	r3, [pc, #364]	; (800429c <UART_SetConfig+0x2cc>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004138:	2b30      	cmp	r3, #48	; 0x30
 800413a:	d016      	beq.n	800416a <UART_SetConfig+0x19a>
 800413c:	2b30      	cmp	r3, #48	; 0x30
 800413e:	d818      	bhi.n	8004172 <UART_SetConfig+0x1a2>
 8004140:	2b20      	cmp	r3, #32
 8004142:	d00a      	beq.n	800415a <UART_SetConfig+0x18a>
 8004144:	2b20      	cmp	r3, #32
 8004146:	d814      	bhi.n	8004172 <UART_SetConfig+0x1a2>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <UART_SetConfig+0x182>
 800414c:	2b10      	cmp	r3, #16
 800414e:	d008      	beq.n	8004162 <UART_SetConfig+0x192>
 8004150:	e00f      	b.n	8004172 <UART_SetConfig+0x1a2>
 8004152:	2300      	movs	r3, #0
 8004154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004158:	e0ad      	b.n	80042b6 <UART_SetConfig+0x2e6>
 800415a:	2302      	movs	r3, #2
 800415c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004160:	e0a9      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004162:	2304      	movs	r3, #4
 8004164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004168:	e0a5      	b.n	80042b6 <UART_SetConfig+0x2e6>
 800416a:	2308      	movs	r3, #8
 800416c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004170:	e0a1      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004172:	2310      	movs	r3, #16
 8004174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004178:	e09d      	b.n	80042b6 <UART_SetConfig+0x2e6>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a4a      	ldr	r2, [pc, #296]	; (80042a8 <UART_SetConfig+0x2d8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d125      	bne.n	80041d0 <UART_SetConfig+0x200>
 8004184:	4b45      	ldr	r3, [pc, #276]	; (800429c <UART_SetConfig+0x2cc>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800418e:	2bc0      	cmp	r3, #192	; 0xc0
 8004190:	d016      	beq.n	80041c0 <UART_SetConfig+0x1f0>
 8004192:	2bc0      	cmp	r3, #192	; 0xc0
 8004194:	d818      	bhi.n	80041c8 <UART_SetConfig+0x1f8>
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d00a      	beq.n	80041b0 <UART_SetConfig+0x1e0>
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	d814      	bhi.n	80041c8 <UART_SetConfig+0x1f8>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <UART_SetConfig+0x1d8>
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d008      	beq.n	80041b8 <UART_SetConfig+0x1e8>
 80041a6:	e00f      	b.n	80041c8 <UART_SetConfig+0x1f8>
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ae:	e082      	b.n	80042b6 <UART_SetConfig+0x2e6>
 80041b0:	2302      	movs	r3, #2
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b6:	e07e      	b.n	80042b6 <UART_SetConfig+0x2e6>
 80041b8:	2304      	movs	r3, #4
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041be:	e07a      	b.n	80042b6 <UART_SetConfig+0x2e6>
 80041c0:	2308      	movs	r3, #8
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c6:	e076      	b.n	80042b6 <UART_SetConfig+0x2e6>
 80041c8:	2310      	movs	r3, #16
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ce:	e072      	b.n	80042b6 <UART_SetConfig+0x2e6>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a35      	ldr	r2, [pc, #212]	; (80042ac <UART_SetConfig+0x2dc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d12a      	bne.n	8004230 <UART_SetConfig+0x260>
 80041da:	4b30      	ldr	r3, [pc, #192]	; (800429c <UART_SetConfig+0x2cc>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e8:	d01a      	beq.n	8004220 <UART_SetConfig+0x250>
 80041ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ee:	d81b      	bhi.n	8004228 <UART_SetConfig+0x258>
 80041f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f4:	d00c      	beq.n	8004210 <UART_SetConfig+0x240>
 80041f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041fa:	d815      	bhi.n	8004228 <UART_SetConfig+0x258>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <UART_SetConfig+0x238>
 8004200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004204:	d008      	beq.n	8004218 <UART_SetConfig+0x248>
 8004206:	e00f      	b.n	8004228 <UART_SetConfig+0x258>
 8004208:	2300      	movs	r3, #0
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420e:	e052      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004210:	2302      	movs	r3, #2
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004216:	e04e      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004218:	2304      	movs	r3, #4
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421e:	e04a      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004220:	2308      	movs	r3, #8
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004226:	e046      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004228:	2310      	movs	r3, #16
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422e:	e042      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a17      	ldr	r2, [pc, #92]	; (8004294 <UART_SetConfig+0x2c4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d13a      	bne.n	80042b0 <UART_SetConfig+0x2e0>
 800423a:	4b18      	ldr	r3, [pc, #96]	; (800429c <UART_SetConfig+0x2cc>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004244:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004248:	d01a      	beq.n	8004280 <UART_SetConfig+0x2b0>
 800424a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800424e:	d81b      	bhi.n	8004288 <UART_SetConfig+0x2b8>
 8004250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004254:	d00c      	beq.n	8004270 <UART_SetConfig+0x2a0>
 8004256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425a:	d815      	bhi.n	8004288 <UART_SetConfig+0x2b8>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <UART_SetConfig+0x298>
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004264:	d008      	beq.n	8004278 <UART_SetConfig+0x2a8>
 8004266:	e00f      	b.n	8004288 <UART_SetConfig+0x2b8>
 8004268:	2300      	movs	r3, #0
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426e:	e022      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004270:	2302      	movs	r3, #2
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004276:	e01e      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004278:	2304      	movs	r3, #4
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427e:	e01a      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004280:	2308      	movs	r3, #8
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e016      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004288:	2310      	movs	r3, #16
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e012      	b.n	80042b6 <UART_SetConfig+0x2e6>
 8004290:	efff69f3 	.word	0xefff69f3
 8004294:	40008000 	.word	0x40008000
 8004298:	40013800 	.word	0x40013800
 800429c:	40021000 	.word	0x40021000
 80042a0:	40004400 	.word	0x40004400
 80042a4:	40004800 	.word	0x40004800
 80042a8:	40004c00 	.word	0x40004c00
 80042ac:	40005000 	.word	0x40005000
 80042b0:	2310      	movs	r3, #16
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a9f      	ldr	r2, [pc, #636]	; (8004538 <UART_SetConfig+0x568>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d17a      	bne.n	80043b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d824      	bhi.n	8004312 <UART_SetConfig+0x342>
 80042c8:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <UART_SetConfig+0x300>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	080042f5 	.word	0x080042f5
 80042d4:	08004313 	.word	0x08004313
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	08004313 	.word	0x08004313
 80042e0:	08004303 	.word	0x08004303
 80042e4:	08004313 	.word	0x08004313
 80042e8:	08004313 	.word	0x08004313
 80042ec:	08004313 	.word	0x08004313
 80042f0:	0800430b 	.word	0x0800430b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f4:	f7fe fd42 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80042f8:	61f8      	str	r0, [r7, #28]
        break;
 80042fa:	e010      	b.n	800431e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042fc:	4b8f      	ldr	r3, [pc, #572]	; (800453c <UART_SetConfig+0x56c>)
 80042fe:	61fb      	str	r3, [r7, #28]
        break;
 8004300:	e00d      	b.n	800431e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004302:	f7fe fca3 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8004306:	61f8      	str	r0, [r7, #28]
        break;
 8004308:	e009      	b.n	800431e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430e:	61fb      	str	r3, [r7, #28]
        break;
 8004310:	e005      	b.n	800431e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800431c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80fb 	beq.w	800451c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	429a      	cmp	r2, r3
 8004334:	d305      	bcc.n	8004342 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	429a      	cmp	r2, r3
 8004340:	d903      	bls.n	800434a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004348:	e0e8      	b.n	800451c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2200      	movs	r2, #0
 800434e:	461c      	mov	r4, r3
 8004350:	4615      	mov	r5, r2
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	022b      	lsls	r3, r5, #8
 800435c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004360:	0222      	lsls	r2, r4, #8
 8004362:	68f9      	ldr	r1, [r7, #12]
 8004364:	6849      	ldr	r1, [r1, #4]
 8004366:	0849      	lsrs	r1, r1, #1
 8004368:	2000      	movs	r0, #0
 800436a:	4688      	mov	r8, r1
 800436c:	4681      	mov	r9, r0
 800436e:	eb12 0a08 	adds.w	sl, r2, r8
 8004372:	eb43 0b09 	adc.w	fp, r3, r9
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004384:	4650      	mov	r0, sl
 8004386:	4659      	mov	r1, fp
 8004388:	f7fb ff72 	bl	8000270 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4613      	mov	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439a:	d308      	bcc.n	80043ae <UART_SetConfig+0x3de>
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a2:	d204      	bcs.n	80043ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	60da      	str	r2, [r3, #12]
 80043ac:	e0b6      	b.n	800451c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043b4:	e0b2      	b.n	800451c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043be:	d15e      	bne.n	800447e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80043c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d828      	bhi.n	800441a <UART_SetConfig+0x44a>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <UART_SetConfig+0x400>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	080043f5 	.word	0x080043f5
 80043d4:	080043fd 	.word	0x080043fd
 80043d8:	08004405 	.word	0x08004405
 80043dc:	0800441b 	.word	0x0800441b
 80043e0:	0800440b 	.word	0x0800440b
 80043e4:	0800441b 	.word	0x0800441b
 80043e8:	0800441b 	.word	0x0800441b
 80043ec:	0800441b 	.word	0x0800441b
 80043f0:	08004413 	.word	0x08004413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f4:	f7fe fcc2 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80043f8:	61f8      	str	r0, [r7, #28]
        break;
 80043fa:	e014      	b.n	8004426 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043fc:	f7fe fcd4 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8004400:	61f8      	str	r0, [r7, #28]
        break;
 8004402:	e010      	b.n	8004426 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004404:	4b4d      	ldr	r3, [pc, #308]	; (800453c <UART_SetConfig+0x56c>)
 8004406:	61fb      	str	r3, [r7, #28]
        break;
 8004408:	e00d      	b.n	8004426 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440a:	f7fe fc1f 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 800440e:	61f8      	str	r0, [r7, #28]
        break;
 8004410:	e009      	b.n	8004426 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004416:	61fb      	str	r3, [r7, #28]
        break;
 8004418:	e005      	b.n	8004426 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d077      	beq.n	800451c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	005a      	lsls	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	441a      	add	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b0f      	cmp	r3, #15
 8004446:	d916      	bls.n	8004476 <UART_SetConfig+0x4a6>
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444e:	d212      	bcs.n	8004476 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f023 030f 	bic.w	r3, r3, #15
 8004458:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	b29b      	uxth	r3, r3
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	b29a      	uxth	r2, r3
 8004466:	8afb      	ldrh	r3, [r7, #22]
 8004468:	4313      	orrs	r3, r2
 800446a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	8afa      	ldrh	r2, [r7, #22]
 8004472:	60da      	str	r2, [r3, #12]
 8004474:	e052      	b.n	800451c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800447c:	e04e      	b.n	800451c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800447e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004482:	2b08      	cmp	r3, #8
 8004484:	d827      	bhi.n	80044d6 <UART_SetConfig+0x506>
 8004486:	a201      	add	r2, pc, #4	; (adr r2, 800448c <UART_SetConfig+0x4bc>)
 8004488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448c:	080044b1 	.word	0x080044b1
 8004490:	080044b9 	.word	0x080044b9
 8004494:	080044c1 	.word	0x080044c1
 8004498:	080044d7 	.word	0x080044d7
 800449c:	080044c7 	.word	0x080044c7
 80044a0:	080044d7 	.word	0x080044d7
 80044a4:	080044d7 	.word	0x080044d7
 80044a8:	080044d7 	.word	0x080044d7
 80044ac:	080044cf 	.word	0x080044cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b0:	f7fe fc64 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80044b4:	61f8      	str	r0, [r7, #28]
        break;
 80044b6:	e014      	b.n	80044e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b8:	f7fe fc76 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 80044bc:	61f8      	str	r0, [r7, #28]
        break;
 80044be:	e010      	b.n	80044e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c0:	4b1e      	ldr	r3, [pc, #120]	; (800453c <UART_SetConfig+0x56c>)
 80044c2:	61fb      	str	r3, [r7, #28]
        break;
 80044c4:	e00d      	b.n	80044e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c6:	f7fe fbc1 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 80044ca:	61f8      	str	r0, [r7, #28]
        break;
 80044cc:	e009      	b.n	80044e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d2:	61fb      	str	r3, [r7, #28]
        break;
 80044d4:	e005      	b.n	80044e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044e0:	bf00      	nop
    }

    if (pclk != 0U)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d019      	beq.n	800451c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	085a      	lsrs	r2, r3, #1
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	441a      	add	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b0f      	cmp	r3, #15
 8004500:	d909      	bls.n	8004516 <UART_SetConfig+0x546>
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004508:	d205      	bcs.n	8004516 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60da      	str	r2, [r3, #12]
 8004514:	e002      	b.n	800451c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004528:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800452c:	4618      	mov	r0, r3
 800452e:	3728      	adds	r7, #40	; 0x28
 8004530:	46bd      	mov	sp, r7
 8004532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004536:	bf00      	nop
 8004538:	40008000 	.word	0x40008000
 800453c:	00f42400 	.word	0x00f42400

08004540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01a      	beq.n	8004656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463e:	d10a      	bne.n	8004656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
  }
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b098      	sub	sp, #96	; 0x60
 8004688:	af02      	add	r7, sp, #8
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004694:	f7fc fd54 	bl	8001140 <HAL_GetTick>
 8004698:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d12e      	bne.n	8004706 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b0:	2200      	movs	r2, #0
 80046b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f88c 	bl	80047d4 <UART_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d021      	beq.n	8004706 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d6:	653b      	str	r3, [r7, #80]	; 0x50
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e0:	647b      	str	r3, [r7, #68]	; 0x44
 80046e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e6      	bne.n	80046c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e062      	b.n	80047cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d149      	bne.n	80047a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800471c:	2200      	movs	r2, #0
 800471e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f856 	bl	80047d4 <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d03c      	beq.n	80047a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	623b      	str	r3, [r7, #32]
   return(result);
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474c:	633b      	str	r3, [r7, #48]	; 0x30
 800474e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e6      	bne.n	800472e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3308      	adds	r3, #8
 8004766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	64bb      	str	r3, [r7, #72]	; 0x48
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3308      	adds	r3, #8
 800477e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004780:	61fa      	str	r2, [r7, #28]
 8004782:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	69b9      	ldr	r1, [r7, #24]
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	617b      	str	r3, [r7, #20]
   return(result);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e5      	bne.n	8004760 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e011      	b.n	80047cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3758      	adds	r7, #88	; 0x58
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e4:	e049      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d045      	beq.n	800487a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ee:	f7fc fca7 	bl	8001140 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d302      	bcc.n	8004804 <UART_WaitOnFlagUntilTimeout+0x30>
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e048      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d031      	beq.n	800487a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b08      	cmp	r3, #8
 8004822:	d110      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2208      	movs	r2, #8
 800482a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f838 	bl	80048a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2208      	movs	r2, #8
 8004836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e029      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004854:	d111      	bne.n	800487a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800485e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f81e 	bl	80048a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e00f      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4013      	ands	r3, r2
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	429a      	cmp	r2, r3
 8004888:	bf0c      	ite	eq
 800488a:	2301      	moveq	r3, #1
 800488c:	2300      	movne	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	461a      	mov	r2, r3
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	429a      	cmp	r2, r3
 8004896:	d0a6      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b095      	sub	sp, #84	; 0x54
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c8:	643b      	str	r3, [r7, #64]	; 0x40
 80048ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3308      	adds	r3, #8
 80048e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004914:	2b01      	cmp	r3, #1
 8004916:	d118      	bne.n	800494a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	60bb      	str	r3, [r7, #8]
   return(result);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f023 0310 	bic.w	r3, r3, #16
 800492c:	647b      	str	r3, [r7, #68]	; 0x44
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6979      	ldr	r1, [r7, #20]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	613b      	str	r3, [r7, #16]
   return(result);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e6      	bne.n	8004918 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800495e:	bf00      	nop
 8004960:	3754      	adds	r7, #84	; 0x54
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff fb0b 	bl	8003fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800498e:	bf00      	nop
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b088      	sub	sp, #32
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6979      	ldr	r1, [r7, #20]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e6      	bne.n	800499e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff fad7 	bl	8003f90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049e2:	bf00      	nop
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004a02:	bf00      	nop
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af04      	add	r7, sp, #16
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004a16:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1a:	9302      	str	r3, [sp, #8]
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	1dfb      	adds	r3, r7, #7
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2301      	movs	r3, #1
 8004a26:	2200      	movs	r2, #0
 8004a28:	2178      	movs	r1, #120	; 0x78
 8004a2a:	4803      	ldr	r0, [pc, #12]	; (8004a38 <ssd1306_WriteCommand+0x2c>)
 8004a2c:	f7fc ffbe 	bl	80019ac <HAL_I2C_Mem_Write>
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	2000008c 	.word	0x2000008c

08004a3c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af04      	add	r7, sp, #16
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4e:	9202      	str	r2, [sp, #8]
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	2301      	movs	r3, #1
 8004a58:	2240      	movs	r2, #64	; 0x40
 8004a5a:	2178      	movs	r1, #120	; 0x78
 8004a5c:	4803      	ldr	r0, [pc, #12]	; (8004a6c <ssd1306_WriteData+0x30>)
 8004a5e:	f7fc ffa5 	bl	80019ac <HAL_I2C_Mem_Write>
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	2000008c 	.word	0x2000008c

08004a70 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004a74:	f7ff ffc3 	bl	80049fe <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004a78:	2064      	movs	r0, #100	; 0x64
 8004a7a:	f7fc fb6d 	bl	8001158 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f000 f8c0 	bl	8004c04 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004a84:	2020      	movs	r0, #32
 8004a86:	f7ff ffc1 	bl	8004a0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f7ff ffbe 	bl	8004a0c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004a90:	20b0      	movs	r0, #176	; 0xb0
 8004a92:	f7ff ffbb 	bl	8004a0c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004a96:	20c8      	movs	r0, #200	; 0xc8
 8004a98:	f7ff ffb8 	bl	8004a0c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	f7ff ffb5 	bl	8004a0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004aa2:	2010      	movs	r0, #16
 8004aa4:	f7ff ffb2 	bl	8004a0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004aa8:	2040      	movs	r0, #64	; 0x40
 8004aaa:	f7ff ffaf 	bl	8004a0c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004aae:	20ff      	movs	r0, #255	; 0xff
 8004ab0:	f000 f894 	bl	8004bdc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004ab4:	20a1      	movs	r0, #161	; 0xa1
 8004ab6:	f7ff ffa9 	bl	8004a0c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004aba:	20a6      	movs	r0, #166	; 0xa6
 8004abc:	f7ff ffa6 	bl	8004a0c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004ac0:	20a8      	movs	r0, #168	; 0xa8
 8004ac2:	f7ff ffa3 	bl	8004a0c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004ac6:	203f      	movs	r0, #63	; 0x3f
 8004ac8:	f7ff ffa0 	bl	8004a0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004acc:	20a4      	movs	r0, #164	; 0xa4
 8004ace:	f7ff ff9d 	bl	8004a0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004ad2:	20d3      	movs	r0, #211	; 0xd3
 8004ad4:	f7ff ff9a 	bl	8004a0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f7ff ff97 	bl	8004a0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004ade:	20d5      	movs	r0, #213	; 0xd5
 8004ae0:	f7ff ff94 	bl	8004a0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004ae4:	20f0      	movs	r0, #240	; 0xf0
 8004ae6:	f7ff ff91 	bl	8004a0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004aea:	20d9      	movs	r0, #217	; 0xd9
 8004aec:	f7ff ff8e 	bl	8004a0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004af0:	2022      	movs	r0, #34	; 0x22
 8004af2:	f7ff ff8b 	bl	8004a0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004af6:	20da      	movs	r0, #218	; 0xda
 8004af8:	f7ff ff88 	bl	8004a0c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004afc:	2012      	movs	r0, #18
 8004afe:	f7ff ff85 	bl	8004a0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004b02:	20db      	movs	r0, #219	; 0xdb
 8004b04:	f7ff ff82 	bl	8004a0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004b08:	2020      	movs	r0, #32
 8004b0a:	f7ff ff7f 	bl	8004a0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004b0e:	208d      	movs	r0, #141	; 0x8d
 8004b10:	f7ff ff7c 	bl	8004a0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004b14:	2014      	movs	r0, #20
 8004b16:	f7ff ff79 	bl	8004a0c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004b1a:	2001      	movs	r0, #1
 8004b1c:	f000 f872 	bl	8004c04 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004b20:	2000      	movs	r0, #0
 8004b22:	f000 f80f 	bl	8004b44 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004b26:	f000 f831 	bl	8004b8c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <ssd1306_Init+0xd0>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <ssd1306_Init+0xd0>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004b36:	4b02      	ldr	r3, [pc, #8]	; (8004b40 <ssd1306_Init+0xd0>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	711a      	strb	r2, [r3, #4]
}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000570 	.word	0x20000570

08004b44 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e00d      	b.n	8004b70 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <ssd1306_Fill+0x1a>
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	e000      	b.n	8004b60 <ssd1306_Fill+0x1c>
 8004b5e:	21ff      	movs	r1, #255	; 0xff
 8004b60:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <ssd1306_Fill+0x44>)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	460a      	mov	r2, r1
 8004b68:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b76:	d3ed      	bcc.n	8004b54 <ssd1306_Fill+0x10>
    }
}
 8004b78:	bf00      	nop
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000170 	.word	0x20000170

08004b8c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004b92:	2300      	movs	r3, #0
 8004b94:	71fb      	strb	r3, [r7, #7]
 8004b96:	e016      	b.n	8004bc6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	3b50      	subs	r3, #80	; 0x50
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ff34 	bl	8004a0c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	f7ff ff31 	bl	8004a0c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004baa:	2010      	movs	r0, #16
 8004bac:	f7ff ff2e 	bl	8004a0c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	01db      	lsls	r3, r3, #7
 8004bb4:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <ssd1306_UpdateScreen+0x4c>)
 8004bb6:	4413      	add	r3, r2
 8004bb8:	2180      	movs	r1, #128	; 0x80
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff ff3e 	bl	8004a3c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	71fb      	strb	r3, [r7, #7]
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	2b07      	cmp	r3, #7
 8004bca:	d9e5      	bls.n	8004b98 <ssd1306_UpdateScreen+0xc>
    }
}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000170 	.word	0x20000170

08004bdc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004be6:	2381      	movs	r3, #129	; 0x81
 8004be8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff0d 	bl	8004a0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ff09 	bl	8004a0c <ssd1306_WriteCommand>
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004c14:	23af      	movs	r3, #175	; 0xaf
 8004c16:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004c18:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <ssd1306_SetDisplayOn+0x38>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	715a      	strb	r2, [r3, #5]
 8004c1e:	e004      	b.n	8004c2a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004c20:	23ae      	movs	r3, #174	; 0xae
 8004c22:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <ssd1306_SetDisplayOn+0x38>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff feed 	bl	8004a0c <ssd1306_WriteCommand>
}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000570 	.word	0x20000570

08004c40 <std>:
 8004c40:	2300      	movs	r3, #0
 8004c42:	b510      	push	{r4, lr}
 8004c44:	4604      	mov	r4, r0
 8004c46:	e9c0 3300 	strd	r3, r3, [r0]
 8004c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c4e:	6083      	str	r3, [r0, #8]
 8004c50:	8181      	strh	r1, [r0, #12]
 8004c52:	6643      	str	r3, [r0, #100]	; 0x64
 8004c54:	81c2      	strh	r2, [r0, #14]
 8004c56:	6183      	str	r3, [r0, #24]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	305c      	adds	r0, #92	; 0x5c
 8004c5e:	f000 f8f4 	bl	8004e4a <memset>
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <std+0x38>)
 8004c64:	6263      	str	r3, [r4, #36]	; 0x24
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <std+0x3c>)
 8004c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <std+0x40>)
 8004c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <std+0x44>)
 8004c70:	6224      	str	r4, [r4, #32]
 8004c72:	6323      	str	r3, [r4, #48]	; 0x30
 8004c74:	bd10      	pop	{r4, pc}
 8004c76:	bf00      	nop
 8004c78:	08004dc5 	.word	0x08004dc5
 8004c7c:	08004de7 	.word	0x08004de7
 8004c80:	08004e1f 	.word	0x08004e1f
 8004c84:	08004e43 	.word	0x08004e43

08004c88 <stdio_exit_handler>:
 8004c88:	4a02      	ldr	r2, [pc, #8]	; (8004c94 <stdio_exit_handler+0xc>)
 8004c8a:	4903      	ldr	r1, [pc, #12]	; (8004c98 <stdio_exit_handler+0x10>)
 8004c8c:	4803      	ldr	r0, [pc, #12]	; (8004c9c <stdio_exit_handler+0x14>)
 8004c8e:	f000 b869 	b.w	8004d64 <_fwalk_sglue>
 8004c92:	bf00      	nop
 8004c94:	20000010 	.word	0x20000010
 8004c98:	080057e5 	.word	0x080057e5
 8004c9c:	2000001c 	.word	0x2000001c

08004ca0 <cleanup_stdio>:
 8004ca0:	6841      	ldr	r1, [r0, #4]
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <cleanup_stdio+0x34>)
 8004ca4:	4299      	cmp	r1, r3
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	4604      	mov	r4, r0
 8004caa:	d001      	beq.n	8004cb0 <cleanup_stdio+0x10>
 8004cac:	f000 fd9a 	bl	80057e4 <_fflush_r>
 8004cb0:	68a1      	ldr	r1, [r4, #8]
 8004cb2:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <cleanup_stdio+0x38>)
 8004cb4:	4299      	cmp	r1, r3
 8004cb6:	d002      	beq.n	8004cbe <cleanup_stdio+0x1e>
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f000 fd93 	bl	80057e4 <_fflush_r>
 8004cbe:	68e1      	ldr	r1, [r4, #12]
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <cleanup_stdio+0x3c>)
 8004cc2:	4299      	cmp	r1, r3
 8004cc4:	d004      	beq.n	8004cd0 <cleanup_stdio+0x30>
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ccc:	f000 bd8a 	b.w	80057e4 <_fflush_r>
 8004cd0:	bd10      	pop	{r4, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000578 	.word	0x20000578
 8004cd8:	200005e0 	.word	0x200005e0
 8004cdc:	20000648 	.word	0x20000648

08004ce0 <global_stdio_init.part.0>:
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <global_stdio_init.part.0+0x30>)
 8004ce4:	4c0b      	ldr	r4, [pc, #44]	; (8004d14 <global_stdio_init.part.0+0x34>)
 8004ce6:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <global_stdio_init.part.0+0x38>)
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	4620      	mov	r0, r4
 8004cec:	2200      	movs	r2, #0
 8004cee:	2104      	movs	r1, #4
 8004cf0:	f7ff ffa6 	bl	8004c40 <std>
 8004cf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	2109      	movs	r1, #9
 8004cfc:	f7ff ffa0 	bl	8004c40 <std>
 8004d00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d04:	2202      	movs	r2, #2
 8004d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d0a:	2112      	movs	r1, #18
 8004d0c:	f7ff bf98 	b.w	8004c40 <std>
 8004d10:	200006b0 	.word	0x200006b0
 8004d14:	20000578 	.word	0x20000578
 8004d18:	08004c89 	.word	0x08004c89

08004d1c <__sfp_lock_acquire>:
 8004d1c:	4801      	ldr	r0, [pc, #4]	; (8004d24 <__sfp_lock_acquire+0x8>)
 8004d1e:	f000 b90d 	b.w	8004f3c <__retarget_lock_acquire_recursive>
 8004d22:	bf00      	nop
 8004d24:	200006b9 	.word	0x200006b9

08004d28 <__sfp_lock_release>:
 8004d28:	4801      	ldr	r0, [pc, #4]	; (8004d30 <__sfp_lock_release+0x8>)
 8004d2a:	f000 b908 	b.w	8004f3e <__retarget_lock_release_recursive>
 8004d2e:	bf00      	nop
 8004d30:	200006b9 	.word	0x200006b9

08004d34 <__sinit>:
 8004d34:	b510      	push	{r4, lr}
 8004d36:	4604      	mov	r4, r0
 8004d38:	f7ff fff0 	bl	8004d1c <__sfp_lock_acquire>
 8004d3c:	6a23      	ldr	r3, [r4, #32]
 8004d3e:	b11b      	cbz	r3, 8004d48 <__sinit+0x14>
 8004d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d44:	f7ff bff0 	b.w	8004d28 <__sfp_lock_release>
 8004d48:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <__sinit+0x28>)
 8004d4a:	6223      	str	r3, [r4, #32]
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <__sinit+0x2c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f5      	bne.n	8004d40 <__sinit+0xc>
 8004d54:	f7ff ffc4 	bl	8004ce0 <global_stdio_init.part.0>
 8004d58:	e7f2      	b.n	8004d40 <__sinit+0xc>
 8004d5a:	bf00      	nop
 8004d5c:	08004ca1 	.word	0x08004ca1
 8004d60:	200006b0 	.word	0x200006b0

08004d64 <_fwalk_sglue>:
 8004d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d68:	4607      	mov	r7, r0
 8004d6a:	4688      	mov	r8, r1
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	2600      	movs	r6, #0
 8004d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d74:	f1b9 0901 	subs.w	r9, r9, #1
 8004d78:	d505      	bpl.n	8004d86 <_fwalk_sglue+0x22>
 8004d7a:	6824      	ldr	r4, [r4, #0]
 8004d7c:	2c00      	cmp	r4, #0
 8004d7e:	d1f7      	bne.n	8004d70 <_fwalk_sglue+0xc>
 8004d80:	4630      	mov	r0, r6
 8004d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d86:	89ab      	ldrh	r3, [r5, #12]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d907      	bls.n	8004d9c <_fwalk_sglue+0x38>
 8004d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d90:	3301      	adds	r3, #1
 8004d92:	d003      	beq.n	8004d9c <_fwalk_sglue+0x38>
 8004d94:	4629      	mov	r1, r5
 8004d96:	4638      	mov	r0, r7
 8004d98:	47c0      	blx	r8
 8004d9a:	4306      	orrs	r6, r0
 8004d9c:	3568      	adds	r5, #104	; 0x68
 8004d9e:	e7e9      	b.n	8004d74 <_fwalk_sglue+0x10>

08004da0 <iprintf>:
 8004da0:	b40f      	push	{r0, r1, r2, r3}
 8004da2:	b507      	push	{r0, r1, r2, lr}
 8004da4:	4906      	ldr	r1, [pc, #24]	; (8004dc0 <iprintf+0x20>)
 8004da6:	ab04      	add	r3, sp, #16
 8004da8:	6808      	ldr	r0, [r1, #0]
 8004daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dae:	6881      	ldr	r1, [r0, #8]
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	f000 f9e7 	bl	8005184 <_vfiprintf_r>
 8004db6:	b003      	add	sp, #12
 8004db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dbc:	b004      	add	sp, #16
 8004dbe:	4770      	bx	lr
 8004dc0:	20000068 	.word	0x20000068

08004dc4 <__sread>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dcc:	f000 f868 	bl	8004ea0 <_read_r>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	bfab      	itete	ge
 8004dd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004dd8:	181b      	addge	r3, r3, r0
 8004dda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dde:	bfac      	ite	ge
 8004de0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004de2:	81a3      	strhlt	r3, [r4, #12]
 8004de4:	bd10      	pop	{r4, pc}

08004de6 <__swrite>:
 8004de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dea:	461f      	mov	r7, r3
 8004dec:	898b      	ldrh	r3, [r1, #12]
 8004dee:	05db      	lsls	r3, r3, #23
 8004df0:	4605      	mov	r5, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	4616      	mov	r6, r2
 8004df6:	d505      	bpl.n	8004e04 <__swrite+0x1e>
 8004df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f000 f83c 	bl	8004e7c <_lseek_r>
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	4632      	mov	r2, r6
 8004e12:	463b      	mov	r3, r7
 8004e14:	4628      	mov	r0, r5
 8004e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1a:	f000 b853 	b.w	8004ec4 <_write_r>

08004e1e <__sseek>:
 8004e1e:	b510      	push	{r4, lr}
 8004e20:	460c      	mov	r4, r1
 8004e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e26:	f000 f829 	bl	8004e7c <_lseek_r>
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	bf15      	itete	ne
 8004e30:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e3a:	81a3      	strheq	r3, [r4, #12]
 8004e3c:	bf18      	it	ne
 8004e3e:	81a3      	strhne	r3, [r4, #12]
 8004e40:	bd10      	pop	{r4, pc}

08004e42 <__sclose>:
 8004e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e46:	f000 b809 	b.w	8004e5c <_close_r>

08004e4a <memset>:
 8004e4a:	4402      	add	r2, r0
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d100      	bne.n	8004e54 <memset+0xa>
 8004e52:	4770      	bx	lr
 8004e54:	f803 1b01 	strb.w	r1, [r3], #1
 8004e58:	e7f9      	b.n	8004e4e <memset+0x4>
	...

08004e5c <_close_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4d06      	ldr	r5, [pc, #24]	; (8004e78 <_close_r+0x1c>)
 8004e60:	2300      	movs	r3, #0
 8004e62:	4604      	mov	r4, r0
 8004e64:	4608      	mov	r0, r1
 8004e66:	602b      	str	r3, [r5, #0]
 8004e68:	f7fc f853 	bl	8000f12 <_close>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	d102      	bne.n	8004e76 <_close_r+0x1a>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	b103      	cbz	r3, 8004e76 <_close_r+0x1a>
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	200006b4 	.word	0x200006b4

08004e7c <_lseek_r>:
 8004e7c:	b538      	push	{r3, r4, r5, lr}
 8004e7e:	4d07      	ldr	r5, [pc, #28]	; (8004e9c <_lseek_r+0x20>)
 8004e80:	4604      	mov	r4, r0
 8004e82:	4608      	mov	r0, r1
 8004e84:	4611      	mov	r1, r2
 8004e86:	2200      	movs	r2, #0
 8004e88:	602a      	str	r2, [r5, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f7fc f868 	bl	8000f60 <_lseek>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d102      	bne.n	8004e9a <_lseek_r+0x1e>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	b103      	cbz	r3, 8004e9a <_lseek_r+0x1e>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	200006b4 	.word	0x200006b4

08004ea0 <_read_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4d07      	ldr	r5, [pc, #28]	; (8004ec0 <_read_r+0x20>)
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	2200      	movs	r2, #0
 8004eac:	602a      	str	r2, [r5, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f7fc f812 	bl	8000ed8 <_read>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_read_r+0x1e>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_read_r+0x1e>
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	200006b4 	.word	0x200006b4

08004ec4 <_write_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4d07      	ldr	r5, [pc, #28]	; (8004ee4 <_write_r+0x20>)
 8004ec8:	4604      	mov	r4, r0
 8004eca:	4608      	mov	r0, r1
 8004ecc:	4611      	mov	r1, r2
 8004ece:	2200      	movs	r2, #0
 8004ed0:	602a      	str	r2, [r5, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f7fb fcfa 	bl	80008cc <_write>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d102      	bne.n	8004ee2 <_write_r+0x1e>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	b103      	cbz	r3, 8004ee2 <_write_r+0x1e>
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	200006b4 	.word	0x200006b4

08004ee8 <__errno>:
 8004ee8:	4b01      	ldr	r3, [pc, #4]	; (8004ef0 <__errno+0x8>)
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20000068 	.word	0x20000068

08004ef4 <__libc_init_array>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	4d0d      	ldr	r5, [pc, #52]	; (8004f2c <__libc_init_array+0x38>)
 8004ef8:	4c0d      	ldr	r4, [pc, #52]	; (8004f30 <__libc_init_array+0x3c>)
 8004efa:	1b64      	subs	r4, r4, r5
 8004efc:	10a4      	asrs	r4, r4, #2
 8004efe:	2600      	movs	r6, #0
 8004f00:	42a6      	cmp	r6, r4
 8004f02:	d109      	bne.n	8004f18 <__libc_init_array+0x24>
 8004f04:	4d0b      	ldr	r5, [pc, #44]	; (8004f34 <__libc_init_array+0x40>)
 8004f06:	4c0c      	ldr	r4, [pc, #48]	; (8004f38 <__libc_init_array+0x44>)
 8004f08:	f000 fdbe 	bl	8005a88 <_init>
 8004f0c:	1b64      	subs	r4, r4, r5
 8004f0e:	10a4      	asrs	r4, r4, #2
 8004f10:	2600      	movs	r6, #0
 8004f12:	42a6      	cmp	r6, r4
 8004f14:	d105      	bne.n	8004f22 <__libc_init_array+0x2e>
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
 8004f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1c:	4798      	blx	r3
 8004f1e:	3601      	adds	r6, #1
 8004f20:	e7ee      	b.n	8004f00 <__libc_init_array+0xc>
 8004f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f26:	4798      	blx	r3
 8004f28:	3601      	adds	r6, #1
 8004f2a:	e7f2      	b.n	8004f12 <__libc_init_array+0x1e>
 8004f2c:	08005b38 	.word	0x08005b38
 8004f30:	08005b38 	.word	0x08005b38
 8004f34:	08005b38 	.word	0x08005b38
 8004f38:	08005b3c 	.word	0x08005b3c

08004f3c <__retarget_lock_acquire_recursive>:
 8004f3c:	4770      	bx	lr

08004f3e <__retarget_lock_release_recursive>:
 8004f3e:	4770      	bx	lr

08004f40 <_free_r>:
 8004f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f42:	2900      	cmp	r1, #0
 8004f44:	d044      	beq.n	8004fd0 <_free_r+0x90>
 8004f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f4a:	9001      	str	r0, [sp, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f52:	bfb8      	it	lt
 8004f54:	18e4      	addlt	r4, r4, r3
 8004f56:	f000 f8df 	bl	8005118 <__malloc_lock>
 8004f5a:	4a1e      	ldr	r2, [pc, #120]	; (8004fd4 <_free_r+0x94>)
 8004f5c:	9801      	ldr	r0, [sp, #4]
 8004f5e:	6813      	ldr	r3, [r2, #0]
 8004f60:	b933      	cbnz	r3, 8004f70 <_free_r+0x30>
 8004f62:	6063      	str	r3, [r4, #4]
 8004f64:	6014      	str	r4, [r2, #0]
 8004f66:	b003      	add	sp, #12
 8004f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f6c:	f000 b8da 	b.w	8005124 <__malloc_unlock>
 8004f70:	42a3      	cmp	r3, r4
 8004f72:	d908      	bls.n	8004f86 <_free_r+0x46>
 8004f74:	6825      	ldr	r5, [r4, #0]
 8004f76:	1961      	adds	r1, r4, r5
 8004f78:	428b      	cmp	r3, r1
 8004f7a:	bf01      	itttt	eq
 8004f7c:	6819      	ldreq	r1, [r3, #0]
 8004f7e:	685b      	ldreq	r3, [r3, #4]
 8004f80:	1949      	addeq	r1, r1, r5
 8004f82:	6021      	streq	r1, [r4, #0]
 8004f84:	e7ed      	b.n	8004f62 <_free_r+0x22>
 8004f86:	461a      	mov	r2, r3
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	b10b      	cbz	r3, 8004f90 <_free_r+0x50>
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	d9fa      	bls.n	8004f86 <_free_r+0x46>
 8004f90:	6811      	ldr	r1, [r2, #0]
 8004f92:	1855      	adds	r5, r2, r1
 8004f94:	42a5      	cmp	r5, r4
 8004f96:	d10b      	bne.n	8004fb0 <_free_r+0x70>
 8004f98:	6824      	ldr	r4, [r4, #0]
 8004f9a:	4421      	add	r1, r4
 8004f9c:	1854      	adds	r4, r2, r1
 8004f9e:	42a3      	cmp	r3, r4
 8004fa0:	6011      	str	r1, [r2, #0]
 8004fa2:	d1e0      	bne.n	8004f66 <_free_r+0x26>
 8004fa4:	681c      	ldr	r4, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	6053      	str	r3, [r2, #4]
 8004faa:	440c      	add	r4, r1
 8004fac:	6014      	str	r4, [r2, #0]
 8004fae:	e7da      	b.n	8004f66 <_free_r+0x26>
 8004fb0:	d902      	bls.n	8004fb8 <_free_r+0x78>
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	6003      	str	r3, [r0, #0]
 8004fb6:	e7d6      	b.n	8004f66 <_free_r+0x26>
 8004fb8:	6825      	ldr	r5, [r4, #0]
 8004fba:	1961      	adds	r1, r4, r5
 8004fbc:	428b      	cmp	r3, r1
 8004fbe:	bf04      	itt	eq
 8004fc0:	6819      	ldreq	r1, [r3, #0]
 8004fc2:	685b      	ldreq	r3, [r3, #4]
 8004fc4:	6063      	str	r3, [r4, #4]
 8004fc6:	bf04      	itt	eq
 8004fc8:	1949      	addeq	r1, r1, r5
 8004fca:	6021      	streq	r1, [r4, #0]
 8004fcc:	6054      	str	r4, [r2, #4]
 8004fce:	e7ca      	b.n	8004f66 <_free_r+0x26>
 8004fd0:	b003      	add	sp, #12
 8004fd2:	bd30      	pop	{r4, r5, pc}
 8004fd4:	200006bc 	.word	0x200006bc

08004fd8 <sbrk_aligned>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	4e0e      	ldr	r6, [pc, #56]	; (8005014 <sbrk_aligned+0x3c>)
 8004fdc:	460c      	mov	r4, r1
 8004fde:	6831      	ldr	r1, [r6, #0]
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	b911      	cbnz	r1, 8004fea <sbrk_aligned+0x12>
 8004fe4:	f000 fcbc 	bl	8005960 <_sbrk_r>
 8004fe8:	6030      	str	r0, [r6, #0]
 8004fea:	4621      	mov	r1, r4
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 fcb7 	bl	8005960 <_sbrk_r>
 8004ff2:	1c43      	adds	r3, r0, #1
 8004ff4:	d00a      	beq.n	800500c <sbrk_aligned+0x34>
 8004ff6:	1cc4      	adds	r4, r0, #3
 8004ff8:	f024 0403 	bic.w	r4, r4, #3
 8004ffc:	42a0      	cmp	r0, r4
 8004ffe:	d007      	beq.n	8005010 <sbrk_aligned+0x38>
 8005000:	1a21      	subs	r1, r4, r0
 8005002:	4628      	mov	r0, r5
 8005004:	f000 fcac 	bl	8005960 <_sbrk_r>
 8005008:	3001      	adds	r0, #1
 800500a:	d101      	bne.n	8005010 <sbrk_aligned+0x38>
 800500c:	f04f 34ff 	mov.w	r4, #4294967295
 8005010:	4620      	mov	r0, r4
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	200006c0 	.word	0x200006c0

08005018 <_malloc_r>:
 8005018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800501c:	1ccd      	adds	r5, r1, #3
 800501e:	f025 0503 	bic.w	r5, r5, #3
 8005022:	3508      	adds	r5, #8
 8005024:	2d0c      	cmp	r5, #12
 8005026:	bf38      	it	cc
 8005028:	250c      	movcc	r5, #12
 800502a:	2d00      	cmp	r5, #0
 800502c:	4607      	mov	r7, r0
 800502e:	db01      	blt.n	8005034 <_malloc_r+0x1c>
 8005030:	42a9      	cmp	r1, r5
 8005032:	d905      	bls.n	8005040 <_malloc_r+0x28>
 8005034:	230c      	movs	r3, #12
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	2600      	movs	r6, #0
 800503a:	4630      	mov	r0, r6
 800503c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005040:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005114 <_malloc_r+0xfc>
 8005044:	f000 f868 	bl	8005118 <__malloc_lock>
 8005048:	f8d8 3000 	ldr.w	r3, [r8]
 800504c:	461c      	mov	r4, r3
 800504e:	bb5c      	cbnz	r4, 80050a8 <_malloc_r+0x90>
 8005050:	4629      	mov	r1, r5
 8005052:	4638      	mov	r0, r7
 8005054:	f7ff ffc0 	bl	8004fd8 <sbrk_aligned>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	4604      	mov	r4, r0
 800505c:	d155      	bne.n	800510a <_malloc_r+0xf2>
 800505e:	f8d8 4000 	ldr.w	r4, [r8]
 8005062:	4626      	mov	r6, r4
 8005064:	2e00      	cmp	r6, #0
 8005066:	d145      	bne.n	80050f4 <_malloc_r+0xdc>
 8005068:	2c00      	cmp	r4, #0
 800506a:	d048      	beq.n	80050fe <_malloc_r+0xe6>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	4631      	mov	r1, r6
 8005070:	4638      	mov	r0, r7
 8005072:	eb04 0903 	add.w	r9, r4, r3
 8005076:	f000 fc73 	bl	8005960 <_sbrk_r>
 800507a:	4581      	cmp	r9, r0
 800507c:	d13f      	bne.n	80050fe <_malloc_r+0xe6>
 800507e:	6821      	ldr	r1, [r4, #0]
 8005080:	1a6d      	subs	r5, r5, r1
 8005082:	4629      	mov	r1, r5
 8005084:	4638      	mov	r0, r7
 8005086:	f7ff ffa7 	bl	8004fd8 <sbrk_aligned>
 800508a:	3001      	adds	r0, #1
 800508c:	d037      	beq.n	80050fe <_malloc_r+0xe6>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	442b      	add	r3, r5
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	f8d8 3000 	ldr.w	r3, [r8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d038      	beq.n	800510e <_malloc_r+0xf6>
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	42a2      	cmp	r2, r4
 80050a0:	d12b      	bne.n	80050fa <_malloc_r+0xe2>
 80050a2:	2200      	movs	r2, #0
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	e00f      	b.n	80050c8 <_malloc_r+0xb0>
 80050a8:	6822      	ldr	r2, [r4, #0]
 80050aa:	1b52      	subs	r2, r2, r5
 80050ac:	d41f      	bmi.n	80050ee <_malloc_r+0xd6>
 80050ae:	2a0b      	cmp	r2, #11
 80050b0:	d917      	bls.n	80050e2 <_malloc_r+0xca>
 80050b2:	1961      	adds	r1, r4, r5
 80050b4:	42a3      	cmp	r3, r4
 80050b6:	6025      	str	r5, [r4, #0]
 80050b8:	bf18      	it	ne
 80050ba:	6059      	strne	r1, [r3, #4]
 80050bc:	6863      	ldr	r3, [r4, #4]
 80050be:	bf08      	it	eq
 80050c0:	f8c8 1000 	streq.w	r1, [r8]
 80050c4:	5162      	str	r2, [r4, r5]
 80050c6:	604b      	str	r3, [r1, #4]
 80050c8:	4638      	mov	r0, r7
 80050ca:	f104 060b 	add.w	r6, r4, #11
 80050ce:	f000 f829 	bl	8005124 <__malloc_unlock>
 80050d2:	f026 0607 	bic.w	r6, r6, #7
 80050d6:	1d23      	adds	r3, r4, #4
 80050d8:	1af2      	subs	r2, r6, r3
 80050da:	d0ae      	beq.n	800503a <_malloc_r+0x22>
 80050dc:	1b9b      	subs	r3, r3, r6
 80050de:	50a3      	str	r3, [r4, r2]
 80050e0:	e7ab      	b.n	800503a <_malloc_r+0x22>
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	6862      	ldr	r2, [r4, #4]
 80050e6:	d1dd      	bne.n	80050a4 <_malloc_r+0x8c>
 80050e8:	f8c8 2000 	str.w	r2, [r8]
 80050ec:	e7ec      	b.n	80050c8 <_malloc_r+0xb0>
 80050ee:	4623      	mov	r3, r4
 80050f0:	6864      	ldr	r4, [r4, #4]
 80050f2:	e7ac      	b.n	800504e <_malloc_r+0x36>
 80050f4:	4634      	mov	r4, r6
 80050f6:	6876      	ldr	r6, [r6, #4]
 80050f8:	e7b4      	b.n	8005064 <_malloc_r+0x4c>
 80050fa:	4613      	mov	r3, r2
 80050fc:	e7cc      	b.n	8005098 <_malloc_r+0x80>
 80050fe:	230c      	movs	r3, #12
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	4638      	mov	r0, r7
 8005104:	f000 f80e 	bl	8005124 <__malloc_unlock>
 8005108:	e797      	b.n	800503a <_malloc_r+0x22>
 800510a:	6025      	str	r5, [r4, #0]
 800510c:	e7dc      	b.n	80050c8 <_malloc_r+0xb0>
 800510e:	605b      	str	r3, [r3, #4]
 8005110:	deff      	udf	#255	; 0xff
 8005112:	bf00      	nop
 8005114:	200006bc 	.word	0x200006bc

08005118 <__malloc_lock>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__malloc_lock+0x8>)
 800511a:	f7ff bf0f 	b.w	8004f3c <__retarget_lock_acquire_recursive>
 800511e:	bf00      	nop
 8005120:	200006b8 	.word	0x200006b8

08005124 <__malloc_unlock>:
 8005124:	4801      	ldr	r0, [pc, #4]	; (800512c <__malloc_unlock+0x8>)
 8005126:	f7ff bf0a 	b.w	8004f3e <__retarget_lock_release_recursive>
 800512a:	bf00      	nop
 800512c:	200006b8 	.word	0x200006b8

08005130 <__sfputc_r>:
 8005130:	6893      	ldr	r3, [r2, #8]
 8005132:	3b01      	subs	r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	b410      	push	{r4}
 8005138:	6093      	str	r3, [r2, #8]
 800513a:	da08      	bge.n	800514e <__sfputc_r+0x1e>
 800513c:	6994      	ldr	r4, [r2, #24]
 800513e:	42a3      	cmp	r3, r4
 8005140:	db01      	blt.n	8005146 <__sfputc_r+0x16>
 8005142:	290a      	cmp	r1, #10
 8005144:	d103      	bne.n	800514e <__sfputc_r+0x1e>
 8005146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800514a:	f000 bb73 	b.w	8005834 <__swbuf_r>
 800514e:	6813      	ldr	r3, [r2, #0]
 8005150:	1c58      	adds	r0, r3, #1
 8005152:	6010      	str	r0, [r2, #0]
 8005154:	7019      	strb	r1, [r3, #0]
 8005156:	4608      	mov	r0, r1
 8005158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800515c:	4770      	bx	lr

0800515e <__sfputs_r>:
 800515e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005160:	4606      	mov	r6, r0
 8005162:	460f      	mov	r7, r1
 8005164:	4614      	mov	r4, r2
 8005166:	18d5      	adds	r5, r2, r3
 8005168:	42ac      	cmp	r4, r5
 800516a:	d101      	bne.n	8005170 <__sfputs_r+0x12>
 800516c:	2000      	movs	r0, #0
 800516e:	e007      	b.n	8005180 <__sfputs_r+0x22>
 8005170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005174:	463a      	mov	r2, r7
 8005176:	4630      	mov	r0, r6
 8005178:	f7ff ffda 	bl	8005130 <__sfputc_r>
 800517c:	1c43      	adds	r3, r0, #1
 800517e:	d1f3      	bne.n	8005168 <__sfputs_r+0xa>
 8005180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005184 <_vfiprintf_r>:
 8005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	460d      	mov	r5, r1
 800518a:	b09d      	sub	sp, #116	; 0x74
 800518c:	4614      	mov	r4, r2
 800518e:	4698      	mov	r8, r3
 8005190:	4606      	mov	r6, r0
 8005192:	b118      	cbz	r0, 800519c <_vfiprintf_r+0x18>
 8005194:	6a03      	ldr	r3, [r0, #32]
 8005196:	b90b      	cbnz	r3, 800519c <_vfiprintf_r+0x18>
 8005198:	f7ff fdcc 	bl	8004d34 <__sinit>
 800519c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800519e:	07d9      	lsls	r1, r3, #31
 80051a0:	d405      	bmi.n	80051ae <_vfiprintf_r+0x2a>
 80051a2:	89ab      	ldrh	r3, [r5, #12]
 80051a4:	059a      	lsls	r2, r3, #22
 80051a6:	d402      	bmi.n	80051ae <_vfiprintf_r+0x2a>
 80051a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051aa:	f7ff fec7 	bl	8004f3c <__retarget_lock_acquire_recursive>
 80051ae:	89ab      	ldrh	r3, [r5, #12]
 80051b0:	071b      	lsls	r3, r3, #28
 80051b2:	d501      	bpl.n	80051b8 <_vfiprintf_r+0x34>
 80051b4:	692b      	ldr	r3, [r5, #16]
 80051b6:	b99b      	cbnz	r3, 80051e0 <_vfiprintf_r+0x5c>
 80051b8:	4629      	mov	r1, r5
 80051ba:	4630      	mov	r0, r6
 80051bc:	f000 fb78 	bl	80058b0 <__swsetup_r>
 80051c0:	b170      	cbz	r0, 80051e0 <_vfiprintf_r+0x5c>
 80051c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051c4:	07dc      	lsls	r4, r3, #31
 80051c6:	d504      	bpl.n	80051d2 <_vfiprintf_r+0x4e>
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	b01d      	add	sp, #116	; 0x74
 80051ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d2:	89ab      	ldrh	r3, [r5, #12]
 80051d4:	0598      	lsls	r0, r3, #22
 80051d6:	d4f7      	bmi.n	80051c8 <_vfiprintf_r+0x44>
 80051d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051da:	f7ff feb0 	bl	8004f3e <__retarget_lock_release_recursive>
 80051de:	e7f3      	b.n	80051c8 <_vfiprintf_r+0x44>
 80051e0:	2300      	movs	r3, #0
 80051e2:	9309      	str	r3, [sp, #36]	; 0x24
 80051e4:	2320      	movs	r3, #32
 80051e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ee:	2330      	movs	r3, #48	; 0x30
 80051f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80053a4 <_vfiprintf_r+0x220>
 80051f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051f8:	f04f 0901 	mov.w	r9, #1
 80051fc:	4623      	mov	r3, r4
 80051fe:	469a      	mov	sl, r3
 8005200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005204:	b10a      	cbz	r2, 800520a <_vfiprintf_r+0x86>
 8005206:	2a25      	cmp	r2, #37	; 0x25
 8005208:	d1f9      	bne.n	80051fe <_vfiprintf_r+0x7a>
 800520a:	ebba 0b04 	subs.w	fp, sl, r4
 800520e:	d00b      	beq.n	8005228 <_vfiprintf_r+0xa4>
 8005210:	465b      	mov	r3, fp
 8005212:	4622      	mov	r2, r4
 8005214:	4629      	mov	r1, r5
 8005216:	4630      	mov	r0, r6
 8005218:	f7ff ffa1 	bl	800515e <__sfputs_r>
 800521c:	3001      	adds	r0, #1
 800521e:	f000 80a9 	beq.w	8005374 <_vfiprintf_r+0x1f0>
 8005222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005224:	445a      	add	r2, fp
 8005226:	9209      	str	r2, [sp, #36]	; 0x24
 8005228:	f89a 3000 	ldrb.w	r3, [sl]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80a1 	beq.w	8005374 <_vfiprintf_r+0x1f0>
 8005232:	2300      	movs	r3, #0
 8005234:	f04f 32ff 	mov.w	r2, #4294967295
 8005238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800523c:	f10a 0a01 	add.w	sl, sl, #1
 8005240:	9304      	str	r3, [sp, #16]
 8005242:	9307      	str	r3, [sp, #28]
 8005244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005248:	931a      	str	r3, [sp, #104]	; 0x68
 800524a:	4654      	mov	r4, sl
 800524c:	2205      	movs	r2, #5
 800524e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005252:	4854      	ldr	r0, [pc, #336]	; (80053a4 <_vfiprintf_r+0x220>)
 8005254:	f7fa ffbc 	bl	80001d0 <memchr>
 8005258:	9a04      	ldr	r2, [sp, #16]
 800525a:	b9d8      	cbnz	r0, 8005294 <_vfiprintf_r+0x110>
 800525c:	06d1      	lsls	r1, r2, #27
 800525e:	bf44      	itt	mi
 8005260:	2320      	movmi	r3, #32
 8005262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005266:	0713      	lsls	r3, r2, #28
 8005268:	bf44      	itt	mi
 800526a:	232b      	movmi	r3, #43	; 0x2b
 800526c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005270:	f89a 3000 	ldrb.w	r3, [sl]
 8005274:	2b2a      	cmp	r3, #42	; 0x2a
 8005276:	d015      	beq.n	80052a4 <_vfiprintf_r+0x120>
 8005278:	9a07      	ldr	r2, [sp, #28]
 800527a:	4654      	mov	r4, sl
 800527c:	2000      	movs	r0, #0
 800527e:	f04f 0c0a 	mov.w	ip, #10
 8005282:	4621      	mov	r1, r4
 8005284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005288:	3b30      	subs	r3, #48	; 0x30
 800528a:	2b09      	cmp	r3, #9
 800528c:	d94d      	bls.n	800532a <_vfiprintf_r+0x1a6>
 800528e:	b1b0      	cbz	r0, 80052be <_vfiprintf_r+0x13a>
 8005290:	9207      	str	r2, [sp, #28]
 8005292:	e014      	b.n	80052be <_vfiprintf_r+0x13a>
 8005294:	eba0 0308 	sub.w	r3, r0, r8
 8005298:	fa09 f303 	lsl.w	r3, r9, r3
 800529c:	4313      	orrs	r3, r2
 800529e:	9304      	str	r3, [sp, #16]
 80052a0:	46a2      	mov	sl, r4
 80052a2:	e7d2      	b.n	800524a <_vfiprintf_r+0xc6>
 80052a4:	9b03      	ldr	r3, [sp, #12]
 80052a6:	1d19      	adds	r1, r3, #4
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	9103      	str	r1, [sp, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bfbb      	ittet	lt
 80052b0:	425b      	neglt	r3, r3
 80052b2:	f042 0202 	orrlt.w	r2, r2, #2
 80052b6:	9307      	strge	r3, [sp, #28]
 80052b8:	9307      	strlt	r3, [sp, #28]
 80052ba:	bfb8      	it	lt
 80052bc:	9204      	strlt	r2, [sp, #16]
 80052be:	7823      	ldrb	r3, [r4, #0]
 80052c0:	2b2e      	cmp	r3, #46	; 0x2e
 80052c2:	d10c      	bne.n	80052de <_vfiprintf_r+0x15a>
 80052c4:	7863      	ldrb	r3, [r4, #1]
 80052c6:	2b2a      	cmp	r3, #42	; 0x2a
 80052c8:	d134      	bne.n	8005334 <_vfiprintf_r+0x1b0>
 80052ca:	9b03      	ldr	r3, [sp, #12]
 80052cc:	1d1a      	adds	r2, r3, #4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	9203      	str	r2, [sp, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfb8      	it	lt
 80052d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80052da:	3402      	adds	r4, #2
 80052dc:	9305      	str	r3, [sp, #20]
 80052de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80053b4 <_vfiprintf_r+0x230>
 80052e2:	7821      	ldrb	r1, [r4, #0]
 80052e4:	2203      	movs	r2, #3
 80052e6:	4650      	mov	r0, sl
 80052e8:	f7fa ff72 	bl	80001d0 <memchr>
 80052ec:	b138      	cbz	r0, 80052fe <_vfiprintf_r+0x17a>
 80052ee:	9b04      	ldr	r3, [sp, #16]
 80052f0:	eba0 000a 	sub.w	r0, r0, sl
 80052f4:	2240      	movs	r2, #64	; 0x40
 80052f6:	4082      	lsls	r2, r0
 80052f8:	4313      	orrs	r3, r2
 80052fa:	3401      	adds	r4, #1
 80052fc:	9304      	str	r3, [sp, #16]
 80052fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005302:	4829      	ldr	r0, [pc, #164]	; (80053a8 <_vfiprintf_r+0x224>)
 8005304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005308:	2206      	movs	r2, #6
 800530a:	f7fa ff61 	bl	80001d0 <memchr>
 800530e:	2800      	cmp	r0, #0
 8005310:	d03f      	beq.n	8005392 <_vfiprintf_r+0x20e>
 8005312:	4b26      	ldr	r3, [pc, #152]	; (80053ac <_vfiprintf_r+0x228>)
 8005314:	bb1b      	cbnz	r3, 800535e <_vfiprintf_r+0x1da>
 8005316:	9b03      	ldr	r3, [sp, #12]
 8005318:	3307      	adds	r3, #7
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	3308      	adds	r3, #8
 8005320:	9303      	str	r3, [sp, #12]
 8005322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005324:	443b      	add	r3, r7
 8005326:	9309      	str	r3, [sp, #36]	; 0x24
 8005328:	e768      	b.n	80051fc <_vfiprintf_r+0x78>
 800532a:	fb0c 3202 	mla	r2, ip, r2, r3
 800532e:	460c      	mov	r4, r1
 8005330:	2001      	movs	r0, #1
 8005332:	e7a6      	b.n	8005282 <_vfiprintf_r+0xfe>
 8005334:	2300      	movs	r3, #0
 8005336:	3401      	adds	r4, #1
 8005338:	9305      	str	r3, [sp, #20]
 800533a:	4619      	mov	r1, r3
 800533c:	f04f 0c0a 	mov.w	ip, #10
 8005340:	4620      	mov	r0, r4
 8005342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005346:	3a30      	subs	r2, #48	; 0x30
 8005348:	2a09      	cmp	r2, #9
 800534a:	d903      	bls.n	8005354 <_vfiprintf_r+0x1d0>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0c6      	beq.n	80052de <_vfiprintf_r+0x15a>
 8005350:	9105      	str	r1, [sp, #20]
 8005352:	e7c4      	b.n	80052de <_vfiprintf_r+0x15a>
 8005354:	fb0c 2101 	mla	r1, ip, r1, r2
 8005358:	4604      	mov	r4, r0
 800535a:	2301      	movs	r3, #1
 800535c:	e7f0      	b.n	8005340 <_vfiprintf_r+0x1bc>
 800535e:	ab03      	add	r3, sp, #12
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	462a      	mov	r2, r5
 8005364:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <_vfiprintf_r+0x22c>)
 8005366:	a904      	add	r1, sp, #16
 8005368:	4630      	mov	r0, r6
 800536a:	f3af 8000 	nop.w
 800536e:	4607      	mov	r7, r0
 8005370:	1c78      	adds	r0, r7, #1
 8005372:	d1d6      	bne.n	8005322 <_vfiprintf_r+0x19e>
 8005374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005376:	07d9      	lsls	r1, r3, #31
 8005378:	d405      	bmi.n	8005386 <_vfiprintf_r+0x202>
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	059a      	lsls	r2, r3, #22
 800537e:	d402      	bmi.n	8005386 <_vfiprintf_r+0x202>
 8005380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005382:	f7ff fddc 	bl	8004f3e <__retarget_lock_release_recursive>
 8005386:	89ab      	ldrh	r3, [r5, #12]
 8005388:	065b      	lsls	r3, r3, #25
 800538a:	f53f af1d 	bmi.w	80051c8 <_vfiprintf_r+0x44>
 800538e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005390:	e71c      	b.n	80051cc <_vfiprintf_r+0x48>
 8005392:	ab03      	add	r3, sp, #12
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	462a      	mov	r2, r5
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <_vfiprintf_r+0x22c>)
 800539a:	a904      	add	r1, sp, #16
 800539c:	4630      	mov	r0, r6
 800539e:	f000 f879 	bl	8005494 <_printf_i>
 80053a2:	e7e4      	b.n	800536e <_vfiprintf_r+0x1ea>
 80053a4:	08005afc 	.word	0x08005afc
 80053a8:	08005b06 	.word	0x08005b06
 80053ac:	00000000 	.word	0x00000000
 80053b0:	0800515f 	.word	0x0800515f
 80053b4:	08005b02 	.word	0x08005b02

080053b8 <_printf_common>:
 80053b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053bc:	4616      	mov	r6, r2
 80053be:	4699      	mov	r9, r3
 80053c0:	688a      	ldr	r2, [r1, #8]
 80053c2:	690b      	ldr	r3, [r1, #16]
 80053c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053c8:	4293      	cmp	r3, r2
 80053ca:	bfb8      	it	lt
 80053cc:	4613      	movlt	r3, r2
 80053ce:	6033      	str	r3, [r6, #0]
 80053d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053d4:	4607      	mov	r7, r0
 80053d6:	460c      	mov	r4, r1
 80053d8:	b10a      	cbz	r2, 80053de <_printf_common+0x26>
 80053da:	3301      	adds	r3, #1
 80053dc:	6033      	str	r3, [r6, #0]
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	0699      	lsls	r1, r3, #26
 80053e2:	bf42      	ittt	mi
 80053e4:	6833      	ldrmi	r3, [r6, #0]
 80053e6:	3302      	addmi	r3, #2
 80053e8:	6033      	strmi	r3, [r6, #0]
 80053ea:	6825      	ldr	r5, [r4, #0]
 80053ec:	f015 0506 	ands.w	r5, r5, #6
 80053f0:	d106      	bne.n	8005400 <_printf_common+0x48>
 80053f2:	f104 0a19 	add.w	sl, r4, #25
 80053f6:	68e3      	ldr	r3, [r4, #12]
 80053f8:	6832      	ldr	r2, [r6, #0]
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	42ab      	cmp	r3, r5
 80053fe:	dc26      	bgt.n	800544e <_printf_common+0x96>
 8005400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005404:	1e13      	subs	r3, r2, #0
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	bf18      	it	ne
 800540a:	2301      	movne	r3, #1
 800540c:	0692      	lsls	r2, r2, #26
 800540e:	d42b      	bmi.n	8005468 <_printf_common+0xb0>
 8005410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005414:	4649      	mov	r1, r9
 8005416:	4638      	mov	r0, r7
 8005418:	47c0      	blx	r8
 800541a:	3001      	adds	r0, #1
 800541c:	d01e      	beq.n	800545c <_printf_common+0xa4>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	6922      	ldr	r2, [r4, #16]
 8005422:	f003 0306 	and.w	r3, r3, #6
 8005426:	2b04      	cmp	r3, #4
 8005428:	bf02      	ittt	eq
 800542a:	68e5      	ldreq	r5, [r4, #12]
 800542c:	6833      	ldreq	r3, [r6, #0]
 800542e:	1aed      	subeq	r5, r5, r3
 8005430:	68a3      	ldr	r3, [r4, #8]
 8005432:	bf0c      	ite	eq
 8005434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005438:	2500      	movne	r5, #0
 800543a:	4293      	cmp	r3, r2
 800543c:	bfc4      	itt	gt
 800543e:	1a9b      	subgt	r3, r3, r2
 8005440:	18ed      	addgt	r5, r5, r3
 8005442:	2600      	movs	r6, #0
 8005444:	341a      	adds	r4, #26
 8005446:	42b5      	cmp	r5, r6
 8005448:	d11a      	bne.n	8005480 <_printf_common+0xc8>
 800544a:	2000      	movs	r0, #0
 800544c:	e008      	b.n	8005460 <_printf_common+0xa8>
 800544e:	2301      	movs	r3, #1
 8005450:	4652      	mov	r2, sl
 8005452:	4649      	mov	r1, r9
 8005454:	4638      	mov	r0, r7
 8005456:	47c0      	blx	r8
 8005458:	3001      	adds	r0, #1
 800545a:	d103      	bne.n	8005464 <_printf_common+0xac>
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005464:	3501      	adds	r5, #1
 8005466:	e7c6      	b.n	80053f6 <_printf_common+0x3e>
 8005468:	18e1      	adds	r1, r4, r3
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	2030      	movs	r0, #48	; 0x30
 800546e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005472:	4422      	add	r2, r4
 8005474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800547c:	3302      	adds	r3, #2
 800547e:	e7c7      	b.n	8005410 <_printf_common+0x58>
 8005480:	2301      	movs	r3, #1
 8005482:	4622      	mov	r2, r4
 8005484:	4649      	mov	r1, r9
 8005486:	4638      	mov	r0, r7
 8005488:	47c0      	blx	r8
 800548a:	3001      	adds	r0, #1
 800548c:	d0e6      	beq.n	800545c <_printf_common+0xa4>
 800548e:	3601      	adds	r6, #1
 8005490:	e7d9      	b.n	8005446 <_printf_common+0x8e>
	...

08005494 <_printf_i>:
 8005494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005498:	7e0f      	ldrb	r7, [r1, #24]
 800549a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800549c:	2f78      	cmp	r7, #120	; 0x78
 800549e:	4691      	mov	r9, r2
 80054a0:	4680      	mov	r8, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	469a      	mov	sl, r3
 80054a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054aa:	d807      	bhi.n	80054bc <_printf_i+0x28>
 80054ac:	2f62      	cmp	r7, #98	; 0x62
 80054ae:	d80a      	bhi.n	80054c6 <_printf_i+0x32>
 80054b0:	2f00      	cmp	r7, #0
 80054b2:	f000 80d4 	beq.w	800565e <_printf_i+0x1ca>
 80054b6:	2f58      	cmp	r7, #88	; 0x58
 80054b8:	f000 80c0 	beq.w	800563c <_printf_i+0x1a8>
 80054bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054c4:	e03a      	b.n	800553c <_printf_i+0xa8>
 80054c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ca:	2b15      	cmp	r3, #21
 80054cc:	d8f6      	bhi.n	80054bc <_printf_i+0x28>
 80054ce:	a101      	add	r1, pc, #4	; (adr r1, 80054d4 <_printf_i+0x40>)
 80054d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054d4:	0800552d 	.word	0x0800552d
 80054d8:	08005541 	.word	0x08005541
 80054dc:	080054bd 	.word	0x080054bd
 80054e0:	080054bd 	.word	0x080054bd
 80054e4:	080054bd 	.word	0x080054bd
 80054e8:	080054bd 	.word	0x080054bd
 80054ec:	08005541 	.word	0x08005541
 80054f0:	080054bd 	.word	0x080054bd
 80054f4:	080054bd 	.word	0x080054bd
 80054f8:	080054bd 	.word	0x080054bd
 80054fc:	080054bd 	.word	0x080054bd
 8005500:	08005645 	.word	0x08005645
 8005504:	0800556d 	.word	0x0800556d
 8005508:	080055ff 	.word	0x080055ff
 800550c:	080054bd 	.word	0x080054bd
 8005510:	080054bd 	.word	0x080054bd
 8005514:	08005667 	.word	0x08005667
 8005518:	080054bd 	.word	0x080054bd
 800551c:	0800556d 	.word	0x0800556d
 8005520:	080054bd 	.word	0x080054bd
 8005524:	080054bd 	.word	0x080054bd
 8005528:	08005607 	.word	0x08005607
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	1d1a      	adds	r2, r3, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	602a      	str	r2, [r5, #0]
 8005534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800553c:	2301      	movs	r3, #1
 800553e:	e09f      	b.n	8005680 <_printf_i+0x1ec>
 8005540:	6820      	ldr	r0, [r4, #0]
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	0607      	lsls	r7, r0, #24
 8005546:	f103 0104 	add.w	r1, r3, #4
 800554a:	6029      	str	r1, [r5, #0]
 800554c:	d501      	bpl.n	8005552 <_printf_i+0xbe>
 800554e:	681e      	ldr	r6, [r3, #0]
 8005550:	e003      	b.n	800555a <_printf_i+0xc6>
 8005552:	0646      	lsls	r6, r0, #25
 8005554:	d5fb      	bpl.n	800554e <_printf_i+0xba>
 8005556:	f9b3 6000 	ldrsh.w	r6, [r3]
 800555a:	2e00      	cmp	r6, #0
 800555c:	da03      	bge.n	8005566 <_printf_i+0xd2>
 800555e:	232d      	movs	r3, #45	; 0x2d
 8005560:	4276      	negs	r6, r6
 8005562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005566:	485a      	ldr	r0, [pc, #360]	; (80056d0 <_printf_i+0x23c>)
 8005568:	230a      	movs	r3, #10
 800556a:	e012      	b.n	8005592 <_printf_i+0xfe>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	6820      	ldr	r0, [r4, #0]
 8005570:	1d19      	adds	r1, r3, #4
 8005572:	6029      	str	r1, [r5, #0]
 8005574:	0605      	lsls	r5, r0, #24
 8005576:	d501      	bpl.n	800557c <_printf_i+0xe8>
 8005578:	681e      	ldr	r6, [r3, #0]
 800557a:	e002      	b.n	8005582 <_printf_i+0xee>
 800557c:	0641      	lsls	r1, r0, #25
 800557e:	d5fb      	bpl.n	8005578 <_printf_i+0xe4>
 8005580:	881e      	ldrh	r6, [r3, #0]
 8005582:	4853      	ldr	r0, [pc, #332]	; (80056d0 <_printf_i+0x23c>)
 8005584:	2f6f      	cmp	r7, #111	; 0x6f
 8005586:	bf0c      	ite	eq
 8005588:	2308      	moveq	r3, #8
 800558a:	230a      	movne	r3, #10
 800558c:	2100      	movs	r1, #0
 800558e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005592:	6865      	ldr	r5, [r4, #4]
 8005594:	60a5      	str	r5, [r4, #8]
 8005596:	2d00      	cmp	r5, #0
 8005598:	bfa2      	ittt	ge
 800559a:	6821      	ldrge	r1, [r4, #0]
 800559c:	f021 0104 	bicge.w	r1, r1, #4
 80055a0:	6021      	strge	r1, [r4, #0]
 80055a2:	b90e      	cbnz	r6, 80055a8 <_printf_i+0x114>
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	d04b      	beq.n	8005640 <_printf_i+0x1ac>
 80055a8:	4615      	mov	r5, r2
 80055aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80055ae:	fb03 6711 	mls	r7, r3, r1, r6
 80055b2:	5dc7      	ldrb	r7, [r0, r7]
 80055b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055b8:	4637      	mov	r7, r6
 80055ba:	42bb      	cmp	r3, r7
 80055bc:	460e      	mov	r6, r1
 80055be:	d9f4      	bls.n	80055aa <_printf_i+0x116>
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d10b      	bne.n	80055dc <_printf_i+0x148>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	07de      	lsls	r6, r3, #31
 80055c8:	d508      	bpl.n	80055dc <_printf_i+0x148>
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	6861      	ldr	r1, [r4, #4]
 80055ce:	4299      	cmp	r1, r3
 80055d0:	bfde      	ittt	le
 80055d2:	2330      	movle	r3, #48	; 0x30
 80055d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055dc:	1b52      	subs	r2, r2, r5
 80055de:	6122      	str	r2, [r4, #16]
 80055e0:	f8cd a000 	str.w	sl, [sp]
 80055e4:	464b      	mov	r3, r9
 80055e6:	aa03      	add	r2, sp, #12
 80055e8:	4621      	mov	r1, r4
 80055ea:	4640      	mov	r0, r8
 80055ec:	f7ff fee4 	bl	80053b8 <_printf_common>
 80055f0:	3001      	adds	r0, #1
 80055f2:	d14a      	bne.n	800568a <_printf_i+0x1f6>
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	b004      	add	sp, #16
 80055fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	f043 0320 	orr.w	r3, r3, #32
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	4833      	ldr	r0, [pc, #204]	; (80056d4 <_printf_i+0x240>)
 8005608:	2778      	movs	r7, #120	; 0x78
 800560a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	6829      	ldr	r1, [r5, #0]
 8005612:	061f      	lsls	r7, r3, #24
 8005614:	f851 6b04 	ldr.w	r6, [r1], #4
 8005618:	d402      	bmi.n	8005620 <_printf_i+0x18c>
 800561a:	065f      	lsls	r7, r3, #25
 800561c:	bf48      	it	mi
 800561e:	b2b6      	uxthmi	r6, r6
 8005620:	07df      	lsls	r7, r3, #31
 8005622:	bf48      	it	mi
 8005624:	f043 0320 	orrmi.w	r3, r3, #32
 8005628:	6029      	str	r1, [r5, #0]
 800562a:	bf48      	it	mi
 800562c:	6023      	strmi	r3, [r4, #0]
 800562e:	b91e      	cbnz	r6, 8005638 <_printf_i+0x1a4>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	f023 0320 	bic.w	r3, r3, #32
 8005636:	6023      	str	r3, [r4, #0]
 8005638:	2310      	movs	r3, #16
 800563a:	e7a7      	b.n	800558c <_printf_i+0xf8>
 800563c:	4824      	ldr	r0, [pc, #144]	; (80056d0 <_printf_i+0x23c>)
 800563e:	e7e4      	b.n	800560a <_printf_i+0x176>
 8005640:	4615      	mov	r5, r2
 8005642:	e7bd      	b.n	80055c0 <_printf_i+0x12c>
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	6826      	ldr	r6, [r4, #0]
 8005648:	6961      	ldr	r1, [r4, #20]
 800564a:	1d18      	adds	r0, r3, #4
 800564c:	6028      	str	r0, [r5, #0]
 800564e:	0635      	lsls	r5, r6, #24
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	d501      	bpl.n	8005658 <_printf_i+0x1c4>
 8005654:	6019      	str	r1, [r3, #0]
 8005656:	e002      	b.n	800565e <_printf_i+0x1ca>
 8005658:	0670      	lsls	r0, r6, #25
 800565a:	d5fb      	bpl.n	8005654 <_printf_i+0x1c0>
 800565c:	8019      	strh	r1, [r3, #0]
 800565e:	2300      	movs	r3, #0
 8005660:	6123      	str	r3, [r4, #16]
 8005662:	4615      	mov	r5, r2
 8005664:	e7bc      	b.n	80055e0 <_printf_i+0x14c>
 8005666:	682b      	ldr	r3, [r5, #0]
 8005668:	1d1a      	adds	r2, r3, #4
 800566a:	602a      	str	r2, [r5, #0]
 800566c:	681d      	ldr	r5, [r3, #0]
 800566e:	6862      	ldr	r2, [r4, #4]
 8005670:	2100      	movs	r1, #0
 8005672:	4628      	mov	r0, r5
 8005674:	f7fa fdac 	bl	80001d0 <memchr>
 8005678:	b108      	cbz	r0, 800567e <_printf_i+0x1ea>
 800567a:	1b40      	subs	r0, r0, r5
 800567c:	6060      	str	r0, [r4, #4]
 800567e:	6863      	ldr	r3, [r4, #4]
 8005680:	6123      	str	r3, [r4, #16]
 8005682:	2300      	movs	r3, #0
 8005684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005688:	e7aa      	b.n	80055e0 <_printf_i+0x14c>
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	462a      	mov	r2, r5
 800568e:	4649      	mov	r1, r9
 8005690:	4640      	mov	r0, r8
 8005692:	47d0      	blx	sl
 8005694:	3001      	adds	r0, #1
 8005696:	d0ad      	beq.n	80055f4 <_printf_i+0x160>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	079b      	lsls	r3, r3, #30
 800569c:	d413      	bmi.n	80056c6 <_printf_i+0x232>
 800569e:	68e0      	ldr	r0, [r4, #12]
 80056a0:	9b03      	ldr	r3, [sp, #12]
 80056a2:	4298      	cmp	r0, r3
 80056a4:	bfb8      	it	lt
 80056a6:	4618      	movlt	r0, r3
 80056a8:	e7a6      	b.n	80055f8 <_printf_i+0x164>
 80056aa:	2301      	movs	r3, #1
 80056ac:	4632      	mov	r2, r6
 80056ae:	4649      	mov	r1, r9
 80056b0:	4640      	mov	r0, r8
 80056b2:	47d0      	blx	sl
 80056b4:	3001      	adds	r0, #1
 80056b6:	d09d      	beq.n	80055f4 <_printf_i+0x160>
 80056b8:	3501      	adds	r5, #1
 80056ba:	68e3      	ldr	r3, [r4, #12]
 80056bc:	9903      	ldr	r1, [sp, #12]
 80056be:	1a5b      	subs	r3, r3, r1
 80056c0:	42ab      	cmp	r3, r5
 80056c2:	dcf2      	bgt.n	80056aa <_printf_i+0x216>
 80056c4:	e7eb      	b.n	800569e <_printf_i+0x20a>
 80056c6:	2500      	movs	r5, #0
 80056c8:	f104 0619 	add.w	r6, r4, #25
 80056cc:	e7f5      	b.n	80056ba <_printf_i+0x226>
 80056ce:	bf00      	nop
 80056d0:	08005b0d 	.word	0x08005b0d
 80056d4:	08005b1e 	.word	0x08005b1e

080056d8 <__sflush_r>:
 80056d8:	898a      	ldrh	r2, [r1, #12]
 80056da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056de:	4605      	mov	r5, r0
 80056e0:	0710      	lsls	r0, r2, #28
 80056e2:	460c      	mov	r4, r1
 80056e4:	d458      	bmi.n	8005798 <__sflush_r+0xc0>
 80056e6:	684b      	ldr	r3, [r1, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	dc05      	bgt.n	80056f8 <__sflush_r+0x20>
 80056ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dc02      	bgt.n	80056f8 <__sflush_r+0x20>
 80056f2:	2000      	movs	r0, #0
 80056f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	d0f9      	beq.n	80056f2 <__sflush_r+0x1a>
 80056fe:	2300      	movs	r3, #0
 8005700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005704:	682f      	ldr	r7, [r5, #0]
 8005706:	6a21      	ldr	r1, [r4, #32]
 8005708:	602b      	str	r3, [r5, #0]
 800570a:	d032      	beq.n	8005772 <__sflush_r+0x9a>
 800570c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	075a      	lsls	r2, r3, #29
 8005712:	d505      	bpl.n	8005720 <__sflush_r+0x48>
 8005714:	6863      	ldr	r3, [r4, #4]
 8005716:	1ac0      	subs	r0, r0, r3
 8005718:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800571a:	b10b      	cbz	r3, 8005720 <__sflush_r+0x48>
 800571c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800571e:	1ac0      	subs	r0, r0, r3
 8005720:	2300      	movs	r3, #0
 8005722:	4602      	mov	r2, r0
 8005724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005726:	6a21      	ldr	r1, [r4, #32]
 8005728:	4628      	mov	r0, r5
 800572a:	47b0      	blx	r6
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	d106      	bne.n	8005740 <__sflush_r+0x68>
 8005732:	6829      	ldr	r1, [r5, #0]
 8005734:	291d      	cmp	r1, #29
 8005736:	d82b      	bhi.n	8005790 <__sflush_r+0xb8>
 8005738:	4a29      	ldr	r2, [pc, #164]	; (80057e0 <__sflush_r+0x108>)
 800573a:	410a      	asrs	r2, r1
 800573c:	07d6      	lsls	r6, r2, #31
 800573e:	d427      	bmi.n	8005790 <__sflush_r+0xb8>
 8005740:	2200      	movs	r2, #0
 8005742:	6062      	str	r2, [r4, #4]
 8005744:	04d9      	lsls	r1, r3, #19
 8005746:	6922      	ldr	r2, [r4, #16]
 8005748:	6022      	str	r2, [r4, #0]
 800574a:	d504      	bpl.n	8005756 <__sflush_r+0x7e>
 800574c:	1c42      	adds	r2, r0, #1
 800574e:	d101      	bne.n	8005754 <__sflush_r+0x7c>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b903      	cbnz	r3, 8005756 <__sflush_r+0x7e>
 8005754:	6560      	str	r0, [r4, #84]	; 0x54
 8005756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005758:	602f      	str	r7, [r5, #0]
 800575a:	2900      	cmp	r1, #0
 800575c:	d0c9      	beq.n	80056f2 <__sflush_r+0x1a>
 800575e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005762:	4299      	cmp	r1, r3
 8005764:	d002      	beq.n	800576c <__sflush_r+0x94>
 8005766:	4628      	mov	r0, r5
 8005768:	f7ff fbea 	bl	8004f40 <_free_r>
 800576c:	2000      	movs	r0, #0
 800576e:	6360      	str	r0, [r4, #52]	; 0x34
 8005770:	e7c0      	b.n	80056f4 <__sflush_r+0x1c>
 8005772:	2301      	movs	r3, #1
 8005774:	4628      	mov	r0, r5
 8005776:	47b0      	blx	r6
 8005778:	1c41      	adds	r1, r0, #1
 800577a:	d1c8      	bne.n	800570e <__sflush_r+0x36>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0c5      	beq.n	800570e <__sflush_r+0x36>
 8005782:	2b1d      	cmp	r3, #29
 8005784:	d001      	beq.n	800578a <__sflush_r+0xb2>
 8005786:	2b16      	cmp	r3, #22
 8005788:	d101      	bne.n	800578e <__sflush_r+0xb6>
 800578a:	602f      	str	r7, [r5, #0]
 800578c:	e7b1      	b.n	80056f2 <__sflush_r+0x1a>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005794:	81a3      	strh	r3, [r4, #12]
 8005796:	e7ad      	b.n	80056f4 <__sflush_r+0x1c>
 8005798:	690f      	ldr	r7, [r1, #16]
 800579a:	2f00      	cmp	r7, #0
 800579c:	d0a9      	beq.n	80056f2 <__sflush_r+0x1a>
 800579e:	0793      	lsls	r3, r2, #30
 80057a0:	680e      	ldr	r6, [r1, #0]
 80057a2:	bf08      	it	eq
 80057a4:	694b      	ldreq	r3, [r1, #20]
 80057a6:	600f      	str	r7, [r1, #0]
 80057a8:	bf18      	it	ne
 80057aa:	2300      	movne	r3, #0
 80057ac:	eba6 0807 	sub.w	r8, r6, r7
 80057b0:	608b      	str	r3, [r1, #8]
 80057b2:	f1b8 0f00 	cmp.w	r8, #0
 80057b6:	dd9c      	ble.n	80056f2 <__sflush_r+0x1a>
 80057b8:	6a21      	ldr	r1, [r4, #32]
 80057ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057bc:	4643      	mov	r3, r8
 80057be:	463a      	mov	r2, r7
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b0      	blx	r6
 80057c4:	2800      	cmp	r0, #0
 80057c6:	dc06      	bgt.n	80057d6 <__sflush_r+0xfe>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	e78e      	b.n	80056f4 <__sflush_r+0x1c>
 80057d6:	4407      	add	r7, r0
 80057d8:	eba8 0800 	sub.w	r8, r8, r0
 80057dc:	e7e9      	b.n	80057b2 <__sflush_r+0xda>
 80057de:	bf00      	nop
 80057e0:	dfbffffe 	.word	0xdfbffffe

080057e4 <_fflush_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	690b      	ldr	r3, [r1, #16]
 80057e8:	4605      	mov	r5, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	b913      	cbnz	r3, 80057f4 <_fflush_r+0x10>
 80057ee:	2500      	movs	r5, #0
 80057f0:	4628      	mov	r0, r5
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	b118      	cbz	r0, 80057fe <_fflush_r+0x1a>
 80057f6:	6a03      	ldr	r3, [r0, #32]
 80057f8:	b90b      	cbnz	r3, 80057fe <_fflush_r+0x1a>
 80057fa:	f7ff fa9b 	bl	8004d34 <__sinit>
 80057fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f3      	beq.n	80057ee <_fflush_r+0xa>
 8005806:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005808:	07d0      	lsls	r0, r2, #31
 800580a:	d404      	bmi.n	8005816 <_fflush_r+0x32>
 800580c:	0599      	lsls	r1, r3, #22
 800580e:	d402      	bmi.n	8005816 <_fflush_r+0x32>
 8005810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005812:	f7ff fb93 	bl	8004f3c <__retarget_lock_acquire_recursive>
 8005816:	4628      	mov	r0, r5
 8005818:	4621      	mov	r1, r4
 800581a:	f7ff ff5d 	bl	80056d8 <__sflush_r>
 800581e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005820:	07da      	lsls	r2, r3, #31
 8005822:	4605      	mov	r5, r0
 8005824:	d4e4      	bmi.n	80057f0 <_fflush_r+0xc>
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	059b      	lsls	r3, r3, #22
 800582a:	d4e1      	bmi.n	80057f0 <_fflush_r+0xc>
 800582c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800582e:	f7ff fb86 	bl	8004f3e <__retarget_lock_release_recursive>
 8005832:	e7dd      	b.n	80057f0 <_fflush_r+0xc>

08005834 <__swbuf_r>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	460e      	mov	r6, r1
 8005838:	4614      	mov	r4, r2
 800583a:	4605      	mov	r5, r0
 800583c:	b118      	cbz	r0, 8005846 <__swbuf_r+0x12>
 800583e:	6a03      	ldr	r3, [r0, #32]
 8005840:	b90b      	cbnz	r3, 8005846 <__swbuf_r+0x12>
 8005842:	f7ff fa77 	bl	8004d34 <__sinit>
 8005846:	69a3      	ldr	r3, [r4, #24]
 8005848:	60a3      	str	r3, [r4, #8]
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	071a      	lsls	r2, r3, #28
 800584e:	d525      	bpl.n	800589c <__swbuf_r+0x68>
 8005850:	6923      	ldr	r3, [r4, #16]
 8005852:	b31b      	cbz	r3, 800589c <__swbuf_r+0x68>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	6922      	ldr	r2, [r4, #16]
 8005858:	1a98      	subs	r0, r3, r2
 800585a:	6963      	ldr	r3, [r4, #20]
 800585c:	b2f6      	uxtb	r6, r6
 800585e:	4283      	cmp	r3, r0
 8005860:	4637      	mov	r7, r6
 8005862:	dc04      	bgt.n	800586e <__swbuf_r+0x3a>
 8005864:	4621      	mov	r1, r4
 8005866:	4628      	mov	r0, r5
 8005868:	f7ff ffbc 	bl	80057e4 <_fflush_r>
 800586c:	b9e0      	cbnz	r0, 80058a8 <__swbuf_r+0x74>
 800586e:	68a3      	ldr	r3, [r4, #8]
 8005870:	3b01      	subs	r3, #1
 8005872:	60a3      	str	r3, [r4, #8]
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	6022      	str	r2, [r4, #0]
 800587a:	701e      	strb	r6, [r3, #0]
 800587c:	6962      	ldr	r2, [r4, #20]
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	429a      	cmp	r2, r3
 8005882:	d004      	beq.n	800588e <__swbuf_r+0x5a>
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	07db      	lsls	r3, r3, #31
 8005888:	d506      	bpl.n	8005898 <__swbuf_r+0x64>
 800588a:	2e0a      	cmp	r6, #10
 800588c:	d104      	bne.n	8005898 <__swbuf_r+0x64>
 800588e:	4621      	mov	r1, r4
 8005890:	4628      	mov	r0, r5
 8005892:	f7ff ffa7 	bl	80057e4 <_fflush_r>
 8005896:	b938      	cbnz	r0, 80058a8 <__swbuf_r+0x74>
 8005898:	4638      	mov	r0, r7
 800589a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f806 	bl	80058b0 <__swsetup_r>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d0d5      	beq.n	8005854 <__swbuf_r+0x20>
 80058a8:	f04f 37ff 	mov.w	r7, #4294967295
 80058ac:	e7f4      	b.n	8005898 <__swbuf_r+0x64>
	...

080058b0 <__swsetup_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4b2a      	ldr	r3, [pc, #168]	; (800595c <__swsetup_r+0xac>)
 80058b4:	4605      	mov	r5, r0
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	460c      	mov	r4, r1
 80058ba:	b118      	cbz	r0, 80058c4 <__swsetup_r+0x14>
 80058bc:	6a03      	ldr	r3, [r0, #32]
 80058be:	b90b      	cbnz	r3, 80058c4 <__swsetup_r+0x14>
 80058c0:	f7ff fa38 	bl	8004d34 <__sinit>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058ca:	0718      	lsls	r0, r3, #28
 80058cc:	d422      	bmi.n	8005914 <__swsetup_r+0x64>
 80058ce:	06d9      	lsls	r1, r3, #27
 80058d0:	d407      	bmi.n	80058e2 <__swsetup_r+0x32>
 80058d2:	2309      	movs	r3, #9
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	e034      	b.n	800594c <__swsetup_r+0x9c>
 80058e2:	0758      	lsls	r0, r3, #29
 80058e4:	d512      	bpl.n	800590c <__swsetup_r+0x5c>
 80058e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058e8:	b141      	cbz	r1, 80058fc <__swsetup_r+0x4c>
 80058ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ee:	4299      	cmp	r1, r3
 80058f0:	d002      	beq.n	80058f8 <__swsetup_r+0x48>
 80058f2:	4628      	mov	r0, r5
 80058f4:	f7ff fb24 	bl	8004f40 <_free_r>
 80058f8:	2300      	movs	r3, #0
 80058fa:	6363      	str	r3, [r4, #52]	; 0x34
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005902:	81a3      	strh	r3, [r4, #12]
 8005904:	2300      	movs	r3, #0
 8005906:	6063      	str	r3, [r4, #4]
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	f043 0308 	orr.w	r3, r3, #8
 8005912:	81a3      	strh	r3, [r4, #12]
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	b94b      	cbnz	r3, 800592c <__swsetup_r+0x7c>
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800591e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005922:	d003      	beq.n	800592c <__swsetup_r+0x7c>
 8005924:	4621      	mov	r1, r4
 8005926:	4628      	mov	r0, r5
 8005928:	f000 f850 	bl	80059cc <__smakebuf_r>
 800592c:	89a0      	ldrh	r0, [r4, #12]
 800592e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005932:	f010 0301 	ands.w	r3, r0, #1
 8005936:	d00a      	beq.n	800594e <__swsetup_r+0x9e>
 8005938:	2300      	movs	r3, #0
 800593a:	60a3      	str	r3, [r4, #8]
 800593c:	6963      	ldr	r3, [r4, #20]
 800593e:	425b      	negs	r3, r3
 8005940:	61a3      	str	r3, [r4, #24]
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	b943      	cbnz	r3, 8005958 <__swsetup_r+0xa8>
 8005946:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800594a:	d1c4      	bne.n	80058d6 <__swsetup_r+0x26>
 800594c:	bd38      	pop	{r3, r4, r5, pc}
 800594e:	0781      	lsls	r1, r0, #30
 8005950:	bf58      	it	pl
 8005952:	6963      	ldrpl	r3, [r4, #20]
 8005954:	60a3      	str	r3, [r4, #8]
 8005956:	e7f4      	b.n	8005942 <__swsetup_r+0x92>
 8005958:	2000      	movs	r0, #0
 800595a:	e7f7      	b.n	800594c <__swsetup_r+0x9c>
 800595c:	20000068 	.word	0x20000068

08005960 <_sbrk_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	4d06      	ldr	r5, [pc, #24]	; (800597c <_sbrk_r+0x1c>)
 8005964:	2300      	movs	r3, #0
 8005966:	4604      	mov	r4, r0
 8005968:	4608      	mov	r0, r1
 800596a:	602b      	str	r3, [r5, #0]
 800596c:	f7fb fb06 	bl	8000f7c <_sbrk>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d102      	bne.n	800597a <_sbrk_r+0x1a>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	b103      	cbz	r3, 800597a <_sbrk_r+0x1a>
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	200006b4 	.word	0x200006b4

08005980 <__swhatbuf_r>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	460c      	mov	r4, r1
 8005984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005988:	2900      	cmp	r1, #0
 800598a:	b096      	sub	sp, #88	; 0x58
 800598c:	4615      	mov	r5, r2
 800598e:	461e      	mov	r6, r3
 8005990:	da0d      	bge.n	80059ae <__swhatbuf_r+0x2e>
 8005992:	89a3      	ldrh	r3, [r4, #12]
 8005994:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005998:	f04f 0100 	mov.w	r1, #0
 800599c:	bf0c      	ite	eq
 800599e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80059a2:	2340      	movne	r3, #64	; 0x40
 80059a4:	2000      	movs	r0, #0
 80059a6:	6031      	str	r1, [r6, #0]
 80059a8:	602b      	str	r3, [r5, #0]
 80059aa:	b016      	add	sp, #88	; 0x58
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
 80059ae:	466a      	mov	r2, sp
 80059b0:	f000 f848 	bl	8005a44 <_fstat_r>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	dbec      	blt.n	8005992 <__swhatbuf_r+0x12>
 80059b8:	9901      	ldr	r1, [sp, #4]
 80059ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80059be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80059c2:	4259      	negs	r1, r3
 80059c4:	4159      	adcs	r1, r3
 80059c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059ca:	e7eb      	b.n	80059a4 <__swhatbuf_r+0x24>

080059cc <__smakebuf_r>:
 80059cc:	898b      	ldrh	r3, [r1, #12]
 80059ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059d0:	079d      	lsls	r5, r3, #30
 80059d2:	4606      	mov	r6, r0
 80059d4:	460c      	mov	r4, r1
 80059d6:	d507      	bpl.n	80059e8 <__smakebuf_r+0x1c>
 80059d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	6123      	str	r3, [r4, #16]
 80059e0:	2301      	movs	r3, #1
 80059e2:	6163      	str	r3, [r4, #20]
 80059e4:	b002      	add	sp, #8
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	ab01      	add	r3, sp, #4
 80059ea:	466a      	mov	r2, sp
 80059ec:	f7ff ffc8 	bl	8005980 <__swhatbuf_r>
 80059f0:	9900      	ldr	r1, [sp, #0]
 80059f2:	4605      	mov	r5, r0
 80059f4:	4630      	mov	r0, r6
 80059f6:	f7ff fb0f 	bl	8005018 <_malloc_r>
 80059fa:	b948      	cbnz	r0, 8005a10 <__smakebuf_r+0x44>
 80059fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a00:	059a      	lsls	r2, r3, #22
 8005a02:	d4ef      	bmi.n	80059e4 <__smakebuf_r+0x18>
 8005a04:	f023 0303 	bic.w	r3, r3, #3
 8005a08:	f043 0302 	orr.w	r3, r3, #2
 8005a0c:	81a3      	strh	r3, [r4, #12]
 8005a0e:	e7e3      	b.n	80059d8 <__smakebuf_r+0xc>
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	6020      	str	r0, [r4, #0]
 8005a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a18:	81a3      	strh	r3, [r4, #12]
 8005a1a:	9b00      	ldr	r3, [sp, #0]
 8005a1c:	6163      	str	r3, [r4, #20]
 8005a1e:	9b01      	ldr	r3, [sp, #4]
 8005a20:	6120      	str	r0, [r4, #16]
 8005a22:	b15b      	cbz	r3, 8005a3c <__smakebuf_r+0x70>
 8005a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f000 f81d 	bl	8005a68 <_isatty_r>
 8005a2e:	b128      	cbz	r0, 8005a3c <__smakebuf_r+0x70>
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	81a3      	strh	r3, [r4, #12]
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	431d      	orrs	r5, r3
 8005a40:	81a5      	strh	r5, [r4, #12]
 8005a42:	e7cf      	b.n	80059e4 <__smakebuf_r+0x18>

08005a44 <_fstat_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4d07      	ldr	r5, [pc, #28]	; (8005a64 <_fstat_r+0x20>)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	4611      	mov	r1, r2
 8005a50:	602b      	str	r3, [r5, #0]
 8005a52:	f7fb fa6a 	bl	8000f2a <_fstat>
 8005a56:	1c43      	adds	r3, r0, #1
 8005a58:	d102      	bne.n	8005a60 <_fstat_r+0x1c>
 8005a5a:	682b      	ldr	r3, [r5, #0]
 8005a5c:	b103      	cbz	r3, 8005a60 <_fstat_r+0x1c>
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	bd38      	pop	{r3, r4, r5, pc}
 8005a62:	bf00      	nop
 8005a64:	200006b4 	.word	0x200006b4

08005a68 <_isatty_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4d06      	ldr	r5, [pc, #24]	; (8005a84 <_isatty_r+0x1c>)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4604      	mov	r4, r0
 8005a70:	4608      	mov	r0, r1
 8005a72:	602b      	str	r3, [r5, #0]
 8005a74:	f7fb fa69 	bl	8000f4a <_isatty>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_isatty_r+0x1a>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_isatty_r+0x1a>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	200006b4 	.word	0x200006b4

08005a88 <_init>:
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	bf00      	nop
 8005a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8e:	bc08      	pop	{r3}
 8005a90:	469e      	mov	lr, r3
 8005a92:	4770      	bx	lr

08005a94 <_fini>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr
